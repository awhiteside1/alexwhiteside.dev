---
import Lifted from '../../../ui/astro/components/lifted/Lifted.astro'

import { css, cx } from '@styles/css'
import { stacked } from './styles'

type Props = {
    icon: string
    elements: Array<{ name: string }>
}
const { icon, elements } = Astro.props
---

<Lifted liftClearance="full" colorInner="">
    <div
        slot="cover"
        class="aspect-square dark:bg-neutral-700 shadow-sm dark:shadow-neutral-900 flex flex-col items-center gap-2 justify-center rounded-lg p-3 text-center transition-all hover:shadow-md"
    >
        <svg viewBox="0 0 24 24" class="h-6 w-6">
            <use xlink:href={`#${icon}`}></use>
        </svg>

        <p
            class="text-sm max-w-20 text-neutral-800 dark:text-neutral-100 text-balance leading-tight font-medium"
        >
            <slot />
        </p>
    </div>
    <div
        slot="inner"
        class="bg-radial from-zinc-900 to-zinc-200 dark:bg-neutral-900 w-full h-full relative"
        data-kind="stacked"
    >
        {
            elements.map((element, index) => (
                <div class={cx(stacked, 'start')}>
                    <p class="text-xs text-neutral-200 dark:text-neutral-400 font-medium  ">
                        {element.name}
                    </p>
                </div>
            ))
        }
    </div>
</Lifted>

<style is:global lang="scss">
    [data-kind='stacked'] {
        & .visible {
            opacity: 1;
            transform: translateX(0px);
        }

        & .start {
            opacity: 0;
            transform: translateX(-10px);
        }

        & .end {
            opacity: 0;
            transform: translateX(10px);
        }
    }
</style>

<script>
    document.querySelectorAll('[data-kind=stacked]').forEach((stack) => {
        const elements = stack.querySelectorAll('div')
        elements.forEach((el) => {
            el.addEventListener('transitionend', (evt) => {
                const element = evt.currentTarget
                if (!(element instanceof HTMLElement)) return
                element.classList.replace('end', 'start')
                if (element.classList.contains('visible')) {
                    setTimeout(
                        () => element.classList.replace('visible', 'end'),
                        1000
                    )
                }
            })
        })
        let count = 0
        setInterval(() => {
            elements[count++ % elements.length].classList.replace(
                'start',
                'visible'
            )
        }, 3000)
    })
</script>
