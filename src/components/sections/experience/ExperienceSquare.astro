---
import Lifted from '../../../ui/astro/components/lifted/Lifted.astro'

import { css, cx } from '@styles/css'
import { stacked } from './styles'

type Props = {
    icon?: string
    elements: Array<{
        name?: string
        companies?: Array<{ logo: string; company: string }>
    }>
}
const { icon, elements } = Astro.props
---

<Lifted liftClearance="full" colorInner="">
    <div
        slot="cover"
        class="aspect-square dark:bg-neutral-700 shadow-sm dark:shadow-neutral-900 flex flex-col items-center gap-2 justify-evenly rounded-lg p-3 text-center transition-all"
    >
        <slot name="icon" />

        <div
            class="text-sm max-w-20 text-neutral-800 dark:text-neutral-100 text-balance leading-tight font-semibold"
        >
            <slot />
        </div>
    </div>
    <div
        slot="inner"
        class="bg-radial from-zinc-900 to-zinc-500 dark:to-zinc-700 w-full h-full relative"
        data-kind="stacked"
    >
        {
            elements.map((element, index) => {
                return (
                    <section
                        class={cx(
                            stacked,
                            'start',
                            'flex flex-col items-center justify-evenly text-balance'
                        )}
                    >
                        {element.companies && (
                            <div class="flex flex-row flex-wrap mx-2 max-h-8">
                                {element.companies.map((company) => (
                                    <div class="relative basis-1 grow flex flex-none items-center justify-center rounded-full shadow-zinc-800/5 ring-1 ring-zinc-900/5 dark:border dark:border-zinc-700/50 dark:bg-zinc-800 dark:ring-0  -mx-1">
                                        <img
                                            src={company.logo}
                                            alt=""
                                            class="h-full w-full aspect-square object-cover rounded-full max-h-7"
                                        />
                                    </div>
                                ))}
                            </div>
                        )}
                        <p class="text-sm tracking-tight text-neutral-200 dark:text-neutral-300 font-medium text-center ">
                            {element.name}
                        </p>
                    </section>
                )
            })
        }
    </div>
</Lifted>

<style is:global lang="scss">
    [data-kind='stacked'] {
        & .visible {
            opacity: 1;
            transform: translateX(0px);
        }

        & .start {
            opacity: 0;
            transform: translateX(-10px);
        }

        & .end {
            opacity: 0;
            transform: translateX(10px);
        }
    }
</style>

<script>
    import { ensureInit } from '../../../lib/astro'

    console.log('Script')
    const setup = (document: Document) => {
        document.querySelectorAll('[data-kind=stacked]').forEach((stack) => {
            let count = 0
            let lastTimestamp = 0
            // console.log('Script init for stack', stack.textContent)
            const showNext = () => {
                const element = count % elements.length
                elements[element].classList.replace('start', 'visible')
                count = count + 1
            }

            const elements = stack.querySelectorAll('section')
            if (elements.length <= 1) {
                elements.forEach((e) => e.classList.replace('start', 'visible'))
                return
            }
            elements.forEach((el) => {
                // console.log('for each element handle setup', el.textContent)
                el.addEventListener('transitionend', (evt) => {
                    const element = evt.target
                    if (!(element instanceof HTMLElement)) return
                    if (evt.timeStamp - lastTimestamp < 20) {
                        return
                    }
                    lastTimestamp = evt.timeStamp
                    if (element.classList.replace('end', 'start')) {
                    } else if (element.classList.contains('visible')) {
                        setTimeout(
                            () => element.classList.replace('visible', 'end'),
                            2000
                        )
                    } else if (element.classList.contains('start')) {
                        setTimeout(() => showNext(), 50)
                    }
                })
            })
            showNext()
        })
    }
    ensureInit(setup, { pages: ['/'] })
</script>
