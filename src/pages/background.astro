---
import { getCollection } from 'astro:content'
import MediaElement from '@ui/astro/components/elements/MediaElement.astro'
import WorkCard from '@ui/astro/components/elements/WorkCard.astro'
import { byDate, generateInterval } from '@ui/utils/interval'
import { first, group, mapValues, sift } from 'radash'
import GradientText from '../ui/astro/components/elements/GradientText.astro'
import Container from '../ui/astro/components/global/Container.astro'
import Layout from '../ui/astro/layouts/Layout.astro'
const allWork = await getCollection('work')
const grouped = group(allWork, (w) => w.data.company)
const byCompany = mapValues(
    grouped,
    (group) =>
        group && {
            roles: group?.toSorted(byDate((role) => role.data.from)),
            company: first(sift(group.map((x) => x.data.company))),
            logo: first(sift(group.map((x) => x.data.logo))),
            from: group
                .map((x) => x.data.from)
                .toSorted()
                .toReversed()
                .shift(),
            to: group
                .map((x) => x.data.to)
                .toSorted()
                .shift(),
        }
)
const sortedByCompany = Object.values(byCompany).toSorted(
    byDate((x) => x?.from)
)
---

<Layout
    title="Background & Experience"
    description="Multiple startup exists in Fintech, Edtech, and more."
>
<div slot="before" class="text-3xl z-[100] translate-y-4"><GradientText slot="before" color="pink">Career & </GradientText></div>

<div class="scroll-scale load" slot="title"><GradientText  color="pink" >Background</GradientText></div>

    <Container>
        <div
        
            id="sticky-backdrop"
            style="opacity: 0;"
            class="z-[2] fixed top-12 w-full h-20 left-0 right-0 backdrop-blur-sm saturate-200 transition-opacity duration-300"
        >
            &nbsp;
        </div>
        <div class="space-y-6">

            <p class="mt-6 text-base text-zinc-600 dark:text-zinc-400">
                Over the last decade I've spent most of my time in Fintech and
                Edtech as a (very) hands on technical leader.
            </p>

            <div>
                <div data-container="companies" class="flex max-w-4xl flex-col">
                    {
                        sortedByCompany.map(
                            (company) =>
                                company &&
                                company.logo &&
                                company.company &&
                                company.from && (
                                    <>
                                        <MediaElement
                                            logo={company.logo}
                                            title={company.company}
                                            subtitle={generateInterval(
                                                company.from,
                                                company.to
                                            )}
                                        />
                                        <article class="md:grid md:grid-cols-4 gap-y-4 gap-x-4 md:items-baseline">
                                            {company?.roles.map((entry) => (
                                                <WorkCard slug={entry.slug} />
                                            ))}
                                        </article>
                                    </>
                                )
                        )
                    }
                </div>
            </div>
        </div>
    </Container>
</Layout>

<script >
    const getBackdrop = () => {
        const background = document.getElementById('sticky-backdrop')
        if (!background) throw new Error('No Background Element Found')
        return background
    }

    const getSections = () => {
        return (
            document.querySelectorAll<HTMLElement>(
                '[data-section-kind="sticky"]'
            ) ?? []
        )
    }

    const measureSignificantSectionLocation = () => {
        const section = getSections().item(0)
        if (!section) return 0
        const sectionRect = section.getBoundingClientRect()
        return sectionRect.y
    }

    const calculateOverlap = () => {
        const backdropRect = getBackdrop().getBoundingClientRect()
        const backdropInterval = [
            backdropRect.y + backdropRect.height,
            backdropRect.y,
        ]

        const sectionLocation = significantSectionLocation

        const isOverlapping = sectionLocation < backdropInterval[0]
        if (!isOverlapping) return 0

        const overlapAmount =
            (backdropInterval[0] - sectionLocation) / backdropRect.height
        return overlapAmount
    }

    const toOpacity = (value: number) => {
        if (typeof value != 'number') return '0'
        if (value > 0.95) return '1'
        if (value < 0.05) return '0'
        return (Math.round(value * 100) / 100).toString()
    }

    let isTicking = false
    let significantSectionLocation = 0

    const updateOpacity = () => {
        const overlap = calculateOverlap()
        requestAnimationFrame(() => {
            try{
            const background = getBackdrop()
                background.style.opacity = toOpacity(overlap)
            } catch (e) {
                console.error(e)
            }
        })
    }

    const listener =() => {
        if (!isTicking) {
            isTicking = true

            requestAnimationFrame(() => {
                try {
                    const position = measureSignificantSectionLocation()
                    if (Math.abs(position - significantSectionLocation) > 3) {
                        significantSectionLocation = position
                        updateOpacity()
                    }
                } catch (e) {
                    removeEventListener('scroll', listener)
                }
                isTicking = false
            })
        }
    }

    const initializeScroll = ()=>{
        const backdropEl = document.getElementById('sticky-backdrop')

        if(backdropEl && !backdropEl.dataset.initialized){
            console.log('initializing scroll')
            addEventListener('scroll', listener)
            backdropEl.dataset.initialized = 'true'
        }
    }
    
    document.addEventListener('astro:page-load', () => initializeScroll())

    
</script>
