---
import { getStarredReposByLanguage } from '@github/getRepos'
import Flat from './Flat.astro'
import RepoList from './RepoList.astro'
const groups = await getStarredReposByLanguage()
---

<script is:inline data-astro-rerun>
    requestAnimationFrame(() => {
        const animates = document.getElementsByClassName('animate')
        for (const animate of animates) {
            animate.classList.add('show')
        }
    })
</script>

<script is:inline>
    /**
     * @param {HTMLImageElement} element
     * @param {{fill?:`${string}`, initials?:string}} options
     */
    function imageLoadErrorHandler(element, options = {}) {
        try {
            if (element.getAttribute('data-image-error-handled')) return
            element.setAttribute('data-image-error-handled', 'true')
            const initials =
                options.initials ??
                element
                    .getAttribute('alt')
                    .split(' ')
                    .map((x) => x.at(0)?.toUpperCase())
                    .join('')
            const letters = element
                .getAttribute('alt')
                .toUpperCase()
                .replaceAll(' ', '')
                .replaceAll(/[^a-zA-Z]/g, 'M')
                .split('')
            const deterministicNumber =
                letters
                    .map((x) => x.charCodeAt(0) - 'A'.charCodeAt(0))
                    .reduce((a, c) => (c + a) / 2) / 26

            const hue = deterministicNumber * 360
            const base64Encoded = btoa(
                `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <circle cx="50" cy="50" r="50" fill="oklch( 70% 0.25 ${hue})"/>

    <text x="50%" y="50%" text-anchor="middle" dy=".35em" font-size="36" fill="#fff" font-family="Arial, sans-serif">
        ${initials}
    </text>
</svg>`
            )
            element.src = `data:image/svg+xml;base64,${base64Encoded}`
        } catch (err) {
            console.error(err)
        }
    }
</script>

{
    groups.map((group) => {
        const language = group.language.toLowerCase()
        const icon = `https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/${language}/${language}-original.svg`

        return (
            <Flat>
                <div class="animate">
                    <div class="mx-auto flex items-center justify-between gap-x-8 lg:mx-0">
                        <div class="flex items-center gap-x-6">
                            <img
                                onerror="imageLoadErrorHandler(this)"
                                src={icon}
                                alt={group.language}
                                class="h-16 w-16 flex-none"
                            />
                            <h1>
                                <div class="mb-1 text-lg font-semibold leading-6 ">
                                    {group.language}
                                </div>
                                <div class="text-sm">
                                    {group.repos.length} Repositories
                                </div>
                            </h1>
                        </div>
                        <div class="flex items-center gap-x-4 sm:gap-x-6">
                            <a
                                type="button"
                                target="_blank"
                                href={`https://github.com/awhiteside1?tab=stars&language=${group.language}`}
                                class=" text-sm font-semibold  p-3 text-gray-900 transition hover:bg-gray-100 bg-white shadow-inner shadow-gray-300 rounded-lg"
                            >
                                View All
                            </a>
                        </div>
                    </div>
                </div>
                <div class="animate">
                    <RepoList starredRepos={group.repos} />
                </div>
            </Flat>
        )
    })
}
