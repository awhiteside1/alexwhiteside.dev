---
// No changes to template
---

<button
    title="Switch theme"
    id="theme-picker"
    aria-label="Switch theme"
    class="group flex justify-start rounded-lg hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5 h-10 -mx-2 text-sm font-semibold leading-6 text-nowrap min-w-[160px] gap-3 px-2 items-center"
>
    <svg
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        class="h-6 w-6 shrink-0 transition-colors duration-300 ease-in-out group-hover:animate-pulse group-hover:fill-black group-focus-visible:animate-pulse group-focus-visible:fill-black group-hover:dark:fill-white dark:group-focus-visible:fill-white"
    >
        <use xlink:href="#moon"></use>
    </svg>
    <p class="capitalize" id="theme-label"></p>
</button>

<script is:inline>
    const THEME_STORAGE_KEY = 'theme'
    const THEME_VALUES = ['system', 'dark', 'light']

    /**
     * Gets the next theme in the cycle.
     * @param {string} current - Current theme
     * @returns {string} Next theme in the cycle
     */
    function getNextTheme(current) {
        const currentIndex = THEME_VALUES.indexOf(current)
        const nextIndex = (currentIndex + 1) % THEME_VALUES.length
        return THEME_VALUES[nextIndex]
    }

    /**
     * Gets the system's preferred color scheme.
     * @returns {'dark' | 'light'} The system theme preference
     */
    function getSystemTheme() {
        return window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light'
    }

    /**
     * Gets the user's explicitly set theme preference from localStorage.
     * @returns {'dark' | 'light' | 'system'} The user's theme preference, defaults to 'system'
     */
    function getUserTheme() {
        return localStorage.getItem(THEME_STORAGE_KEY) ?? 'system'
    }

    /**
     * Resolves the actual theme to apply, converting 'system' to the current system preference.
     * @param {string} userTheme - The user's theme preference
     * @returns {'dark' | 'light'} The resolved theme to apply
     */
    function resolveTheme(userTheme) {
        return userTheme === 'system' ? getSystemTheme() : userTheme
    }

    /**
     * Updates the visible theme label text in the UI.
     * @param {string} theme - The theme name to display
     */
    function updateThemeLabel(theme) {
        const label = document.getElementById('theme-label')
        if (label) {
            label.innerText = `${theme} theme`
        }
    }

    /**
     * Applies a theme to the document without CSS transitions.
     * This prevents visual flashing during theme changes, which is critical for SSG sites
     * with client-side navigation and View Transitions.
     * @param {string} theme - The theme class to apply ('dark' or 'light')
     */
    function applyThemeWithoutTransitions(theme) {
        // Temporarily disable all CSS transitions to prevent animated theme change flash
        const css = document.createElement('style')
        css.textContent = `* {
            -webkit-transition: none !important;
            -moz-transition: none !important;
            -o-transition: none !important;
            -ms-transition: none !important;
            transition: none !important;
        }`

        document.head.appendChild(css)

        // Update theme classes
        document.documentElement.classList.remove(...THEME_VALUES)
        document.documentElement.classList.add(theme)

        // Force reflow to ensure styles apply before re-enabling transitions
        window.getComputedStyle(css).opacity

        // Re-enable transitions
        document.head.removeChild(css)
    }

    /**
     * Sets up a listener for system theme changes.
     * When the user is on 'system' mode, automatically updates the theme
     * if their OS preference changes.
     */
    function setupSystemThemeListener() {
        if (window.matchMedia && !window.__themeSystemListenerSetup) {
            window.__themeSystemListenerSetup = true

            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                const userTheme = getUserTheme()

                // Only auto-update if user is on 'system' mode
                if (userTheme === 'system') {
                    const newTheme = e.matches ? 'dark' : 'light'
                    applyThemeWithoutTransitions(newTheme)
                    updateThemeLabel('system')
                }
            })
        }
    }

    /**
     * Initial theme application that runs immediately on page load.
     * This prevents flash of unstyled content (FOUT) by applying the theme
     * before the page renders.
     */
    if (!document.documentElement.hasAttribute('data-theme-initialized')) {
        document.documentElement.setAttribute('data-theme-initialized', 'true')

        const userTheme = getUserTheme()
        const resolvedTheme = resolveTheme(userTheme)

        document.documentElement.classList.remove(...THEME_VALUES)
        document.documentElement.classList.add(resolvedTheme)

        // Update label on next animation frame to ensure DOM is ready
        requestAnimationFrame(() => updateThemeLabel(userTheme))

        // Setup system theme change listener
        setupSystemThemeListener()
    }

    /**
     * Astro View Transitions handler that applies the correct theme before swapping to a new page.
     * Critical for preventing FOUT during client-side navigation.
     */
    document.addEventListener('astro:before-swap', (ev) => {
        const userTheme = getUserTheme()
        const resolvedTheme = resolveTheme(userTheme)

        ev.newDocument.documentElement.classList.remove(...THEME_VALUES)
        ev.newDocument.documentElement.classList.add(resolvedTheme)
    })

    /**
     * Updates the theme label after client-side navigation.
     */
    document.addEventListener('astro:after-swap', () => {
        updateThemeLabel(getUserTheme())
    })

    /**
     * Sets up the theme picker button click handler.
     * Cycles through system → dark → light → system.
     */
    function setupThemePicker() {
        const picker = document.getElementById('theme-picker')
        if (!picker || picker.hasAttribute('data-theme-setup')) {
            return
        }

        picker.setAttribute('data-theme-setup', 'true')

        picker.addEventListener('click', (evt) => {
            evt.stopPropagation()

            const currentTheme = getUserTheme()
            const nextTheme = getNextTheme(currentTheme)

            // Update storage
            if (nextTheme === 'system') {
                localStorage.removeItem(THEME_STORAGE_KEY)
            } else {
                localStorage.setItem(THEME_STORAGE_KEY, nextTheme)
            }

            // Apply theme
            const resolvedTheme = resolveTheme(nextTheme)
            applyThemeWithoutTransitions(resolvedTheme)

            // Update label
            updateThemeLabel(nextTheme)
        })
    }

    // Setup on initial page load and after client-side navigation
    document.addEventListener('astro:page-load', setupThemePicker)
    setupThemePicker() // Also run immediately in case astro:page-load already fired
</script>