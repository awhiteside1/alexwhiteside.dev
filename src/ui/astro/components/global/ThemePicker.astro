---
const shapes = {
    dark: '<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>',
    light: `<circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>`,
    system: `<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
            <line x1="8" y1="21" x2="16" y2="21"></line>
            <line x1="12" y1="17" x2="12" y2="21"></line>`,
}
---

<style>
    [data-shape] {
        display: none;
    }

    :root.dark [data-shape='dark'],
    :root.system [data-shape='system'],
    :root.light [data-shape='light'] {
        display: flex;
    }
    :root.system [data-shape='light'],
    :root.system [data-shape='dark'] {
        display: none;
    }
</style>

<script is:inline>

    function toggleTheme(theme) {
        const css = document.createElement('style')

        css.appendChild(
            document.createTextNode(
                `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
            )
        )

        document.head.appendChild(css)
        document.documentElement.classList.remove('dark')
        document.documentElement.classList.remove('light')
        document.documentElement.classList.remove('system')
        document.documentElement.classList.add(...theme)

        window.getComputedStyle(css).opacity
        document.head.removeChild(css)
    }

    const handleThemeButtonClick = () => {
        const theme = localStorage.getItem('theme') ?? 'system'
        let nextTheme = 'system'
        switch (theme) {
            case 'system':
                nextTheme = 'dark'
                break
            case 'dark':
                nextTheme = 'light'
                break
            case 'light':
                nextTheme = 'system'
                break
        }
        localStorage.setItem('theme', nextTheme)
        updateTheme()
    }

    const updateTheme = () => {
        const theme = localStorage.getItem('theme')
        let colorTheme
        if (theme === 'system') {
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                colorTheme = 'dark'
            } else {
                colorTheme = 'light'
            }
        }
        toggleTheme([theme, colorTheme].filter(Boolean))
    }

    function initialize() {
        const buttons =
            document
                .getElementById('theme-picker')
                ?.getElementsByTagName('button') ?? []

        for (const button of buttons) {
            button.addEventListener('click', handleThemeButtonClick)
        }

        window
            .matchMedia('(prefers-color-scheme: dark)')
            .addEventListener('change', (event) => {
                if (localStorage.theme === 'system') {
                    updateTheme()
                }
            })

        updateTheme()
    }
    document.addEventListener('DOMContentLoaded', () => initialize())
    document.addEventListener('astro:after-swap', () => initialize())
    updateTheme()
</script>

<span id="theme-picker">
    {
        Object.entries(shapes).map(([name, path]) => (
            <button
                data-shape={name}
                aria-label={`${name} theme`}
                class="group flex size-9 items-center justify-center rounded  border-black/15 hover:bg-black/5 focus-visible:bg-black/5 dark:border-white/20 dark:hover:bg-white/5 dark:focus-visible:bg-white/5"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="1.5"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="transition-colors duration-300 ease-in-out group-hover:animate-pulse group-hover:stroke-black group-focus-visible:animate-pulse group-focus-visible:stroke-black group-hover:dark:stroke-white dark:group-focus-visible:stroke-white"
                    set:html={path}
                ></svg>
            </button>
        ))
    }
</span>
