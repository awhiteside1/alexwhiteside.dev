---
import {
    paletteWrapper,
    palette,
    paletteCover,
    paletteBase,
    innerColor,
    coverColor,
} from './styles'
import { css } from '@styles/css'
import { draw, min } from 'radash'

type Props = {
    colorInner?: string
    colorCover?: string
    minSize?: string
    liftClearance?: 'full' | 'tight' | 'low'
}
const {
    colorInner = 'green',
    colorCover = 'white',
    minSize = '100px',
    liftClearance = 'low',
} = Astro.props
---

<div class={paletteWrapper}>
    <div
        role="group"
        class={palette}
        style={{
            ['--bg-color-main']: colorCover,
            ...innerColor.set(colorInner),
            ...coverColor.set(colorCover),
        }}
    >
        <div data-role="cover" class={paletteCover({ lift: liftClearance })}>
            <slot name="cover" />
        </div>
        <div class={paletteBase}>
            <slot name="inner" />
        </div>
    </div>
</div>

<script>
    import { animate, type AnimationControls, stagger, timeline } from 'motion'

    const controls = animate(
        '[data-role=cover]',
        { transform: [null, 'rotateX(40deg)', 'rotateX(0deg)'] },
        {
            delay: stagger(0.5),
            duration: 1,
            direction: 'alternate',
            easing: 'ease-in',
            persist: true,
        }
    )
    controls.finished.then(() => controls.cancel())

    // const createOnHoverEnd =
    //     (controls: AnimationControls): EventListenerOrEventListenerObject =>
    //     (evt) => {
    //         console.log(evt)
    //         evt.stopPropagation()
    //
    //         const group = evt.currentTarget
    //         console.log(group)
    //         if (!(group instanceof HTMLElement)) return
    //         if (group.dataset.hovered != 'true') return
    //         group.dataset.hovered = 'false'
    //         controls.playbackRate = -1
    //         controls.play()
    //         controls.finished.then(() => controls.commitStyles())
    //     }
    //
    // const createOnHover =
    //     (controls: AnimationControls): EventListenerOrEventListenerObject =>
    //     (evt) => {
    //         evt.stopPropagation()
    //         console.log('mouseover')
    //
    //         const group = evt.currentTarget
    //         if (!(group instanceof HTMLElement)) return
    //         if (group.dataset.hovered === 'true') return
    //         group.dataset.hovered = 'true'
    //         controls.playbackRate = 1
    //         controls.play()
    //         controls.finished.then(() => controls.commitStyles())
    //     }
    //
    // // document.querySelectorAll('[role=group]').forEach((el) => {
    // //     const animation = createAnimation(el)
    // //     if (animation) {
    // //         el.addEventListener('mouseover', createOnHover(animation))
    // //         el.addEventListener('mouseleave', createOnHoverEnd(animation))
    // //     }
    // // })
</script>
