---
import '../../globals/global.css'
import { ViewTransitions } from 'astro:transitions'

interface Props {
    title: string
    description: string
    image?: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link
    rel="icon"
    href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üßô‚Äç‚ôÇÔ∏è</text></svg>"
/>
<meta name="generator" content={Astro.generator} />
<meta name="lastUpdate" content={new Date().toISOString()} />
<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<noscript>
    <style>
        .animate:not(.show) {
            opacity: 1;
        }
    </style>
</noscript>

<ViewTransitions />


<script is:inline>
    function init() {
        animate()
        addCopyCodeButtons()
    }

    function animate() {
        const animateElements = document.querySelectorAll('.animate')

        animateElements.forEach((element, index) => {
            setTimeout(() => {
                element.classList.add('show')
            }, index * 50)
        })
    }


    function addCopyCodeButtons() {
        let copyButtonLabel = 'üìã'
        let codeBlocks = Array.from(document.querySelectorAll('pre'))

        async function copyCode(codeBlock, copyButton) {
            const codeText = codeBlock.innerText
            const buttonText = copyButton.innerText
            const textToCopy = codeText.replace(buttonText, '')

            await navigator.clipboard.writeText(textToCopy)
            copyButton.innerText = '‚úÖ'

            setTimeout(() => {
                copyButton.innerText = copyButtonLabel
            }, 2000)
        }

        for (let codeBlock of codeBlocks) {
            const wrapper = document.createElement('div')
            wrapper.style.position = 'relative'

            const copyButton = document.createElement('button')
            copyButton.innerText = copyButtonLabel
            copyButton.classList = 'copy-code'

            codeBlock.setAttribute('tabindex', '0')
            codeBlock.appendChild(copyButton)

            codeBlock.parentNode.insertBefore(wrapper, codeBlock)
            wrapper.appendChild(codeBlock)

            copyButton?.addEventListener('click', async () => {
                await copyCode(codeBlock, copyButton)
            })
        }
    }

    document.addEventListener('DOMContentLoaded', () => init())
    document.addEventListener('astro:after-swap', () => init())
</script>
