{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "HR Model - Merged Schema",
  "description": "Merged JSON schema containing all HR model schemas with internal references",
  "version": "4.3.0",
  "type": "object",
  "definitions": {
    "ScreeningType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "ScreeningType",
      "description": "Represents the Screening Specification.",
      "type": "object",
      "properties": {
        "catalogALaCarte": {
          "$ref": "#/definitions/CatalogALaCarteType"
        },
        "catalogPackage": {
          "$ref": "#/definitions/CatalogPackageType"
        },
        "order": {
          "$ref": "#/definitions/OrderType"
        },
        "statusNotification": {
          "$ref": "#/definitions/StatusNotificationType"
        },
        "subject": {
          "$ref": "#/definitions/SubjectType"
        },
        "report": {
          "$ref": "#/definitions/ScreeningReportType"
        }
      }
    },
    "PositionType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "PositionType",
      "description": "A position which may be associated with a screening order.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "jurisdiction": {
          "description": "The jurisdiction of the position.",
          "$ref": "#/definitions/JurisdictionType"
        }
      }
    },
    "ScreeningReportType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "ScreeningReportType",
      "description": "A Screening report.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "definitions": {
        "ServiceReportType": {
          "title": "ServiceReportType",
          "description": "The type of service or search type requested in the overall order.",
          "type": "object",
          "properties": {
            "serviceId": {
              "description": "Typically used for a reference ID provided by the Consumer Reporting Agency (CRA) specific to the service itself.",
              "$ref": "#/definitions/IdentifierType"
            },
            "serviceOrderDate": {
              "description": "Order date and time when service was requested.",
              "$ref": "#/definitions/DateTimeType"
            },
            "serviceCompletedDate": {
              "description": "Completed date and time when service was completed.",
              "$ref": "#/definitions/DateTimeType"
            },
            "serviceCode": {
              "description": "Code used for service type.  Specific to each Consumer Reporting Agency (CRA).",
              "$ref": "#/definitions/CodeType"
            },
            "serviceName": {
              "description": "Service Name used for service type.  Specific to each Consumer Reporting Agency (CRA).",
              "type": "string"
            },
            "statusMessage": {
              "description": "Overall status of service.  Typically would be reflective of a value like Pending, Complete, etc. Specific to each Consumer Reporting Agency (CRA).",
              "type": "string"
            },
            "flaggedIndicator": {
              "description": "Typically a true or false value indicating whether or not the service is flagged.  For example, a value of 'true' may indicate flagged information was found. Specific to each Consumer Reporting Agency (CRA).",
              "$ref": "#/definitions/IndicatorType"
            },
            "result": {
              "description": "Overall result of service.  Typically would be reflective of a value like Record Found, No Record Found, etc. Specific to each Consumer Reporting Agency (CRA).",
              "type": "string"
            },
            "comments": {
              "description": "Any additional comments or ETAs tied to service. Specific to each Consumer Reporting Agency (CRA).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentType"
              }
            },
            "attachmentPointers": {
              "description": "This points to the an attachment in attachments array.",
              "type": "array",
              "items": {
                "description": "Indicates JSON Pointer value such as /foo/bar. Although this is a string, HR Open requires a json-pointer format. Do not use JSON Pointer URI fragments such as #/foo/bar",
                "type": "string"
              }
            }
          },
          "required": [
            "serviceId"
          ]
        }
      },
      "properties": {
        "packageCode": {
          "description": "The code corresponding to a screening package.",
          "$ref": "#/definitions/CodeType"
        },
        "orderId": {
          "description": "Typically used for a reference ID provided by the Consumer Reporting Agency (CRA) specific to the order itself. Can often be used as a lookup value in the CRA's client portal.",
          "$ref": "#/definitions/IdentifierType"
        },
        "subjectId": {
          "description": "Reference ID tied to the subject (consumer) being screened.",
          "$ref": "#/definitions/IdentifierType"
        },
        "orderedDate": {
          "description": "Date and time when order was successfully submitted.",
          "$ref": "#/definitions/DateTimeType"
        },
        "completedDate": {
          "description": "Completed date and time when overall order was completed.",
          "$ref": "#/definitions/DateTimeType"
        },
        "overallEvaluation": {
          "description": "Reflects overall evaluation of order for organizations using a CRA for scoring purposes.  Often reflects values like Pass, Needs Review, etc.",
          "type": "string"
        },
        "screeningResults": {
          "description": "A collection of separate service results. For example, Education Verification, Employment Verification, MVR, Criminal Checks, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceReportType"
          }
        },
        "statusMessage": {
          "description": "Overall status of order.  Typically would be reflective of a value like Pending, Complete, etc. Specific to each Consumer Reporting Agency (CRA).",
          "type": "string"
        },
        "attachments": {
          "description": "This points to the attachments array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      }
    },
    "OrderType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "OrderType",
      "description": "A Screening order.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        },
        {
          "$ref": "#/definitions/PartyInclusion"
        }
      ],
      "definitions": {
        "ALaCarteScreenType": {
          "title": "ALaCarteScreenType",
          "description": "An aLaCarte screen.",
          "type": "object",
          "properties": {
            "screeningCode": {
              "description": "The code corresponding to a screening type (e.g. MVR, Criminal, Civil, Credit, DrugTesting, Fingerprinting, Education, Employment).",
              "$ref": "#/definitions/CodeType"
            },
            "screeningInstructions": {
              "description": "The instructions of what should be done in the screening request.",
              "$ref": "#/definitions/TextType"
            }
          },
          "required": [
            "screeningCode"
          ]
        }
      },
      "properties": {
        "subjectId": {
          "description": "Reference to the subject required for the package.",
          "type": "object",
          "items": {
            "$ref": "#/definitions/EntityType"
          }
        },
        "packageCode": {
          "description": "The code corresponding to a screening package.",
          "$ref": "#/definitions/CodeType"
        },
        "aLaCarteItems": {
          "description": "Individual screens that are part of this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ALaCarteScreenType"
          }
        },
        "purpose": {
          "description": "The reason why this report is requested (e.g. Court Order/Subpoena, Employment, Insurance Underwriting).",
          "type": "string"
        },
        "referenceObject": {
          "description": "Reference to the data required for the package.",
          "$ref": "#/definitions/ReferenceObjectTypeArray"
        }
      }
    },
    "ScreeningVendorReportType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.2.0",
      "title": "ScreeningVendorReportType",
      "description": "A Screening vendor report.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "definitions": {
        "FeeType": {
          "title": "FeeType",
          "description": "Fee to be applied.",
          "type": "object",
          "properties": {
            "feeType": {
              "$ref": "#/definitions/CodeType"
            },
            "feeAmount": {
              "description": "The fee",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "DocketType": {
          "title": "DocketType",
          "description": "Includes properties common to court dockets",
          "type": "object",
          "properties": {
            "courtName": {
              "description": "The name of the court",
              "type": "string"
            },
            "courtDocketNumber": {
              "description": "The unique identifier supplied by the court.  Sometimes referred to as case number.",
              "type": "string"
            },
            "comments": {
              "description": "Provides additional details",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentType"
              }
            },
            "person": {
              "description": "The person associated with the Docket",
              "$ref": "#/definitions/SubjectType"
            }
          }
        },
        "CriminalDocketType": {
          "title": "CriminalDocketType",
          "description": "Includes properties common to criminal court dockets",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/DocketType"
            }
          ],
          "properties": {
            "charges": {
              "description": "The charges associated with the Docket",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CriminalChargeType"
              }
            }
          }
        },
        "CriminalChargeType": {
          "title": "CriminalChargeType",
          "description": "Criminal charge details",
          "type": "object",
          "properties": {
            "amendedCharge": {
              "description": "A charge amended from the original offense",
              "type": "string"
            },
            "amendedOffenseClass": {
              "description": "An offense class amended from the original offense class",
              "type": "string"
            },
            "amendedOffenseType": {
              "description": "An offense type amended from the original offense type",
              "type": "string"
            },
            "amendedStatus": {
              "description": "The status of the amended offense",
              "type": "string"
            },
            "appealed": {
              "description": "Whether or not the offense has been appealed",
              "type": "string"
            },
            "appealedOn": {
              "description": "The date the offense was appealed",
              "$ref": "#/definitions/DateType"
            },
            "arrestedOn": {
              "description": "The date the subject was arrested",
              "$ref": "#/definitions/DateType"
            },
            "arrestingAgency": {
              "description": "The agency or organization involved in the arrest",
              "type": "string"
            },
            "caseStatus": {
              "description": "The current and overall status of the case",
              "type": "string"
            },
            "caseStatusDate": {
              "description": "The date that the case status was last updated",
              "$ref": "#/definitions/DateType"
            },
            "charge": {
              "description": "With what crime was the subject charged",
              "type": "string"
            },
            "convictedCharge": {
              "description": "The final charge with which the subject was convicted",
              "type": "string"
            },
            "chargedOn": {
              "description": "The date when the subject was charged",
              "$ref": "#/definitions/DateType"
            },
            "chargeStatus": {
              "description": "The current and individual status of this specific charge",
              "type": "string"
            },
            "comments": {
              "description": "Provides additional details",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentType"
              }
            },
            "wasConvicted": {
              "description": "Whether or not the subject was convicted of this charge",
              "type": "boolean"
            },
            "countNum": {
              "description": "The number identifying which charge in docket",
              "type": "string"
            },
            "courtRoom": {
              "description": "The name or number of the court room",
              "type": "string"
            },
            "disposition": {
              "description": "The final settlement of the matter with reference to the decision announced by the court",
              "type": "string"
            },
            "dispositionDate": {
              "description": "The date the disposition was made",
              "$ref": "#/definitions/DateType"
            },
            "event": {
              "description": "A description of the proceedings reflected in the docket",
              "type": "string"
            },
            "filedOn": {
              "description": "The date on which the charge was filed",
              "$ref": "#/definitions/DateType"
            },
            "financialSummary": {
              "description": "Any financial settlement that came out of the docket",
              "type": "string"
            },
            "hearingResult": {
              "description": "The outcome of the hearing",
              "type": "string"
            },
            "hearingDate": {
              "description": "The date on which the hearing occurred",
              "$ref": "#/definitions/DateType"
            },
            "hearingType": {
              "description": "The type of hearing (e.g. pretrial, jury selection, etc.)",
              "type": "string"
            },
            "minuteEntries": {
              "description": "Additional comments from the docket",
              "type": "string"
            },
            "offenseClass": {
              "description": "The class of the offense (e.g. felony, misdemeanor, etc.)",
              "type": "string"
            },
            "offenseType": {
              "description": "The type of wrongdoing or violation of administrative matters, etc.",
              "type": "string"
            },
            "plea": {
              "description": "The formal reply to a charge in a criminal court or in an equity case telling why a suit should be barred, delayed, or dismissed",
              "type": "string"
            },
            "proceedings": {
              "description": "Details of proceedings (e.g. arraignment, jury trial, sentencing trial)",
              "type": "string"
            },
            "sentence": {
              "description": "The punishment given to a person convicted of a crime",
              "type": "string"
            },
            "sentencedOn": {
              "description": "The date that the sentence is given",
              "$ref": "#/definitions/DateType"
            },
            "sentenceStatus": {
              "description": "The current status of the sentence (e.g. released on parole, successfully completed sentence)",
              "type": "string"
            },
            "chargeCode": {
              "description": "A charge code under which the subject was charged (e.g. 18-2). This helps research further the nature of the crime.",
              "$ref": "#/definitions/CodeType"
            }
          }
        },
        "CivilDocketType": {
          "title": "CivilDocketType",
          "description": "Includes properties common to civil court dockets",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/DocketType"
            }
          ],
          "properties": {
            "details": {
              "description": "Litigation details associated with the Docket",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CivilLitigationDetailType"
              }
            }
          }
        },
        "CivilLitigationDetailType": {
          "title": "CivilLitigationDetailType",
          "description": "Civil litigation details",
          "type": "object",
          "properties": {
            "filedOn": {
              "description": "The date on which the litigation was filed",
              "$ref": "#/definitions/DateType"
            },
            "plaintiff": {
              "description": "The person who filed the litigation",
              "type": "string"
            },
            "defendant": {
              "description": "The party accused of a civil wrong",
              "type": "string"
            },
            "caseDescription": {
              "description": "The cause for the civil litigation",
              "type": "string"
            },
            "dispositionDate": {
              "description": "The date of the court's finding",
              "$ref": "#/definitions/DateType"
            },
            "disposition": {
              "description": "The finding of the court",
              "type": "string"
            },
            "sentence": {
              "description": "The decision or the outcome of the case when additional guidelines need to be met (e.g. restitution owed, lawyer fees owed, etc.)",
              "type": "string"
            }
          }
        },
        "BankruptcyDocketType": {
          "title": "BankruptcyDocketType",
          "description": "Includes properties common to bankruptcy dockets",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/DocketType"
            }
          ],
          "properties": {
            "filedOn": {
              "description": "The date on which the bankruptcy was filed",
              "$ref": "#/definitions/DateType"
            },
            "natureOfDebt": {
              "description": "Examples may include Business, Notice of Proposed Abandonment, Voluntary Petition, Non-business Consumer, Unpaid Real Estate Tax, Consumer, Commercial",
              "type": "string"
            },
            "caseDescription": {
              "description": "Description of the case as found in the court record",
              "type": "string"
            },
            "commencement": {
              "description": "The type of the bankruptcy (e.g. Chapter 13, Chapter 7)",
              "type": "string"
            },
            "dispositionDate": {
              "description": "The date of the court's decision",
              "$ref": "#/definitions/DateType"
            },
            "disposition": {
              "description": "The decision of the court",
              "type": "string"
            },
            "sentence": {
              "description": "The decision or the outcome of the case when additional guidelines need to be met (e.g. repayment plan, liquidation, adjustment of debts, etc.)",
              "type": "string"
            }
          }
        }
      },
      "properties": {
        "orderId": {
          "description": "Typically used for a reference ID provided by the Consumer Reporting Agency (CRA) specific to the order itself. Can often be used as a lookup value in the CRA's client portal.",
          "$ref": "#/definitions/IdentifierType"
        },
        "serviceCode": {
          "description": "The code corresponding to a screening type (e.g. MVR, Criminal, Civil, Credit, Fingerprinting, Education, Employment).",
          "$ref": "#/definitions/CodeType"
        },
        "result": {
          "description": "Overall result of service. Typically would be reflective of a value like Report, Clear, Canceled, NotPursued etc. Specific to each Consumer Reporting Agency (CRA).",
          "$ref": "#/definitions/CodeType"
        },
        "comments": {
          "description": "Provides additional details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        },
        "fees": {
          "description": "Contains Fees to be applied",
          "type": "array",
          "items": {
            "type": "#/definitions/FeeType"
          }
        },
        "details": {
          "description": "Contains service results. e.g. an array of CriminalDocketType objects.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "attachments": {
          "description": "This points to the attachments array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      }
    },
    "ScreeningVendorMessageType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "ScreeningVendorMessageType",
      "description": "Represents a message.",
      "type": "object",
      "definitions": {
        "FieldType": {
          "title": "FieldType",
          "description": "A field.",
          "type": "object",
          "properties": {
            "path": {
              "description": "Indicates JSON Pointer value such as /foo/bar. Although this is a string, HR Open requires a json-pointer format. Do not use JSON Pointer URI fragments such as #/foo/bar",
              "type": "string",
              "format": "json-pointer"
            },
            "description": {
              "description": "The message text.",
              "$ref": "#/definitions/TextType"
            },
            "value": {
              "description": "Indicates the value the field should have.",
              "type": [
                "null",
                "boolean",
                "object",
                "array",
                "number",
                "string"
              ]
            }
          }
        }
      },
      "properties": {
        "orderId": {
          "description": "Provides the Identifier of the ScreeningVendorOrder to which this message pertains. Uniquely identifies a ScreeningVendorOrder within an organization.",
          "$ref": "#/definitions/IdentifierType"
        },
        "message": {
          "description": "The message text.",
          "$ref": "#/definitions/TextType"
        },
        "fields": {
          "description": "A list of fields that need attention.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldType"
          }
        },
        "attachments": {
          "description": "List of documents associated with this message",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      }
    },
    "CatalogPackageType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "CatalogPackageType",
      "description": "A list of available screening packages.",
      "type": "object",
      "definitions": {
        "PackageType": {
          "title": "PackageType",
          "description": "A screening package.",
          "type": "object",
          "properties": {
            "packageCode": {
              "description": "The code corresponding to a screening package.",
              "$ref": "#/definitions/CodeType"
            },
            "packageDescription": {
              "description": "The description of what the screening package.",
              "$ref": "#/definitions/TextType"
            }
          },
          "required": [
            "packageCode"
          ]
        }
      },
      "properties": {
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageType"
          }
        }
      }
    },
    "SubjectType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "SubjectType",
      "description": "Represents a subject (person or organization).",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "oneOf": [
        {
          "type": "object",
          "title": "personObject",
          "properties": {
            "person": {
              "$ref": "#/definitions/ScreeningPersonType"
            }
          },
          "required": [
            "person"
          ]
        },
        {
          "type": "object",
          "title": "organizationObject",
          "properties": {
            "organization": {
              "$ref": "#/definitions/OrganizationType"
            }
          },
          "required": [
            "organization"
          ]
        }
      ],
      "definitions": {
        "SubjectDisclosureType": {
          "title": "SubjectDisclosureType",
          "description": "A Subject's disclosure.",
          "type": "object",
          "properties": {
            "details": {
              "description": "Information about the Disclosure.",
              "$ref": "#/definitions/TextType"
            },
            "jurisdiction": {
              "description": "The jurisdiction to be searched.",
              "$ref": "../../common/json/Communication/JurisdictionType.json#"
            },
            "courtCaseNumber": {
              "description": "The Court Case Number.",
              "type": "string"
            },
            "status": {
              "description": "The result or status.",
              "$ref": "#/definitions/TextType"
            },
            "type": {
              "description": "Disclosure Types (e.g. Felony, Misdemeanor, Forclosure, Civil Investigation).",
              "$ref": "#/definitions/TextType"
            },
            "agency": {
              "description": "The entity that handled the Disclosure.",
              "$ref": "#/definitions/TextType"
            }
          }
        },
        "ScreeningPersonType": {
          "type": "object",
          "properties": {
            "names": {
              "description": "List of names associated with this person.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/PersonNameType"
                  },
                  {
                    "$ref": "#/definitions/EffectiveTimePeriodType"
                  }
                ]
              }
            },
            "addresses": {
              "description": "List of addresses associated with this subject.",
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/AddressType"
                  },
                  {
                    "$ref": "#/definitions/EffectiveTimePeriodType"
                  }
                ]
              }
            },
            "profile": {
              "description": "Details about this person, such-as work history",
              "$ref": "#/definitions/PersonProfileInclusion"
            },
            "traits": {
              "description": "Traits about this person: SSN, DOB",
              "$ref": "#/definitions/PersonBaseType"
            },
            "legal": {
              "description": "Legal properties about this person: mother's surname",
              "$ref": "#/definitions/PersonLegalInclusion"
            },
            "attachments": {
              "description": "List of documents associated with this person",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttachmentType"
              }
            },
            "disclosures": {
              "description": "The data that represents a Disclosure is typically provided by the Applicant and is often sparse.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubjectDisclosureType"
              }
            }
          }
        }
      }
    },
    "StatusNotificationType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "StatusNotificationType",
      "description": "A Screening order notification.",
      "type": "object",
      "properties": {
        "orderId": {
          "description": "Typically used for a reference ID provided by the Consumer Reporting Agency (CRA) specific to the order itself. Can often be used as a lookup value in the CRA's client portal.",
          "$ref": "#/definitions/IdentifierType"
        },
        "statusMessage": {
          "description": "Overall status of order.  Typically would be reflective of a value like Pending, Complete, etc. Specific to each Consumer Reporting Agency (CRA).",
          "type": "string"
        },
        "reportLink": {
          "description": "A link to the background screening report.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ReferenceObjectTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "ReferenceObjectTypeArray",
      "description": "Array of referenceObjects, such as a billing code, job code, division, etc. Values that are assigned and meaningful to an ATS. This should not include Id of the order, which would be handled in NounType Id",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "referenceObjectName": {
            "type": "string"
          },
          "referenceObjectValue": {
            "type": "string"
          }
        }
      }
    },
    "CatalogALaCarteType": {
      "$schema": "http://json-schema.org/draft-04/schema",
      "version": "4.3.0",
      "title": "CatalogALaCarteType",
      "description": "A list of all available ALaCarte items.",
      "type": "object",
      "definitions": {
        "ALaCarteItemType": {
          "title": "ALaCarteItemType",
          "description": "An aLaCarte screen.",
          "type": "object",
          "properties": {
            "screeningCode": {
              "description": "The code corresponding to a screening type (e.g. MVR, Criminal, Civil, Credit, DrugTesting, Fingerprinting, Education, Employment).",
              "$ref": "#/definitions/CodeType"
            },
            "category": {
              "description": "The category that this screening type falls in.",
              "$ref": "#/definitions/TextType"
            },
            "screeningDescription": {
              "description": "The description screening type.",
              "$ref": "#/definitions/TextType"
            }
          },
          "required": [
            "screeningCode"
          ]
        }
      },
      "properties": {
        "screenings": {
          "description": "An array of aLaCarte Screens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ALaCarteItemType"
          }
        }
      }
    },
    "ScreeningVendorOrderType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScreeningVendorOrderType",
      "description": "A Screening vendor order.",
      "type": "object",
      "definitions": {
        "CourtSearchOptionsType": {
          "title": "CourtSearchOptionsType",
          "description": "A set of court specific search options.",
          "type": "object",
          "properties": {
            "jurisdiction": {
              "description": "The jurisdiction to be searched.",
              "$ref": "../../common/json/Communication/JurisdictionType.json#"
            },
            "numberYearsSearched": {
              "description": "How many years to search.",
              "type": "integer",
              "minimum": 1
            },
            "yearSearchEnds": {
              "description": "Ordinarily not supplied. Used to perform a search on a specific set of years in the past. E.g. a 1996-2000 search, numberOfYearsSearched=5 and yearSearchEnds=2000",
              "type": "integer"
            },
            "isCopyRequiredIndicator": {
              "description": "Indicates if court copies need to be obtained.",
              "$ref": "#/definitions/IndicatorType"
            }
          },
          "required": [
            "jurisdiction"
          ]
        },
        "ScreeningVendorOrderSubjectType": {
          "title": "ScreeningVendorOrderSubjectType",
          "description": "A set of subject specific properties.",
          "type": "object",
          "properties": {
            "subject": {
              "description": "The subject to be researched.",
              "$ref": "#/definitions/SubjectType"
            },
            "purpose": {
              "description": "The reason why this subject is supplied (e.g. to search, for adjudication, etc.).",
              "$ref": "#/definitions/TextType"
            }
          },
          "required": [
            "subject"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "serviceCode": {
          "description": "The code corresponding to a screening type (e.g. MVR, Criminal, Civil, Credit, Fingerprinting, Education, Employment).",
          "$ref": "#/definitions/CodeType"
        },
        "subjects": {
          "description": "The subjects of the requested service. Supply multiple subjects if the subject may match on multiple descriptions (e.g. they may be found under different Date of Birth values).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScreeningVendorOrderSubjectType"
          },
          "minItems": 1
        },
        "purpose": {
          "description": "The reason why this report is requested (e.g. Court Order/Subpoena, Employment, Insurance Underwriting).",
          "$ref": "#/definitions/TextType"
        },
        "referenceObjects": {
          "description": "Reference to the data required for the package.",
          "$ref": "#/definitions/ReferenceObjectTypeArray"
        },
        "instructions": {
          "description": "Instructions for what information should be sent for a Lead.",
          "$ref": "#/definitions/TextType"
        },
        "courtSearchOptions": {
          "description": "Court search options.",
          "$ref": "#/definitions/CourtSearchOptionsType"
        },
        "workLocations": {
          "description": "Work location used for reporting guidelines.",
          "type": "array",
          "items": {
            "$ref": "../../common/json/Communication/JurisdictionType.json#"
          }
        }
      },
      "required": [
        "subjects",
        "serviceCode"
      ]
    },
    "RecruitingType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "RecruitingType",
      "description": "Represents the Recruiting Specification.",
      "type": "object",
      "properties": {
        "candidate": {
          "$ref": "#/definitions/CandidateType"
        },
        "positionOpening": {
          "$ref": "#/definitions/PositionOpeningType"
        },
        "jobPosting": {
          "$ref": "#/definitions/JobPostingType"
        },
        "ler-rs": {
          "$ref": "#/definitions/LER_RSType"
        }
      }
    },
    "PositionProfileType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4.0",
      "title": "PositionProfileType",
      "description": "A profile of a job or position opening that is available at an organization.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BasePositionProfileType"
        },
        {
          "$ref": "#/definitions/LocalizationInclusion"
        }
      ],
      "properties": {
        "profileName": {
          "description": "The name given to the profile. Often used in systems where multiple versions of a PositionProfile may be managed.",
          "type": "string"
        },
        "positionPeriod": {
          "description": "The start and end date for the position.",
          "type": "object",
          "properties": {
            "start": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "end": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "immediateStartIndicator": {
          "description": "An indicator as to whether a position is available for an immediate start.",
          "$ref": "#/definitions/IndicatorType"
        },
        "positionScheduleTypeCodes": {
          "description": "Describes a position's general schedule (e.g. full-time, part-time).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionScheduleTypeCodeList"
          }
        },
        "workingPeriods": {
          "description": "Describes the working periods of the position.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkingPeriodType"
          }
        },
        "shiftSchedules": {
          "description": "The detailed specifications of shift schedules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleType"
          }
        },
        "shiftDescription": {
          "description": "General description of any shift work or shift schedule.",
          "type": "string"
        },
        "remoteWork": {
          "description": "The preference or requirement for remote work.",
          "$ref": "#/definitions/RemoteWorkType"
        },
        "offeredRemunerationPackage": {
          "description": "The salary or compensation, as well as benefits on offer for the position.",
          "$ref": "#/definitions/RemunerationPackageType"
        },
        "positionClassification": {
          "description": "The classification of the position (which may apply to specific countries).",
          "$ref": "#/definitions/PositionClassificationType"
        },
        "relocation": {
          "description": "Indicates if a hiring company would consider to support the relocation of a new employee for a position.",
          "$ref": "#/definitions/RelocationType"
        },
        "attachments": {
          "description": "Attachments related to the position profile.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      },
      "definitions": {
        "BasePositionProfileType": {
          "title": "BasePositionProfileType",
          "description": "The core information about a job or position opening.",
          "type": "object",
          "properties": {
            "profileId": {
              "description": "The primary identifier of the position profile, typically from the system of record.",
              "$ref": "#/definitions/IdentifierType"
            },
            "alternateIds": {
              "description": "An array of other identifiers for the position profile, typically for related, secondary, or other systems.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "positionId": {
              "description": "The identifier for the position that maybe be used externally in an advertisement.",
              "$ref": "#/definitions/IdentifierType"
            },
            "positionTitle": {
              "description": "A short phrase describing the position as it would be listed on a business card or in a company directory. OED: An appellation attaching to a position in virtue of rank, function or office.",
              "type": "string"
            },
            "positionUri": {
              "description": "URI to detailed resources about the position. This can be used as another type of identifier.",
              "type": "string",
              "format": "uri"
            },
            "postingInstructions": {
              "description": "Instructions related to the position being posted to a third party site.",
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/PostingInstructionType"
                  }
                ]
              }
            },
            "positionLocation": {
              "description": "The location or locations of a position.",
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/LocationType"
                  }
                ],
                "properties": {
                  "name": {
                    "description": "The name of a location.",
                    "type": "string"
                  },
                  "referenceLocation": {
                    "description": "This is a summary description of the physical location of the position. This is intended to be matched against a candidate's preference for work location.",
                    "type": "string"
                  }
                }
              }
            },
            "positionOrganizations": {
              "description": "The organization which has the position. Can contain multiple organizations, e.g. with different responsibility codes.",
              "type": "array",
              "items": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/OrganizationType"
                  }
                ]
              }
            },
            "positionOpenQuantity": {
              "description": "The position quantity currently available to be filled. This is intended as a finer-grained expression of the total number of positions to be filled. For example, there may be 50 positions to fill, but only 10 immediately available to be filled.",
              "type": "integer"
            },
            "jobCategories": {
              "description": "A code classifying the type or category of job. This may be used for occupational classification of the job. JobCategory usually would be repeatable so that a single job could be classified across multiple dimensions. JobCategory could be used to classify the job in terms of industry, but note that an explicit IndustryCode is available in the organization which might be a more appropriate place for use.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityType"
              }
            },
            "careerLevels": {
              "description": "A code classifying the level of a candidate based on career experience. This may vary by jurisdiction or systems, e.g. Student, Entry Level, Recent Graduate, Mid-Career, Manager, Experienced Non-Manager, Senior Executive, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityType"
              }
            },
            "positionOfferingTypes": {
              "description": "These are values that are descriptive in classifying a position within advertising or communications of a position opportunity or \"offering\". Note that these classifications are useful within advertising, but they are not precise classes useful internally to drive pay, benefits, and HR compliance. Enumerated values are: DirectHire, Temporary, TemporaryToHire, ContractToHire, Contract, Internship, Externship, Apprenticeship, Seasonal, Student and Volunteer. Consider that \"Temporary\" and \"DirectHire\" are not parallel concepts, but are still commonly used in classifying jobs within advertising.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PositionTypeCodeList"
              }
            },
            "positionQualifications": {
              "description": "The qualifications that are required for a position.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PositionQualificationType"
              }
            },
            "positionFormattedDescriptions": {
              "description": "The descriptions for the position profile. The descriptions may support HTML or other markup, and may be in logical sections.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "descriptionId": {
                    "description": "An identifier for the description (section).",
                    "$ref": "#/definitions/IdentifierType"
                  },
                  "title": {
                    "description": "The title for the description (section).",
                    "type": "string"
                  },
                  "content": {
                    "description": "The content of the description (section).",
                    "type": "string"
                  }
                }
              }
            },
            "travel": {
              "description": "Information regarding travel preferences.",
              "$ref": "#/definitions/TravelType"
            },
            "workingLanguages": {
              "description": "Information on the work languages used for the job or position opening.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "code": {
                    "$ref": "#/definitions/LanguageCodeList"
                  }
                }
              }
            }
          }
        },
        "PostingInstructionType": {
          "title": "PostingInstructionType",
          "description": "A collection of information about where and how a posting should be communicated. A posting channel usually would be a job board or other advertising medium.",
          "type": "object",
          "properties": {
            "channelId": {
              "description": "Identifies a job board or media channel associated with a job posting.",
              "$ref": "#/definitions/IdentifierType"
            },
            "start": {
              "description": "The start date of the posting.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "end": {
              "description": "The end date of the posting.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "templateId": {
              "description": "Identifies a template to apply in processing a job posting order.",
              "type": "string"
            },
            "brandingId": {
              "description": "Identifies branding to be applied in processing a job posting order.",
              "type": "string"
            },
            "postingOptionCodes": {
              "description": "Used to communicate a choice among options available with respect to the posting. For example, some job boards and advertising venues may offer \"bolding\" or other options relating to the display or distribution of the posting.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            },
            "applicationMethods": {
              "type": "array",
              "items": {
                "description": "Describes the way in which a candidate might apply for the position.",
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/definitions/ApplicationMethodType"
                  }
                ]
              }
            },
            "positionUri": {
              "description": "URI to detailed resources about the position or job advertisement for this posting instruction. The URI may contain publication specific information which may vary by channel.",
              "type": "string",
              "format": "uri"
            }
          }
        },
        "ApplicationMethodType": {
          "title": "ApplicationMethodType",
          "description": "Instructions on how to apply for the position.",
          "type": "object",
          "properties": {
            "instructions": {
              "description": "Instructions to help guide a candidate when they are applying for the position opening.",
              "type": "string"
            },
            "personContact": {
              "description": "The person to contact regarding this position.",
              "$ref": "#/definitions/SpecifiedPersonType"
            },
            "applicationUri": {
              "description": "Application link used to apply for the position. This would typically be a URI to a career site job, to an application web form, or an upload page.",
              "$ref": "#/definitions/WebType"
            },
            "applicationEmail": {
              "description": "Email address to which the candidate can apply to the job or position opening.",
              "$ref": "#/definitions/EmailType"
            },
            "applicationSms": {
              "description": "Phone number to apply for the job or position opening by SMS message.",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/PhoneType"
                }
              ],
              "properties": {
                "containedText": {
                  "description": "Text that must be used by the candidate in the SMS message to indicate the intent to apply for a specific position.",
                  "type": "string"
                }
              }
            },
            "applicationPhone": {
              "description": "Information to apply by a phone based service or direct phone number.",
              "$ref": "#/definitions/PhoneType"
            },
            "inPersonApplication": {
              "type": "object",
              "properties": {
                "address": {
                  "description": "The address of where to go to apply for the job or position opening in person.",
                  "$ref": "#/definitions/AddressType"
                },
                "travelDirections": {
                  "description": "Instructions for traveling to the location for an in person application.",
                  "type": "string"
                },
                "mapLink": {
                  "description": "A URI to a map or detailed instructions to do an in person application.",
                  "type": "string",
                  "format": "uri"
                },
                "additionalInstructions": {
                  "description": "Additional instructions on how to apply for the job or position opening in person.",
                  "type": "string"
                }
              }
            },
            "applicationCloseDate": {
              "type": "object",
              "properties": {
                "end": {
                  "description": "The date after which applications will not be accepted.",
                  "$ref": "#/definitions/FormattedDateTimeType"
                },
                "typeCode": {
                  "description": "The type of application close date, such as an Internal Close Date or External Close Date.",
                  "$ref": "#/definitions/CodeType"
                }
              }
            }
          }
        },
        "PositionQualificationType": {
          "type": "object",
          "properties": {
            "qualificationSummary": {
              "description": "A summary of the qualifications needed for the position.",
              "type": "string"
            },
            "positionCompetencies": {
              "description": "A list of the competencies required or desired for the position. Used for competency-based recruiting systems for matching.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PositionCompetencyType"
              }
            },
            "educationRequirement": {
              "description": "The educational requirements for the position.",
              "$ref": "#/definitions/EducationRequirementType"
            },
            "experienceSummary": {
              "description": "The detailed summary of the experience required for the position in terms of category, measure, and level.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperienceCategoryType"
              }
            },
            "licences": {
              "description": "The required licenses for the position.",
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "EducationRequirementType": {
          "type": "object",
          "properties": {
            "educationLevelCode": {
              "description": "The level of education required for the position. This is used to transmit a system-specific or local variable. Use iscedEducationLevelCode where possible.",
              "type": "string"
            },
            "iscedEducationLevelCode": {
              "description": "ISCED: International Standard Classification of Education - is the standard classification of the education level of this requirement.",
              "$ref": "#/definitions/IscedCodeList"
            },
            "degreeTypeCode": {
              "description": "The type of degree required for the position.",
              "type": "string"
            },
            "programs": {
              "description": "The education programs required for a position.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "programConcentrations": {
              "description": "The areas for the focus of study specific areas required for the position.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "institutions": {
              "description": "The requirement or specific institutions to be considered for the position.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "descriptions": {
              "description": "Descriptions of the educational requirements for the position.",
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "ExperienceCategoryType": {
          "type": "object",
          "properties": {
            "categoryCode": {
              "description": "A code to represent the category of required experience.",
              "$ref": "#/definitions/CodeType"
            },
            "measure": {
              "description": "A measure of the experience required for the position.",
              "$ref": "#/definitions/MeasureType"
            },
            "levelCode": {
              "description": "The level required for the category of required experience.",
              "type": "string"
            },
            "descriptions": {
              "description": "Description of required experience.",
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "PositionClassificationType": {
          "type": "object",
          "properties": {
            "USPositionClassification": {
              "description": "These are USA-specific position classification items.",
              "$ref": "#/definitions/USPositionClassificationType"
            },
            "DEPositionClassification": {
              "description": "These are Germany-specific position classification items.",
              "$ref": "#/definitions/DEPositionClassificationType"
            },
            "extendedPositionClassifications": {
              "description": "These are other country specific position classification items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPositionClassificationType"
              }
            }
          }
        },
        "USPositionClassificationType": {
          "type": "object",
          "properties": {
            "exemptIndicator": {
              "description": "An indicator of position's coverage under applicable wage-hour law. For example, the U.S. Fair Labor Standards Act (FLSA) and implementing regulations. Enumerated values are: exempt and non-exempt. NOTE: In the U.S., while it is common to classify a position as exempt or non-exempt, actual coverage under the law usually is determined on the basis of an employee's actual performance or engagement within a workweek and not on whether an employee is assigned to or associated with a position that an employer has classified as \"exempt\" or \"nonexempt\".",
              "$ref": "#/definitions/IndicatorType"
            },
            "EEOCJobCategoryCodes": {
              "description": "A code classifying the primary method of payment for the associated position or employment. This classifies the method by which remuneration for a position is provided or calculated. Typical values are 'OfficialsAndManagers', 'Professionals', 'Technicians', 'Sales', 'OfficialAndClerical', 'CraftWorkersSkilled', 'OperativeSemi-Skilled', 'LaborersUnskilled', 'ServiceWorkers'.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            },
            "affirmativeActionPlanJobGroupIds": {
              "description": "Identifiers for specific qualifying affirmitive action plan groups.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            }
          }
        },
        "DEPositionClassificationType": {
          "type": "object",
          "properties": {
            "BKZClassification": {
              "description": "Berufskennziffer (BKZ) is a German occupational classification system.",
              "$ref": "#/definitions/EntityType"
            },
            "DEEducationAuthorizationIndicator": {
              "description": "A German education authorization indicator.",
              "$ref": "#/definitions/IndicatorType"
            },
            "disabilityLevelCode": {
              "description": "A value from an external code list classifying the level of disability. A simple example code list: 1 - need for another persons assistance with daily life tasks; 2 - inability to perform one or more sensory or physical functions; 3 - experiencing difficulties in multiple sensory or physical functions; 4 - experiencing difficulty in just one function; and 5 - no limitations in functioning.",
              "$ref": "../../common/json/work/DisabilityType.json#/definitions/DisabilityLevelCodeList"
            }
          }
        },
        "ExtendedPositionClassificationType": {
          "type": "object",
          "properties": {
            "countryCode": {
              "description": "The country to which the specific position classification applies.",
              "$ref": "#/definitions/CountryCodeList"
            },
            "name": {
              "description": "The name of the specific position classification.",
              "type": "string"
            },
            "value": {
              "description": "The value of the specific position classification.",
              "type": "string"
            }
          }
        },
        "WorkingPeriodType": {
          "type": "object",
          "properties": {
            "workDuration": {
              "description": "The amount of time to work, e.g. 40 hours, 4 days.",
              "$ref": "#/definitions/MeasureType"
            },
            "baseDuration": {
              "description": "The related base time interval, e.g. 1 week, 1 month.",
              "$ref": "#/definitions/MeasureType"
            },
            "descriptions": {
              "description": "Descriptions of the working period.",
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        }
      }
    },
    "LER_RSType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "LER-RSType",
      "description": "Learning and Employment Record Resume Standard",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "The instance type to assist implementors of this standard to discover the schema and version of the instance. Recommend using the full URL to the schema and version for LER-RS you are using. Example: http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/LER-RSType.json",
          "enum": [
            "http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/LER-RSType.json"
          ]
        },
        "narratives": {
          "description": "Experiences, Aspirations, Interests (or any free form text elements) of a person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NarrativeType"
          }
        },
        "job": {
          "description": "The related Job to this LER Resume.",
          "$ref": "#/definitions/JobType"
        },
        "certifications": {
          "description": "Documents or confirmations certifying the status or acquirements of the bearer, or his fulfillment of conditions which authorize them to act or practise in a specified way; hence, often equal to a certificate.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ResumeCertificationType"
          }
        },
        "person": {
          "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/ResumePersonBaseType"
        },
        "educationAndLearnings": {
          "description": "Contains details documenting a person's education and learnings, which typically consists of formal higher education (high school or higher).",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/EducationAndLearningsType"
          }
        },
        "employmentHistories": {
          "description": "The prior and current details of a person's employment, work, or relevant experience such as might be reported within a professional profile, CV, resume, employment application, or similar document. Details of a particular tenure of employment or work with an organization.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/EmploymentHistoriesType"
          }
        },
        "licenses": {
          "description": "Authoritative permission to hold a certain status or to do certain things, e.g. to practise some trade or profession. (OED license, n. a. A formal, usually a printed or written permission from a constituted authority to do something. b. The document embodying such a permission.)",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ResumeLicensesType"
          }
        },
        "skills": {
          "description": "Skills are proficiencies and abilities developed through training and experience. Skills are quantifiable and/or measurable. Skills may involve manipulating things, data or people, either verbally, manually or mentally to accomplish an objective. Skills can be developed with practice or appropriate training.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/SkillType"
          }
        },
        "employmentPreferences": {
          "description": "A list of information about a person's preferences in an ideal employer or company.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployerPreferenceType"
          }
        },
        "positionPreferences": {
          "description": "A list of information about a person's preferences in an ideal position or role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionPreferenceType"
          }
        },
        "communication": {
          "description": "Allows capture of information about a variety of communication channels (telephone, email, fax, messaging, address, etc.).",
          "$ref": "#/definitions/CommunicationType"
        },
        "attachments": {
          "description": "Content of an attachments, which can be embedded or an external reference.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      },
      "definitions": {
        "JobType": {
          "description": "The reference to a related job for the Resume. This can be either a JDX Job Description or an HR Open Postion Opening instance.",
          "type": "object",
          "properties": {
            "JDXjobDescription": {
              "description": "The related JDX Job Description.",
              "$ref": "#/definitions/JobDescriptionType"
            },
            "positionOpening": {
              "description": "The related HR Open Position Opening.",
              "$ref": "#/definitions/PositionOpeningType"
            }
          },
          "additionalProperties": false,
          "oneOf": [
            {
              "required": [
                "JDXjobDescription"
              ]
            },
            {
              "required": [
                "positionOpening"
              ]
            }
          ]
        },
        "HROpenEducationAttendanceInternalType": {
          "allOf": [
            {
              "$ref": "#/definitions/EducationAttendanceType"
            },
            {
              "type": "object",
              "required": [
                "institution"
              ]
            }
          ]
        },
        "EducationAndLearningsType": {
          "anyOf": [
            {
              "$ref": "#/definitions/HROpenEducationAttendanceInternalType"
            },
            {
              "$ref": "#/definitions/VerifiableEducationAttendanceType"
            }
          ]
        },
        "HROpenEmploymentHistoryInternalType": {
          "allOf": [
            {
              "$ref": "#/definitions/EmployerHistoryType"
            },
            {
              "type": "object",
              "required": [
                "organization"
              ]
            }
          ]
        },
        "EmploymentHistoriesType": {
          "anyOf": [
            {
              "$ref": "#/definitions/HROpenEmploymentHistoryInternalType"
            },
            {
              "$ref": "#/definitions/VerifiableEmploymentHistoriesType"
            }
          ]
        },
        "HROpenCertificationInternalType": {
          "allOf": [
            {
              "$ref": "#/definitions/CertificationType"
            },
            {
              "type": "object",
              "required": [
                "issuingAuthority"
              ]
            }
          ]
        },
        "ResumeCertificationType": {
          "anyOf": [
            {
              "$ref": "#/definitions/HROpenCertificationInternalType"
            },
            {
              "$ref": "#/definitions/VerifiableCertificationType"
            }
          ]
        },
        "HROpenLicenseInternalType": {
          "allOf": [
            {
              "$ref": "#/definitions/LicenseType"
            },
            {
              "type": "object",
              "required": [
                "issuingAuthority"
              ]
            }
          ]
        },
        "ResumeLicensesType": {
          "anyOf": [
            {
              "$ref": "#/definitions/HROpenLicenseInternalType"
            },
            {
              "$ref": "#/definitions/VerifiableLicenseType"
            }
          ]
        },
        "HROpenSkillInternalType": {
          "allOf": [
            {
              "$ref": "#/definitions/SkillType"
            },
            {
              "type": "object",
              "required": [
                "name"
              ]
            }
          ]
        },
        "SkillType": {
          "anyOf": [
            {
              "$ref": "#/definitions/HROpenSkillInternalType"
            },
            {
              "$ref": "#/definitions/VerifiableSkillType"
            }
          ]
        }
      }
    },
    "JobPostingType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "JobPostingType",
      "description": "Entity describing an on-line advertisement for filling one or more job openings.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "abilities": {
          "description": "Aptitude, capacity or power to act physically, socially, mentally, legally, or morally at a level suitable to the work context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of ability types such as the O*NET cognitive, sensory, psychomotor and physical abilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "alternativeCredentials": {
          "description": "Description of an alternative credential fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "alternativeEducation": {
          "description": "Description of an alternative education or training fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "alternativeExperiences": {
          "description": "Description of an alternative experience fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "applicantLocationRequirements": {
          "description": "Geographic location(s) in which employees may be located for remote (telecommuting) jobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GeoType"
          }
        },
        "attitudes": {
          "description": "Motivator of performance including values, aspirations, and priorities necessary to successful performance of a task or job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of attitude types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "baseSalaries": {
          "description": "Base salary of the job or of an employee in an employee role including minimum and maximum salary and unit value (e.g., hour, day, week, month, or year).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonetaryAmountType"
          }
        },
        "careerLevels": {
          "description": "A code classifying the level of a candidate based on career experience; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of career level types (e.g., HR Open Standards CareerLevelCodeList.json).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "citizenshipRequirements": {
          "description": "Required country of the applicant's citizenship. Note(s): Use a value selected from a country code list such as the Library of Congress' List of Countries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "competencies": {
          "description": "Observable and measurable knowledge, skills, abilities and personal attributes that contribute to enhanced employee performance of the job; select from an existing enumeration of such types. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "dateCreated": {
          "description": "Date on which the position was created.",
          "$ref": "#/definitions/DateTimeType"
        },
        "dateModified": {
          "description": "Date on which the position was modified.",
          "$ref": "#/definitions/DateTimeType"
        },
        "datePosted": {
          "description": "Date of posting by a channel.",
          "$ref": "#/definitions/DateTimeType"
        },
        "disclaimers": {
          "description": "Statement that denies aspects of a statement made or omitted by the employing entity in the position or posting.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "educationLevels": {
          "description": "Word or phrase identifying the location of the person in terms of his or her progression through an education or training context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of education levels such as HR Open Standards IscedCodeList.json.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "employerOverview": {
          "description": "Description of the employer, career opportunities and work environment.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "employmentUnit": {
          "description": "Department, unit and/or facility where the employee reports and/or in which the job is to be performed.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "equivalentCredentials": {
          "description": "Description of an equivalent credential for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "equivalentEducation": {
          "description": "Description of equivalent education or training for the position or occupation. Note(s): An educational experience without award of a credential should be recorded with a range of QualifyingExperience. An educational experience with award of a credential should be recoded with a range of Credential, not QualifyingExperience.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "equivalentExperiences": {
          "description": "Description of equivalent experience for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "estimatedSalaries": {
          "description": "Description of the estimated salary for a job posting based on a variety of variables including, but not limited to industry, job title, and location.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonetaryAmountDistributionType"
          }
        },
        "experienceCategories": {
          "description": "Category of experience needed for the position or Occupation; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of experience types including, but not limited to, \"Education Experience\", \"Training Experience\", \"Work Experience\", \"Apprenticeship\", and \"Traineeship\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "formattedDescriptions": {
          "description": "HTML-tagged summary of the salient aspects of the job, including job responsibilities, qualifications, skills, working hours, education requirements, and experience requirements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postingInstructions": {
          "description": "Resource providing instructions for posting a job position opening to a job board or media channel and for submission of applications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostingInstructionsType"
          }
        },
        "hiringOrganization": {
          "description": "Organization offering the job position.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "incentiveCompensation": {
          "description": "Description of bonus and commission compensation aspects of the job.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifiers": {
          "description": "The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Note(s): Identifier in JDX has a constrained range of PropertyValue. Best practice is to use name property to textually identify the type of identifier, value property to hold the textual value of the identifier, and the properytID for a URI indicating the type of identifier. NOTE: JDX defines positionID and postingID to handle the employer's identifier for a particular position or posting.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "industries": {
          "description": "Description of the most critical economic or work activities performed (e.g. software development, electronic manufacturing, motor vehicle production, or diagnostic and therapeutic services). Note(s): NOTE: The industry description expected here is a brief narrative of the most critical economic or work activities performed. To identify a formal industry code, such as NAICS in the U.S., use the industryCode property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "industryCodes": {
          "description": "Code from a controlled vocabulary of industry types identifying the primary economic activity of an establishment defined as a single physical location where business is conducted or where services or industrial operations are performed. Note(s): 1.) Use a value selected from a controlled vocabulary of industry types used in the country where the job is located; e.g., NAICS in the U.S. and ESCO in the European Union. 2.) In a JDX job description, there my be multiple levels and locations for an organization identified and each may have different industry codes based on the kinds of work performed at those locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "inLanguage": {
          "description": "The language of the content of the job posting.",
          "$ref": "#/definitions/LocalizationInclusion"
        },
        "jobAgreements": {
          "description": "Type of employment agreement (e.g. \"employee\", \"contract-to-hire\", \"contract\", \"internship\", \"externship\", \"apprenticeship\", \"student\", \"volunteer\", \"under collective bargaining\", \"eligible for overtime\"; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment contract agreements; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "jobBenefits": {
          "description": "Description of benefits associated with the job (e.g., \"employee discount\", \"health insurance\", \"401K plan\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of benefit types; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "jobImmediateStart": {
          "description": "Indicator as to whether a position is available for an immediate start.",
          "type": "boolean"
        },
        "jobLocation": {
          "description": "Typically single geographic location where the work is performed.",
          "$ref": "#/definitions/PlaceType"
        },
        "jobLocationTypes": {
          "description": "A description of the job location (e.g., TELECOMMUTE for telecommute jobs).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "jobSchedules": {
          "description": "Schedule of the employment (e.g. \"full-time\", \"part-time\", \"flex-time\", \"hourly\", \"shared-time\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment schedule types; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "jobStartDate": {
          "description": "Target date when the employment would begin.",
          "$ref": "#/definitions/DateType"
        },
        "jobTerms": {
          "description": "Type of employment term (e.g. \"regular\", \"temporary\", \"seasonal\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment term types; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "knowledge": {
          "description": "Body of facts, principles, theories and practices that is related to a field of work or study; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of knowledge types such as the O*NET knowledge.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "minimumExperiences": {
          "description": "Description of the minimum experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "minimumCredentials": {
          "description": "Description of the minimum credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "minimumEducation": {
          "description": "Description of the minimum education needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "occupationCategories": {
          "description": "Category of the relevant occupation of the job used in the country of employment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of occupation categories such as the Standard Occupational Classification (SOC).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "physicalActivities": {
          "description": "Description of the physical activity expected or required for a position. Note(s): Use a value selected from a controlled vocabulary of physical activity types such as \"bending\", \"standing\", \"sitting\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "physicalRequirements": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "positionID": {
          "description": "Employer's identifier for a particular position.",
          "type": "string"
        },
        "postingID": {
          "description": "Employer's identifier for a particular job posting. Note(s): For the identifier of the position for this posting, use positionID.",
          "type": "string"
        },
        "postingRequestor": {
          "description": "Agent requesting the posting.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "preferredCredentials": {
          "description": "Description of the preferred credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "preferredEducation": {
          "description": "Description of the preferred education or training needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "preferredExperiences": {
          "description": "Description of the preferred experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "qualificationSummary": {
          "description": "Summary description of the ideal candidate's qualifications for a position.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reportingRelationships": {
          "description": "Position(s) to which this position reports and over which this position exercises some degree of authority, control or leadership.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredAssessments": {
          "description": "Resource referenced is an example of a direct, indirect, formative, and summative evaluation or estimation of the nature, ability, or quality of a person's performance or outcome of an action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentProfileType"
          }
        },
        "requiredConditions": {
          "description": "Resource referenced provides the means to make logical assertions that combine resources that in aggregate fulfill education, experience and credential requirements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionType"
          }
        },
        "requiredCredentials": {
          "description": "Description of the required credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "requiredEducation": {
          "description": "Description of the required education or training needed for the position or occupation. Note(s): Specific credential requirements should use requiredCredential.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "requiredExperiences": {
          "description": "Description of the required experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "responsibilities": {
          "description": "Key work tasks or activities over which this position exercises some degree of authority, control or leadership. Note(s): Use a value selected from a controlled vocabulary of responsibilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "riskExposures": {
          "description": "Description of any exposure to risks associated with the job including exposure to extreme noise or temperature, dust/particle matter, radiation, chemicals, airborne communicable diseases and bloodborne pathogens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "securityClearanceRequirements": {
          "description": "Description of any security clearance requirements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sensoryRequirements": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "shiftSchedules": {
          "description": "Type of the typical work shift of the job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of work shift types. Sample may include swing shift, day shift, or weekend shift. ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skills": {
          "description": "Ability to apply knowledge and use know-how to complete tasks and solve problems including types or categories of developed proficiency or dexterity in mental operations and physical processes required to fulfill a work role; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of skill types such as the O*NET skills.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "specialCommitments": {
          "description": "Any special commitments associated with this job posting (e.g. low-income, native American, ex-offenders, military commit) along with any special exclusions (e.g. criminal records).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tasks": {
          "description": "Piece or unit of work to be done or undertaken and accomplished within a defined period of time or by a deadline; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of task types such as O*NET tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "technologies": {
          "description": "Tool, application or other form of technology that requires knowledge, skill and ability to use effectively in executing the tasks and responsibilities of the job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of technology types such as O*NET technology and tools.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "title": {
          "description": "The title of the job.",
          "type": "string"
        },
        "totalJobOpenings": {
          "description": "Total number of positions open at all locations.",
          "type": "number"
        },
        "travelRequirements": {
          "description": "Information about any required travel, systematic or occasional.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validFrom": {
          "description": "The date from which the job posting is valid.",
          "$ref": "#/definitions/DateTimeType"
        },
        "validThrough": {
          "description": "The date after which the item is not valid. For example the end of an offer, salary period, or a period of opening hours.",
          "$ref": "#/definitions/DateTimeType"
        },
        "workActivities": {
          "description": "Purposeful, systematic activity by one or more workers acting on a work objective to reach an intended outcome; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of activity types such as the O*NET work activities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "workLanguages": {
          "description": "Information on the work languages used for the job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizationInclusion"
          }
        },
        "workHours": {
          "description": "Typical working hours for this job; e.g. \"1st shift\", \"night shift\", \"8am-5pm\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PositionOpeningType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionOpeningType",
      "description": "A job or position opening that is at an organization.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "statusCode": {
          "description": "Status of position opening; typical values: Active, Closed, Incomplete.",
          "$ref": "#/definitions/RecruitingDocumentStatusCodeList"
        },
        "approvalStatusCode": {
          "description": "Status of the approval process for a position opening; typical values: InReview, Approved, NotApproved.",
          "$ref": "#/definitions/ApprovalStatusCodeList"
        },
        "approvalMessage": {
          "description": "Detailed information on the approval process, or reason for the approval status.",
          "type": "string"
        },
        "approvalProcessHistory": {
          "description": "Information about the approval process history.",
          "$ref": "#/definitions/ProcessHistoryType"
        },
        "postingRequester": {
          "description": "Information about the party placing or communicating the position posting. The party requesting the posting or advertising service.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PartyType"
            }
          ],
          "properties": {
            "roleCode": {
              "description": "The role of the party or person making the position posting.",
              "$ref": "#/definitions/PostingRequesterRoleCodeList"
            }
          }
        },
        "positionProfiles": {
          "description": "The profile(s) of the position opening. A single position opening could have multiple position profiles for different purposes, including language, branding, or distribution channels or rules.",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/PositionProfileType"
              }
            ]
          }
        }
      }
    },
    "CandidateType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4.0",
      "title": "CandidateType",
      "description": "A person who is requesting consideration or is being considered for a current or future position at a company.",
      "definitions": {
        "CandidatePersonType": {
          "title": "CandidatePersonType",
          "description": "A collection of demographic and personal data about a candidate - a person being considered for, or who has otherwise been associated with, a position opening or resource requirement.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PersonBaseType"
            },
            {
              "$ref": "#/definitions/PersonPhysicalInclusion"
            },
            {
              "$ref": "#/definitions/PersonLegalInclusion"
            }
          ]
        },
        "CandidateProfileType": {
          "title": "CandidateProfileType",
          "description": "Contains structured information about a candidate, including information about their past experiences (Work History, Education History, etc.). This information can be used for evaluation or submission of candidacy for a position opening or resource requirement.",
          "allOf": [
            {
              "$ref": "#/definitions/PersonProfileInclusion"
            }
          ],
          "type": "object",
          "properties": {
            "profileId": {
              "description": "The primary identifier of the candidate profile. This should be the identifier assigned by the owner of the data.",
              "$ref": "#/definitions/IdentifierType"
            },
            "alternateIds": {
              "description": "An array of other identifiers for the candidate profile. These may be identifiers assigned by other trading partners or third party systems.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "personAvailability": {
              "description": "The availability of this profile to be considered for work assignments.",
              "$ref": "#/definitions/PersonAvailabilityType"
            },
            "processingInformation": {
              "description": "Instructions to a third party on how this profile should be processed.",
              "type": "string"
            },
            "distributionGuidelines": {
              "description": "Instructions to a third party on how this profile should be distributed.",
              "$ref": "#/definitions/DistributionGuidelinesType"
            },
            "associatedPositionOpenings": {
              "description": "The positions in which this candidate is associated. This could be due to application or source activities.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssociatedPositionOpeningType"
              }
            },
            "objective": {
              "description": "The objective of the candidate in finding appropriate employment. A brief statement on career and position goals.",
              "type": "string"
            },
            "executiveSummary": {
              "description": "A concise section describing the experience of the candidate, or an introduction to the candidate.",
              "type": "string"
            },
            "employerPreferences": {
              "description": "A list of information about a candidate's preferences in an ideal employer or company.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployerPreferenceType"
              }
            },
            "positionPreferences": {
              "description": "A list of information about a candidate's preferences in an ideal position or role.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PositionPreferenceType"
              }
            },
            "candidateRelationships": {
              "description": "A list of information about a candidate's relationship to the (potential) employer.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CandidateRelationshipType"
              }
            },
            "candidateSources": {
              "description": "A list of information about a candidate's sources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CandidateSourceType"
              }
            },
            "applicationProcessHistory": {
              "description": "Information about the application process history.",
              "$ref": "#/definitions/ProcessHistoryType"
            },
            "workLifeCycles": {
              "description": "Information to specify details on the recruiting life cycle. For example, application date, hire date, rejection date including rejection reason, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkLifeCycleType"
              }
            }
          }
        },
        "PersonAvailabilityType": {
          "title": "PersonAvailabilityType",
          "description": "Details about when a person is available for work engagements.",
          "type": "object",
          "properties": {
            "availabilityDates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AvailabilityDatesType"
              }
            },
            "noticePeriodMeasure": {
              "description": "The notice period that is required.",
              "$ref": "#/definitions/MeasureType"
            },
            "immediateStartIndicator": {
              "description": "An indicator that the person could start immediately.",
              "$ref": "#/definitions/IndicatorType"
            }
          }
        },
        "AvailabilityDatesType": {
          "title": "AvailabilityDatesType",
          "description": "The dates of availability for work engagements.",
          "type": "object",
          "properties": {
            "startDateTime": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "endDateTime": {
              "$ref": "#/definitions/FormattedDateTimeType"
            }
          }
        },
        "DistributionGuidelinesType": {
          "title": "DistributionGuidelinesType",
          "description": "The rules for dispersing information contained in the object to a person or organization.",
          "type": "object",
          "properties": {
            "doNotRedistributeIndicator": {
              "description": "An indicator to not redistribute this to other third parties.",
              "$ref": "#/definitions/IndicatorType"
            },
            "distributeTo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DistributeToType"
              }
            },
            "doNotDistributeTo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DoNotDistributeToType"
              }
            }
          }
        },
        "DistributionType": {
          "title": "DistributionType",
          "description": "The person or organization to which objects should (not) be distributed, and the related effective dates.",
          "type": "object",
          "properties": {
            "startDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "endDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "duration": {
              "$ref": "#/definitions/DurationType"
            },
            "person": {
              "$ref": "#/definitions/EntityType"
            },
            "organization": {
              "$ref": "#/definitions/OrganizationType"
            },
            "communication": {
              "$ref": "#/definitions/CommunicationType"
            },
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "DistributeToType": {
          "title": "DistributeToType",
          "description": "The person or organization to which the objects should be delivered, and the effective dates of this distribution.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/DistributionType"
            }
          ]
        },
        "DoNotDistributeToType": {
          "title": "DoNotDistributeToType",
          "description": "The person or organization to which the objects should not be delivered (excluded), including the effective dates to this exclusion.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/DistributionType"
            }
          ]
        },
        "AssociatedPositionOpeningType": {
          "title": "AssociatedPositionOpeningType",
          "description": "Contains details answering the questions: 1. What, if any, are the position openings with which is the candidate associated? 2. How did the candidate become associated with those positions? The positionOpeningId, positionTitle, and positionUri components address the first question. The candidateAppliedIndicator addresses the second question. All elements are optional. In general, a candidate becomes associated with a position by applying to be considered for the position or by having been sourced and matched to the opening through some manner of automated and/or human-initiated recruiting or research process.",
          "type": "object",
          "properties": {
            "positionOpeningId": {
              "description": "An identifier to a related position opening (related to recruiting for a job).",
              "$ref": "#/definitions/IdentifierType"
            },
            "staffingOrderId": {
              "description": "An identifier to a related staffing order (related to filling a position from a staffing organization).",
              "$ref": "#/definitions/IdentifierType"
            },
            "positionTitle": {
              "description": "A short phrase describing the position as it would be listed on a business card or in a company directory. OED: An appellation attaching to a position in virtue of rank, function or office.",
              "type": "string"
            },
            "positionUri": {
              "description": "A Uniform Resource Identifier to the associated position opening. This is often a web page or HTTP URL.",
              "type": "string",
              "format": "uri"
            },
            "candidateAppliedIndicator": {
              "description": "An indicator that the candidate applied to this associated position.",
              "$ref": "#/definitions/IndicatorType"
            },
            "dispositionStatus": {
              "description": "The current disposition status of the candidate to the associated position opening.",
              "$ref": "#/definitions/DispositionStatusType"
            }
          }
        },
        "DispositionStatusType": {
          "title": "DispositionStatusType",
          "description": "Contains the related disposition or status of a candidate related to a specific position opening.",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the disposition status.",
              "type": "string"
            },
            "code": {
              "description": "The code of the disposition status.",
              "$ref": "#/definitions/CodeType"
            },
            "description": {
              "description": "Description of the disposition status.",
              "type": "string"
            },
            "reasonCode": {
              "description": "A reason code representing the reason for the disposition change.",
              "$ref": "#/definitions/CodeType"
            },
            "reasonDescription": {
              "description": "Description of the reason for the status code change. Typically used for the rejection reason or hire reason.",
              "type": "string"
            },
            "date": {
              "description": "The date of the disposition change.",
              "$ref": "#/definitions/FormattedDateTimeType"
            }
          }
        },
        "CandidateRelationshipType": {
          "title": "CandidateRelationshipType",
          "description": "Information about the relationship of a candidate to the (potential) employer of his/her candidacy.",
          "type": "object",
          "properties": {
            "candidateRelationshipId": {
              "description": "An identifier for the relationship of a candidate to a (potential) employer, e.g. current or former employee number.",
              "$ref": "#/definitions/IdentifierType"
            },
            "internalCandidateIndicator": {
              "description": "An indicator to classify the candidate as internal to the (potential) employer. This could be a current employee, current intern, or current contractor.",
              "$ref": "#/definitions/IndicatorType"
            },
            "candidateRelationshipCode": {
              "description": "A code classifying the relationship of a candidate to a (potential) employer.",
              "$ref": "#/definitions/CandidateRelationshipCodeList"
            },
            "otherCandidateRelationshipCode": {
              "description": "Further information characterizing the relationship of a candidate to a (potential) employer. Mostly vendor or employer specific.",
              "$ref": "#/definitions/CodeType"
            }
          }
        },
        "CandidateSourceType": {
          "title": "CandidateSourceType",
          "description": "Information about the source of a candidate.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EntityType"
            }
          ],
          "properties": {
            "type": {
              "description": "Information on the type of source.",
              "type": "string"
            },
            "order": {
              "description": "Information on the order of source.",
              "type": "number"
            }
          }
        }
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "uri": {
          "description": "A URI (uniform resource identifier) to more information on the candidate on the internet. This could include a public profile URL, an online resume, or a person website.",
          "type": "string",
          "format": "uri"
        },
        "distributionGuidelines": {
          "description": "Instructions on how this candidate should be distributed to third parties.",
          "$ref": "#/definitions/DistributionGuidelinesType"
        },
        "person": {
          "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/CandidatePersonType"
        },
        "profiles": {
          "description": "Information on the profiles of a candidate. A typical candidate will have one profile, but additional profiles can be included in difference languages, presentations, or industry focus.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateProfileType"
          }
        }
      }
    },
    "ProvisionalVerifiableCredentialLER_RSType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialLER-RSType",
      "description": "LER-RS Provisional JSON Schema for W3C Verifiable Credential",
      "type": "object",
      "properties": {
        "@context": {
          "description": "An ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. The set must contain a URI with the value http://schema.hropenstandards.org/4.5RC/recruiting/json/ler-rs/ProvisionalVerifiableCredentialEducationAndLearningType.json. Subsequent items in the array express context information.",
          "$ref": "#/definitions/@ContextType"
        },
        "credentialSubject": {
          "description": "HROpen LER-RS....",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the only subject of the credential.",
              "type": "string",
              "format": "uri"
            },
            "lerrsType": {
              "$ref": "#/definitions/LER_RSType"
            }
          }
        }
      },
      "required": [
        "@context",
        "credentialSubject"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionalVerifiableCredentialDataModelBaseType"
        }
      ],
      "definitions": {
        "@ContextType": {
          "description": "HROpen LER-RS-specific ContextType.",
          "type": "array",
          "uniqueItems": true,
          "items": [
            {
              "description": "The @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1.",
              "enum": [
                "https://www.w3.org/2018/credentials/v1"
              ]
            },
            {
              "description": "Context for ProvisionalVerifiableCredentialLER-RSType.",
              "enum": [
                "http://schema.hropenstandards.org/4.4/recruiting/json/VerifiableCredentialLER-RSType.json"
              ]
            }
          ],
          "additionalItems": {
            "type": "string"
          }
        }
      },
      "$id": "credential-schema-2.0"
    },
    "Recruiting_LD": {
      "@context": {
        "schema": "https://schema.org/",
        "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "hrrec": "http://schema.hropenstandards.org/recruiting/",
        "rdfs": "http://www.w3.org/2000/01/rdf-schema#"
      },
      "@graph": [
        {
          "@id": "hrrec:CandidateType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "A person who is requesting consideration or is being considered for a current or future position at a company.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:distributionGuidelines",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:CandidateType;Instructions on how this candidate should be distributed to third parties."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:CandidateType"
            }
          ]
        },
        {
          "@id": "hrrec:person",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType,hrrec:CandidateType;Information to identify the person, including name, communication, demographic details and other identifiers."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:CandidateType"
            },
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:profiles",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:CandidateType;Information on the profiles of a candidate. A typical candidate will have one profile, but additional profiles can be included in difference languages, presentations, or industry focus."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:CandidateType"
            }
          ]
        },
        {
          "@id": "hrrec:uri",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:CandidateType;A URI (uniform resource identifier) to more information on the candidate on the internet. This could include a public profile URL, an online resume, or a person website."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:CandidateType"
            }
          ]
        },
        {
          "@id": "hrrec:JobPostingType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Entity describing an on-line advertisement for filling one or more job openings.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:requiredEducation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the required education or training needed for the position or occupation. Note(s): Specific credential requirements should use requiredCredential."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:sensoryRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:minimumCredentials",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the minimum credential needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:physicalRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:attitudes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Motivator of performance including values, aspirations, and priorities necessary to successful performance of a task or job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of attitude types."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:reportingRelationships",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Position(s) to which this position reports and over which this position exercises some degree of authority, control or leadership."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:jobBenefits",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Description of benefits associated with the job (e.g., \"employee discount\", \"health insurance\", \"401K plan\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of benefit types; select from an existing enumeration of such types."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:minimumEducation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the minimum education needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:validFrom",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;The date from which the job posting is valid."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:requiredConditions",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Resource referenced provides the means to make logical assertions that combine resources that in aggregate fulfill education, experience and credential requirements."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:abilities",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Aptitude, capacity or power to act physically, socially, mentally, legally, or morally at a level suitable to the work context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of ability types such as the O*NET cognitive, sensory, psychomotor and physical abilities."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:requiredExperiences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the required experience needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:skills",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Ability to apply knowledge and use know-how to complete tasks and solve problems including types or categories of developed proficiency or dexterity in mental operations and physical processes required to fulfill a work role; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of skill types such as the O*NET skills."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Skills are proficiencies and abilities developed through training and experience. Skills are quantifiable and/or measurable. Skills may involve manipulating things, data or people, either verbally, manually or mentally to accomplish an objective. Skills can be developed with practice or appropriate training."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:LER-RSType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:specialCommitments",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Any special commitments associated with this job posting (e.g. low-income, native American, ex-offenders, military commit) along with any special exclusions (e.g. criminal records)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:preferredCredentials",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the preferred credential needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:responsibilities",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Key work tasks or activities over which this position exercises some degree of authority, control or leadership. Note(s): Use a value selected from a controlled vocabulary of responsibilities."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:physicalActivities",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the physical activity expected or required for a position. Note(s): Use a value selected from a controlled vocabulary of physical activity types such as \"bending\", \"standing\", \"sitting\"."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:equivalentEducation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of equivalent education or training for the position or occupation. Note(s): An educational experience without award of a credential should be recorded with a range of QualifyingExperience. An educational experience with award of a credential should be recoded with a range of Credential, not QualifyingExperience."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:employerOverview",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Description of the employer, career opportunities and work environment."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:tasks",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Piece or unit of work to be done or undertaken and accomplished within a defined period of time or by a deadline; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of task types such as O*NET tasks."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:knowledge",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Body of facts, principles, theories and practices that is related to a field of work or study; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of knowledge types such as the O*NET knowledge."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:formattedDescriptions",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;HTML-tagged summary of the salient aspects of the job, including job responsibilities, qualifications, skills, working hours, education requirements, and experience requirements."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:postingInstructions",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Resource providing instructions for posting a job position opening to a job board or media channel and for submission of applications."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:validThrough",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;The date after which the item is not valid. For example the end of an offer, salary period, or a period of opening hours."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:jobStartDate",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Target date when the employment would begin."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:shiftSchedules",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Type of the typical work shift of the job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of work shift types. Sample may include swing shift, day shift, or weekend shift. "
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The detailed specifications of shift schedules."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;In detail specification of shift schedules."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:PositionProfileType"
            },
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:inLanguage",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;The language of the content of the job posting."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:qualificationSummary",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Summary description of the ideal candidate's qualifications for a position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:alternativeEducation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of an alternative education or training fulfilling requirements for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:estimatedSalaries",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Description of the estimated salary for a job posting based on a variety of variables including, but not limited to industry, job title, and location."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:technologies",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Tool, application or other form of technology that requires knowledge, skill and ability to use effectively in executing the tasks and responsibilities of the job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of technology types such as O*NET technology and tools."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:postingID",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Employer's identifier for a particular job posting. Note(s): For the identifier of the position for this posting, use positionID."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:employmentUnit",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Department, unit and/or facility where the employee reports and/or in which the job is to be performed."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:name",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:requiredAssessments",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Resource referenced is an example of a direct, indirect, formative, and summative evaluation or estimation of the nature, ability, or quality of a person's performance or outcome of an action."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:equivalentCredentials",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of an equivalent credential for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:incentiveCompensation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of bonus and commission compensation aspects of the job."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:equivalentExperiences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of equivalent experience for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:workHours",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Typical working hours for this job; e.g. \"1st shift\", \"night shift\", \"8am-5pm\"."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:preferredEducation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the preferred education or training needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:industryCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Code from a controlled vocabulary of industry types identifying the primary economic activity of an establishment defined as a single physical location where business is conducted or where services or industrial operations are performed. Note(s): 1.) Use a value selected from a controlled vocabulary of industry types used in the country where the job is located; e.g., NAICS in the U.S. and ESCO in the European Union. 2.) In a JDX job description, there my be multiple levels and locations for an organization identified and each may have different industry codes based on the kinds of work performed at those locations."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:EmployerPreferenceType;A list of industry codes which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:EmployerPreferenceType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:jobSchedules",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Schedule of the employment (e.g. \"full-time\", \"part-time\", \"flex-time\", \"hourly\", \"shared-time\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment schedule types; select from an existing enumeration of such types."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:title",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;The title of the job."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:jobImmediateStart",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Indicator as to whether a position is available for an immediate start."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:jobTerms",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Type of employment term (e.g. \"regular\", \"temporary\", \"seasonal\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment term types; select from an existing enumeration of such types."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:disclaimers",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Statement that denies aspects of a statement made or omitted by the employing entity in the position or posting."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:dateCreated",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Date on which the position was created."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:requiredCredentials",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the required credential needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:positionID",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Employer's identifier for a particular position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:workActivities",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Purposeful, systematic activity by one or more workers acting on a work objective to reach an intended outcome; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of activity types such as the O*NET work activities."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:datePosted",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Date of posting by a channel."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:preferredExperiences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the preferred experience needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:totalJobOpenings",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Total number of positions open at all locations."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:applicantLocationRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Geographic location(s) in which employees may be located for remote (telecommuting) jobs."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:jobAgreements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Type of employment agreement (e.g. \"employee\", \"contract-to-hire\", \"contract\", \"internship\", \"externship\", \"apprenticeship\", \"student\", \"volunteer\", \"under collective bargaining\", \"eligible for overtime\"; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment contract agreements; select from an existing enumeration of such types."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:workLanguages",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Information on the work languages used for the job."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:postingRequestor",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Agent requesting the posting."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:baseSalaries",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Base salary of the job or of an employee in an employee role including minimum and maximum salary and unit value (e.g., hour, day, week, month, or year)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:identifiers",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Note(s): Identifier in JDX has a constrained range of PropertyValue. Best practice is to use name property to textually identify the type of identifier, value property to hold the textual value of the identifier, and the properytID for a URI indicating the type of identifier. NOTE: JDX defines positionID and postingID to handle the employer's identifier for a particular position or posting."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:travelRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Information about any required travel, systematic or occasional."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:jobLocationTypes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;A description of the job location (e.g., TELECOMMUTE for telecommute jobs)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:competencies",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Observable and measurable knowledge, skills, abilities and personal attributes that contribute to enhanced employee performance of the job; select from an existing enumeration of such types. "
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:dateModified",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Date on which the position was modified."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:minimumExperiences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the minimum experience needed for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:careerLevels",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;A code classifying the level of a candidate based on career experience; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of career level types (e.g., HR Open Standards CareerLevelCodeList.json)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:riskExposures",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of any exposure to risks associated with the job including exposure to extreme noise or temperature, dust/particle matter, radiation, chemicals, airborne communicable diseases and bloodborne pathogens."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:experienceCategories",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Category of experience needed for the position or Occupation; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of experience types including, but not limited to, \"Education Experience\", \"Training Experience\", \"Work Experience\", \"Apprenticeship\", and \"Traineeship\"."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:alternativeCredentials",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of an alternative credential fulfilling requirements for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:hiringOrganization",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Organization offering the job position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:jobLocation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Typically single geographic location where the work is performed."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:occupationCategories",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobPostingType;Category of the relevant occupation of the job used in the country of employment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of occupation categories such as the Standard Occupational Classification (SOC)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            }
          ]
        },
        {
          "@id": "hrrec:industries",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of the most critical economic or work activities performed (e.g. software development, electronic manufacturing, motor vehicle production, or diagnostic and therapeutic services). Note(s): NOTE: The industry description expected here is a brief narrative of the most critical economic or work activities performed. To identify a formal industry code, such as NAICS in the U.S., use the industryCode property."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:educationLevels",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Word or phrase identifying the location of the person in terms of his or her progression through an education or training context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of education levels such as HR Open Standards IscedCodeList.json."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:alternativeExperiences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of an alternative experience fulfilling requirements for the position or occupation."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:citizenshipRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Required country of the applicant's citizenship. Note(s): Use a value selected from a country code list such as the Library of Congress' List of Countries."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:securityClearanceRequirements",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType,hrrec:JobPostingType;Description of any security clearance requirements."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:JobPostingType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:LER-RSType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Learning and Employment Record Resume Standard",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:employmentPreferences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;A list of information about a person's preferences in an ideal employer or company."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:narratives",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Experiences, Aspirations, Interests (or any free form text elements) of a person."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:attachments",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Content of an attachments, which can be embedded or an external reference."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;Attachments related to the position profile."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            },
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:educationAndLearnings",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Contains details documenting a person's education and learnings, which typically consists of formal higher education (high school or higher)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:type",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;The instance type to assist implementors of this standard to discover the schema and version of the instance. Recommend using the full URL to the schema and version for LER-RS you are using. Example: http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/LER-RSType.json"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:certifications",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Documents or confirmations certifying the status or acquirements of the bearer, or his fulfillment of conditions which authorize them to act or practise in a specified way; hence, often equal to a certificate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:licenses",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Authoritative permission to hold a certain status or to do certain things, e.g. to practise some trade or profession. (OED license, n. a. A formal, usually a printed or written permission from a constituted authority to do something. b. The document embodying such a permission.)"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:positionPreferences",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;A list of information about a person's preferences in an ideal position or role."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:employmentHistories",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;The prior and current details of a person's employment, work, or relevant experience such as might be reported within a professional profile, CV, resume, employment application, or similar document. Details of a particular tenure of employment or work with an organization."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:job",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;The related Job to this LER Resume."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:communication",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:LER-RSType;Allows capture of information about a variety of communication channels (telephone, email, fax, messaging, address, etc.)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:LER-RSType"
            }
          ]
        },
        {
          "@id": "hrrec:PositionOpeningType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "A job or position opening that is at an organization.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:approvalProcessHistory",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;Information about the approval process history."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:approvalStatusCode",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;Status of the approval process for a position opening; typical values: InReview, Approved, NotApproved."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:approvalMessage",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;Detailed information on the approval process, or reason for the approval status."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:postingRequester",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;Information about the party placing or communicating the position posting. The party requesting the posting or advertising service."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:statusCode",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;Status of position opening; typical values: Active, Closed, Incomplete."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:positionProfiles",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionOpeningType;The profile(s) of the position opening. A single position opening could have multiple position profiles for different purposes, including language, branding, or distribution channels or rules."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionOpeningType"
            }
          ]
        },
        {
          "@id": "hrrec:PositionProfileType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "A profile of a job or position opening that is available at an organization.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:profileName",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The name given to the profile. Often used in systems where multiple versions of a PositionProfile may be managed."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:positionScheduleTypeCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;Describes a position's general schedule (e.g. full-time, part-time)."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;Values that classify the working schedule of a position offered or a position sought. Essentially, whether a position offered or sought is full-time or part-time or has provision for flexible scheduling. Intended to classify schedule position preferences of a candidate or conversely employer preferences or requirements related to candidates with respect to an advertised position. Used in the context of matching candidates to positions. This is an enumerated list."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            },
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:remoteWork",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The preference or requirement for remote work."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;The preference for remote work requirement."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            },
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:offeredRemunerationPackage",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The salary or compensation, as well as benefits on offer for the position."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;The preference for remuneration (including salary or hourly rate, benefits) for a position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            },
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:positionClassification",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The classification of the position (which may apply to specific countries)."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:positionPeriod",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;The start and end date for the position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:immediateStartIndicator",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;An indicator as to whether a position is available for an immediate start."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:relocation",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;Indicates if a hiring company would consider to support the relocation of a new employee for a position."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;Indicates if a candidate would consider moving to a new city or location for a suitable position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            },
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:shiftDescription",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;General description of any shift work or shift schedule."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:workingPeriods",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionProfileType;Describes the working periods of the position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionProfileType"
            }
          ]
        },
        {
          "@id": "hrrec:RecruitingType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Represents the Recruiting Specification.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:candidate",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RecruitingType;null"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RecruitingType"
            }
          ]
        },
        {
          "@id": "hrrec:positionOpening",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RecruitingType;null"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RecruitingType"
            }
          ]
        },
        {
          "@id": "hrrec:jobPosting",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RecruitingType;null"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RecruitingType"
            }
          ]
        },
        {
          "@id": "hrrec:ler-rs",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RecruitingType;null"
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RecruitingType"
            }
          ]
        },
        {
          "@id": "hrrec:EmployerPreferenceType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Contains a collection of information about a candidate's preferences in an ideal employer or company.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:organizationTypes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:EmployerPreferenceType;A list of organization types (such as public, non-profit) which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:EmployerPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:headcountRange",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:EmployerPreferenceType;A measure of size of a company based on the number of employees (headcount). This range is inclusive of the minimum and maximum number."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:EmployerPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:organizationNames",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:EmployerPreferenceType;A list of organization names which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:EmployerPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:descriptions",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:EmployerPreferenceType;A list of text descriptions of the candidate preferences for an employer."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:RelocationType;Text describing any special considerations about relocation."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:TravelType;Text describing any special travel preferences or considerations."
            },
            {
              "@language": "en-us",
              "@value": "hrrec:JobDescriptionType;A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:EmployerPreferenceType"
            },
            {
              "@id": "hrrec:RelocationType"
            },
            {
              "@id": "hrrec:TravelType"
            },
            {
              "@id": "hrrec:JobDescriptionType"
            }
          ]
        },
        {
          "@id": "hrrec:PositionPreferenceType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Contains a collection of information about a candidate's preferences in an ideal position or role.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:jobGradeCode",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A job grade code for the position. This would be defined by a company, union, or industry."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:shiftDescriptions",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A list of shifts which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:careerLevelCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A list of career levels which are preferred to the candidate. This describes the experience level, management level, or other levels of measuring a career."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:positionTitles",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A list of position titles which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:jobCategories",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A list of job categories which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:workingLanguageCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A code classifying the language or languages used within the workplace or associated with work. This is intended to communicate general information about the language(s) used within the work environment or correspondingly general information about a candidate's specific language preferences. This component might be offered as descriptive 'pre-qualification' information on a position announcement. It might appear within the context of a Candidate Profile as a general statement of a candidate's general language capabilities or preferences. WorkingLanguageCode is not intended as a statement of language proficiency or specific requirement relating to language proficiency. Specific information regarding language proficiency should be covered either within PersonCompetency or PositionCompetency as may be appropriate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:locations",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;A list of locations which are preferred to the candidate."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:positionOfferingTypeCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;These are values that are descriptive in classifying a position within advertising or communications of a position opportunity or offering. Note that these classifications are useful within advertising, but they are not precise classes useful internally to drive pay, benefits, and HR compliance. This is an enumerated list."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:travel",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:PositionPreferenceType;Information regarding travel preferences of a person seeking a job."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:PositionPreferenceType"
            }
          ]
        },
        {
          "@id": "hrrec:RelocationType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Information about relocation.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:willingToRelocateIndicator",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RelocationType;Indicates whether relocation is an option for the candidate or considered by the hiring company."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RelocationType"
            }
          ]
        },
        {
          "@id": "hrrec:RemoteWorkType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Represents the remote work specification.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:restrictionDetails",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RemoteWorkType;The details related to the RestrictionCode that help to describe the specifics of the remote work restriction."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RemoteWorkType"
            }
          ]
        },
        {
          "@id": "hrrec:workLocationCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RemoteWorkType;A list of codes defining work locations allowed for or desired for remote work."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RemoteWorkType"
            }
          ]
        },
        {
          "@id": "hrrec:restrictionCodes",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RemoteWorkType;A list of codes defining the scope of restrictions of work locations allowed for or desired for remote work."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RemoteWorkType"
            }
          ]
        },
        {
          "@id": "hrrec:remoteWorkIndicator",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RemoteWorkType;Indicator for remote work is available to employee."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RemoteWorkType"
            }
          ]
        },
        {
          "@id": "hrrec:remoteEligibilityRequirement",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:RemoteWorkType;The requirements of the remote work for a candidate. This could include having a computer, internet access, a quiet or private office environment, etc."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:RemoteWorkType"
            }
          ]
        },
        {
          "@id": "hrrec:TravelType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Information regarding travel - preferences or necessities.",
            "@language": "en-us"
          }
        },
        {
          "@id": "hrrec:willingToTravelIndicator",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:TravelType;Indicates that a person is willing to travel within the capacity of his or her position."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:TravelType"
            }
          ]
        },
        {
          "@id": "hrrec:percentage",
          "@type": "rdf:Property",
          "rdfs:comment": [
            {
              "@language": "en-us",
              "@value": "hrrec:TravelType;The percentage of time required (or willing) to travel for a position. For example, a person needs (or is willing) to travel 25% of his or her regularly scheduled hours."
            }
          ],
          "schema:domainIncludes": [
            {
              "@id": "hrrec:TravelType"
            }
          ]
        },
        {
          "@id": "hrrec:JobDescriptionType",
          "@type": "rdfs:Class",
          "rdfs:comment": {
            "@value": "Entity providing a statement of a job position generally including the formal job title, duties, purpose, responsibilities, scope, reporting relationships and working conditions along with the knowledge, skills, abilities, education, qualifications, experience and other requirements for performing the job.",
            "@language": "en-us"
          }
        }
      ]
    },
    "JobDescriptionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "JobDescriptionType",
      "description": "Entity providing a statement of a job position generally including the formal job title, duties, purpose, responsibilities, scope, reporting relationships and working conditions along with the knowledge, skills, abilities, education, qualifications, experience and other requirements for performing the job.",
      "type": "object",
      "properties": {
        "alternativeCredentials": {
          "description": "Description of an alternative credential fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "alternativeEducation": {
          "description": "Description of an alternative education or training fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "alternativeExperiences": {
          "description": "Description of an alternative experience fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "citizenshipRequirements": {
          "description": "Required country of the applicant's citizenship. Note(s): Use a value selected from a country code list such as the Library of Congress' List of Countries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "competencies": {
          "description": "Observable and measurable knowledge, skills, abilities and personal attributes that contribute to enhanced employee performance of the job; select from an existing enumeration of such types. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "dateCreated": {
          "description": "Date on which the position was created.",
          "$ref": "#/definitions/DateTimeType"
        },
        "dateModified": {
          "description": "Date on which the position was modified.",
          "$ref": "#/definitions/DateTimeType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disclaimers": {
          "description": "Statement that denies aspects of a statement made or omitted by the employing entity in the position or posting.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "educationLevels": {
          "description": "Word or phrase identifying the location of the person in terms of his or her progression through an education or training context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of education levels such as HR Open Standards IscedCodeList.json.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "employmentUnit": {
          "description": "Department, unit and/or facility where the employee reports and/or in which the job is to be performed.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "equivalentCredentials": {
          "description": "Description of an equivalent credential for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "equivalentEducation": {
          "description": "Description of equivalent education or training for the position or occupation. Note(s): An educational experience without award of a credential should be recorded with a range of QualifyingExperience. An educational experience with award of a credential should be recoded with a range of Credential, not QualifyingExperience.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "equivalentExperiences": {
          "description": "Description of equivalent experience for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "experienceCategories": {
          "description": "Category of experience needed for the position or Occupation; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of experience types including, but not limited to, \"Education Experience\", \"Training Experience\", \"Work Experience\", \"Apprenticeship\", and \"Traineeship\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "hiringOrganization": {
          "description": "Organization offering the job position.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "incentiveCompensation": {
          "description": "Description of bonus and commission compensation aspects of the job.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifiers": {
          "description": "The identifier property represents any kind of identifier for any kind of Thing, such as ISBNs, GTIN codes, UUIDs etc. Note(s): Identifier in JDX has a constrained range of PropertyValue. Best practice is to use name property to textually identify the type of identifier, value property to hold the textual value of the identifier, and the properytID for a URI indicating the type of identifier. NOTE: JDX defines positionID and postingID to handle the employer's identifier for a particular position or posting.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "industries": {
          "description": "Description of the most critical economic or work activities performed (e.g. software development, electronic manufacturing, motor vehicle production, or diagnostic and therapeutic services). Note(s): NOTE: The industry description expected here is a brief narrative of the most critical economic or work activities performed. To identify a formal industry code, such as NAICS in the U.S., use the industryCode property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "industryCodes": {
          "description": "Code from a controlled vocabulary of industry types identifying the primary economic activity of an establishment defined as a single physical location where business is conducted or where services or industrial operations are performed. Note(s): 1.) Use a value selected from a controlled vocabulary of industry types used in the country where the job is located; e.g., NAICS in the U.S. and ESCO in the European Union. 2.) In a JDX job description, there my be multiple levels and locations for an organization identified and each may have different industry codes based on the kinds of work performed at those locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "inLanguage": {
          "description": "The language of the content of the job posting.",
          "$ref": "#/definitions/LocalizationInclusion"
        },
        "jobAgreements": {
          "description": "Type of employment agreement (e.g. \"employee\", \"contract-to-hire\", \"contract\", \"internship\", \"externship\", \"apprenticeship\", \"student\", \"volunteer\", \"under collective bargaining\", \"eligible for overtime\"; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment contract agreements; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "jobLocation": {
          "description": "Typically single geographic location where the work is performed.",
          "$ref": "#/definitions/PlaceType"
        },
        "jobLocationTypes": {
          "description": "A description of the job location (e.g., TELECOMMUTE for telecommute jobs).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "jobTerms": {
          "description": "Type of employment term (e.g. \"regular\", \"temporary\", \"seasonal\"); select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of employment term types; select from an existing enumeration of such types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "knowledge": {
          "description": "Body of facts, principles, theories and practices that is related to a field of work or study; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of knowledge types such as the O*NET knowledge.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "minimumExperiences": {
          "description": "Description of the minimum experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "minimumCredentials": {
          "description": "Description of the minimum credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "minimumEducation": {
          "description": "Description of the minimum education needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "physicalActivities": {
          "description": "Description of the physical activity expected or required for a position. Note(s): Use a value selected from a controlled vocabulary of physical activity types such as \"bending\", \"standing\", \"sitting\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "physicalRequirements": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "positionID": {
          "description": "Employer's identifier for a particular position.",
          "type": "string"
        },
        "preferredCredentials": {
          "description": "Description of the preferred credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "preferredEducation": {
          "description": "Description of the preferred education or training needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "preferredExperiences": {
          "description": "Description of the preferred experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "qualificationSummary": {
          "description": "Summary description of the ideal candidate's qualifications for a position.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reportingRelationships": {
          "description": "Position(s) to which this position reports and over which this position exercises some degree of authority, control or leadership.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requiredAssessments": {
          "description": "Resource referenced is an example of a direct, indirect, formative, and summative evaluation or estimation of the nature, ability, or quality of a person's performance or outcome of an action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentProfileType"
          }
        },
        "requiredConditions": {
          "description": "Resource referenced provides the means to make logical assertions that combine resources that in aggregate fulfill education, experience and credential requirements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionType"
          }
        },
        "requiredCredentials": {
          "description": "Description of the required credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "requiredEducation": {
          "description": "Description of the required education or training needed for the position or occupation. Note(s): Specific credential requirements should use requiredCredential.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "requiredExperiences": {
          "description": "Description of the required experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "responsibilities": {
          "description": "Key work tasks or activities over which this position exercises some degree of authority, control or leadership. Note(s): Use a value selected from a controlled vocabulary of responsibilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "riskExposures": {
          "description": "Description of any exposure to risks associated with the job including exposure to extreme noise or temperature, dust/particle matter, radiation, chemicals, airborne communicable diseases and bloodborne pathogens.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "securityClearanceRequirements": {
          "description": "Description of any security clearance requirements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sensoryRequirements": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "skills": {
          "description": "Ability to apply knowledge and use know-how to complete tasks and solve problems including types or categories of developed proficiency or dexterity in mental operations and physical processes required to fulfill a work role; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of skill types such as the O*NET skills.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "tasks": {
          "description": "Piece or unit of work to be done or undertaken and accomplished within a defined period of time or by a deadline; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of task types such as O*NET tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "technologies": {
          "description": "Tool, application or other form of technology that requires knowledge, skill and ability to use effectively in executing the tasks and responsibilities of the job; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of technology types such as O*NET technology and tools.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "title": {
          "description": "The title of the job.",
          "type": "string"
        },
        "travelRequirements": {
          "description": "Information about any required travel, systematic or occasional.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "workActivities": {
          "description": "Purposeful, systematic activity by one or more workers acting on a work objective to reach an intended outcome; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of activity types such as the O*NET work activities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "workLanguages": {
          "description": "Information on the work languages used for the job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocalizationInclusion"
          }
        },
        "workHours": {
          "description": "Typical working hours for this job; e.g. \"1st shift\", \"night shift\", \"8am-5pm\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JDXOrganizationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "JDXOrganizationType",
      "description": "An organization such as a corporate body, employer, distribution channel provider.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Physical address of the entity.",
          "$ref": "#/definitions/AddressType"
        },
        "contactPoint": {
          "description": "A contact point for a person or organization.",
          "$ref": "#/definitions/AddressTypeArray"
        },
        "department": {
          "description": "Relationship between an organization and a department of that organization.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duns": {
          "description": "Dun & Bradstreet DUNS number for identifying an organization or business person.",
          "type": "string"
        },
        "email": {
          "description": "Email address of an organization or person.",
          "type": "string"
        },
        "faxNumber": {
          "description": "Fax number of an organization or person.",
          "type": "string"
        },
        "fein": {
          "description": "Federal Employer Identification Number (FEIN) identifying organizations, persons, states, government agencies, corporations, and companies.",
          "type": "string"
        },
        "geo": {
          "description": "The geo coordinates of the place.",
          "$ref": "#/definitions/GeoType"
        },
        "job": {
          "description": "Entity referenced is a full description of a job defined and to be offered by the organization being described.",
          "$ref": "#/definitions/JobType"
        },
        "industries": {
          "description": "Description of the most critical economic or work activities performed (e.g. software development, electronic manufacturing, motor vehicle production, or diagnostic and therapeutic services). Note(s): NOTE: The industry description expected here is a brief narrative of the most critical economic or work activities performed. To identify a formal industry code, such as NAICS in the U.S., use the industryCode property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "industryCodes": {
          "description": "Code from a controlled vocabulary of industry types identifying the primary economic activity of an establishment defined as a single physical location where business is conducted or where services or industrial operations are performed. Note(s): 1.) Use a value selected from a controlled vocabulary of industry types used in the country where the job is located; e.g., NAICS in the U.S. and ESCO in the European Union. 2.) In a JDX job description, there my be multiple levels and locations for an organization identified and each may have different industry codes based on the kinds of work performed at those locations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "isicV4": {
          "description": "International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.",
          "type": "string"
        },
        "jobLocation": {
          "description": "Typically single geographic location where the work is performed.",
          "$ref": "#/definitions/PlaceType"
        },
        "legalName": {
          "description": "The official name of the organization, e.g. the registered company name.",
          "type": "string"
        },
        "leiCode": {
          "description": "An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.",
          "type": "string"
        },
        "logo": {
          "description": "An associated logo.",
          "type": "string",
          "format": "uri"
        },
        "naics": {
          "description": "The North American Industry Classification System (NAICS) code for a particular organization or business person.",
          "type": "string"
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "numberOfEmployees": {
          "description": "Number of employees in the hiring organization.",
          "type": "integer"
        },
        "parentOrganization": {
          "description": "The larger organization that this organization is a subOrganization of, if any.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "sameAs": {
          "description": "URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.",
          "type": "string",
          "format": "uri"
        },
        "subOrganization": {
          "description": "A relationship between two organizations where the first includes the second, e.g., as a subsidiary.",
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "telephone": {
          "description": "The telephone number of an organization or person.",
          "type": "string"
        },
        "url": {
          "description": "URL of the item.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ConditionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "ConditionType",
      "description": "Entity providing the means to make logical assertions that combine resources that in aggregate fulfill education, experience and credential requirements.",
      "type": "object",
      "properties": {
        "alternativeCondition": {
          "description": "Resource referenced provides the means to make logical assertions about alternative conditions.",
          "$ref": "#/definitions/ConditionType"
        },
        "alternativeCredentials": {
          "description": "Description of an alternative credential fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "alternativeEducation": {
          "description": "Description of an alternative education or training fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "alternativeExperiences": {
          "description": "Description of an alternative experience fulfilling requirements for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "equivalentCredentials": {
          "description": "Description of an equivalent credential for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "equivalentEducation": {
          "description": "Description of equivalent education or training for the position or occupation. Note(s): An educational experience without award of a credential should be recorded with a range of QualifyingExperience. An educational experience with award of a credential should be recoded with a range of Credential, not QualifyingExperience.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "equivalentExperiences": {
          "description": "Description of equivalent experience for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "minimumExperiences": {
          "description": "Description of the minimum experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "minimumCredentials": {
          "description": "Description of the minimum credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "minimumEducation": {
          "description": "Description of the minimum education needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "preferredCondition": {
          "description": "Resource referenced provides the means to make logical asserions about alternative conditions.",
          "$ref": "#/definitions/ConditionType"
        },
        "preferredCredentials": {
          "description": "Description of the preferred credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "preferredEducation": {
          "description": "Description of the preferred education or training needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "preferredExperiences": {
          "description": "Description of the preferred experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "requiredConditions": {
          "description": "Resource referenced provides the means to make logical assertions that combine resources that in aggregate fulfill education, experience and credential requirements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionType"
          }
        },
        "requiredCredentials": {
          "description": "Description of the required credential needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialType"
          }
        },
        "requiredEducation": {
          "description": "Description of the required education or training needed for the position or occupation. Note(s): Specific credential requirements should use requiredCredential.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        },
        "requiredExperiences": {
          "description": "Description of the required experience needed for the position or occupation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QualifyingExperienceType"
          }
        }
      }
    },
    "PlaceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "PlaceType",
      "description": "Fixed physical location.",
      "type": "object",
      "properties": {
        "address": {
          "description": "Physical address of the entity.",
          "$ref": "#/definitions/AddressType"
        },
        "faxNumber": {
          "description": "Fax number of an organization or person.",
          "type": "string"
        },
        "geo": {
          "description": "The geo coordinates of the place.",
          "$ref": "#/definitions/GeoType"
        },
        "jobOpeningNumber": {
          "description": "Number of positions open at this location.",
          "type": "number"
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "telephone": {
          "description": "The telephone number of an organization or person.",
          "type": "string"
        }
      }
    },
    "QuantitativeValueType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "QuantitativeValueType",
      "description": "Point value or interval for product characteristics and other purposes.",
      "type": "object",
      "properties": {
        "maxValue": {
          "description": "The upper value of some characteristic or property.",
          "type": "number"
        },
        "minValue": {
          "description": "The lower value of some characteristic or property.",
          "type": "number"
        },
        "unitText": {
          "description": "Unit of measurement on which values for MonetaryAmount or QuantitativeValue are based; select from an existing enumeration of such types. An example of MonetaryAmount is $100 per day where unitText equals DAY. ",
          "type": "string"
        },
        "value": {
          "description": "Value of the quantitative value or property value node.",
          "type": "string"
        }
      }
    },
    "PostingInstructionsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "PostingInstructionsType",
      "description": "Entity providing information about where and how a posting should be communicated. Note(s): A posting channel usually would be a job board or other advertising medium (HR).",
      "type": "object",
      "properties": {
        "applicationCloseDate": {
          "description": "Closing date for accepting applications.",
          "$ref": "#/definitions/DateTimeType"
        },
        "applicationContact": {
          "description": "Organization or person contact point for the posting.",
          "$ref": "#/definitions/AddressTypeArray"
        },
        "applicationInstructions": {
          "description": "Narrative instructions for applying for this position.",
          "type": "string"
        },
        "applicationLocation": {
          "description": "Physical location where job applications can be submitted.",
          "$ref": "#/definitions/PlaceType"
        },
        "distributionChannel": {
          "description": "Identifies a job board or media channel associated with a job posting.",
          "type": "string",
          "format": "uri"
        },
        "postingEndDate": {
          "description": "End date (time) for the posting.",
          "$ref": "#/definitions/DateTimeType"
        },
        "postingStartDate": {
          "description": "Start date (time) for the posting.",
          "$ref": "#/definitions/DateTimeType"
        }
      }
    },
    "PostalAddressType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "PostalAddressType",
      "description": "Mailing address of an entity.",
      "type": "object",
      "properties": {
        "addressCountry": {
          "description": "The relevant country of the resource. For example, USA.",
          "type": "string"
        },
        "addressLocality": {
          "description": "The locality; e.g., Mountain View, London, Moscow.",
          "type": "string"
        },
        "addressRegion": {
          "description": "The region; e.g., CA, TX. Note(s): The relevant state, province, territory or other subdivision of a nation.",
          "type": "string"
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code; for example, 94043.",
          "type": "string"
        },
        "streetAddress": {
          "description": "Street address; for example, \"1600 Amphitheatre Pkwy\".",
          "type": "string"
        }
      }
    },
    "DefinedTermSetType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "DefinedTermSetType",
      "description": "A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.",
      "type": "object",
      "properties": {
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "url": {
          "description": "URL of the item.",
          "type": "string",
          "format": "uri"
        }
      }
    },
    "AssessmentProfileType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "AssessmentProfileType",
      "description": "Entity that describes the key characteristics of an assessment administered to candidates for a job.",
      "type": "object",
      "properties": {
        "areaAssessed": {
          "description": "Description of the area or domain to be assessed.",
          "type": "string"
        },
        "assessmentExample": {
          "description": "Resource describing an example assessment.",
          "type": "string",
          "format": "uri"
        },
        "assessmentMethod": {
          "description": "Type of method used to conduct an assessment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of assessment method types such as the AssessmentMethod vocabulary.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "conceptKeyword": {
          "description": "Word or phrase used to refine and describe significant aspects of the entity.",
          "type": "string"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "evidenceCategory": {
          "description": "The type of referenced artifact, exam or performance confirming or supporting an assertion; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of evidence types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        }
      }
    },
    "QualifyingExperienceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "QualifyingExperienceType",
      "description": "Entity describing verifiable work, education or training experience supporting a person's qualification to perform the tasks and responsibilities of a position. Note(s): A QualifyingExperience that results in the award of some form of credential should use the Credential class to describe that award.",
      "type": "object",
      "properties": {
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duration": {
          "description": "Duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.",
          "type": "string"
        },
        "educationLevels": {
          "description": "Word or phrase identifying the location of the person in terms of his or her progression through an education or training context; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of education levels such as HR Open Standards IscedCodeList.json.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "evidence": {
          "description": "Referenced artifact or performance confirming or supporting an assertion.",
          "type": "string",
          "format": "uri"
        },
        "evidenceCategory": {
          "description": "The type of referenced artifact, exam or performance confirming or supporting an assertion; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of evidence types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "experienceCategories": {
          "description": "Category of experience needed for the position or Occupation; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of experience types including, but not limited to, \"Education Experience\", \"Training Experience\", \"Work Experience\", \"Apprenticeship\", and \"Traineeship\".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "inLanguage": {
          "description": "The language of the content of the job posting.",
          "$ref": "#/definitions/LocalizationInclusion"
        },
        "levelCode": {
          "description": "Level of experience required; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of experience level types such as the HR Open CareerLevelCodeList.json.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "occupationCategories": {
          "description": "Category of the relevant occupation of the job used in the country of employment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of occupation categories such as the Standard Occupational Classification (SOC).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "program": {
          "description": "Educational program of study.",
          "type": "string"
        },
        "programConcentration": {
          "description": "Focused plan of study within a college or university degree such as a concentration in Aerospace Engineering within an Engineering degree.",
          "type": "string"
        },
        "provider": {
          "description": "Agent that provides, publishes, owns or otherwise has the authority to make the resource being described available.",
          "$ref": "#/definitions/JDXOrganizationType"
        }
      }
    },
    "MonetaryAmountType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "MonetaryAmountType",
      "description": "A monetary value or range. Note(s): This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc.",
      "type": "object",
      "properties": {
        "currency": {
          "description": "Currency designation (e.g., USD).",
          "type": "string"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxValue": {
          "description": "The upper value of some characteristic or property.",
          "type": "number"
        },
        "minValue": {
          "description": "The lower value of some characteristic or property.",
          "type": "number"
        },
        "payCycleInterval": {
          "description": "Pay cycle interval specifies how often the pay cycle occurs or, in other words, how often a person is paid, e.g., \"daily\", \"weekly\", \"monthly\", \"yearly\" etc.; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of pay cycles (e.g., the HR Open PayCycleIntervalCodeList).",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "unitText": {
          "description": "Unit of measurement on which values for MonetaryAmount or QuantitativeValue are based; select from an existing enumeration of such types. An example of MonetaryAmount is $100 per day where unitText equals DAY. ",
          "type": "string"
        },
        "value": {
          "description": "Value of the quantitative value or property value node.",
          "type": "string"
        }
      }
    },
    "AnnotatedDefinedTermType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "AnnotatedDefinedTermType",
      "description": "Word, name, acronym, phrase, defined in a controlled value space (e.g., taxonomy, glossary, dictionary, tag list, and other forms of enumeration). Note(s): Used in the context of JDX to assign terms from occupation, industry and instructional program classifications, skills and abilities, and abstract concepts to JDX entities. Through the class' relationship with the ScaledAnnotation class, terms can be conditioned through applications of scales for attributes such as importance and frequency.",
      "type": "object",
      "properties": {
        "annotation": {
          "description": "Entity providing qualifying notations including application of scales and other weights to concepts and competencies.",
          "$ref": "#/definitions/ScaleAnnotationType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inDefinedTermSet": {
          "description": "A defined term set that contains this term.",
          "$ref": "#/definitions/DefinedTermSetType"
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "termCode": {
          "description": "A code that identifies this DefinedTerm within a DefinedTermSet.",
          "type": "string"
        }
      }
    },
    "CredentialType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "CredentialType",
      "description": "Entity describing authoritative permission to hold a certain status or to do certain things, e.g. to practice some trade or profession.",
      "type": "object",
      "properties": {
        "credentialCategory": {
          "description": "Type of credential such as badge, certification, bachelor degree; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of credential types (e.g., credential subclasses from CTDL).",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duration": {
          "description": "Duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.",
          "type": "string"
        },
        "evidence": {
          "description": "Referenced artifact or performance confirming or supporting an assertion.",
          "type": "string",
          "format": "uri"
        },
        "evidenceCategory": {
          "description": "The type of referenced artifact, exam or performance confirming or supporting an assertion; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of evidence types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "inLanguage": {
          "description": "The language of the content of the job posting.",
          "$ref": "#/definitions/LocalizationInclusion"
        },
        "occupationCategories": {
          "description": "Category of the relevant occupation of the job used in the country of employment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of occupation categories such as the Standard Occupational Classification (SOC).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnotatedDefinedTermType"
          }
        },
        "program": {
          "description": "Educational program of study.",
          "type": "string"
        },
        "programConcentration": {
          "description": "Focused plan of study within a college or university degree such as a concentration in Aerospace Engineering within an Engineering degree.",
          "type": "string"
        },
        "provider": {
          "description": "Agent that provides, publishes, owns or otherwise has the authority to make the resource being described available.",
          "$ref": "#/definitions/JDXOrganizationType"
        }
      }
    },
    "ScaleAnnotationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "ScaleAnnotationType",
      "description": "Resource for identifying and applying a defined scale or rating to another resource. Note(s): Used, for example, when applying an importance scale to a competency identified in an instance of the AnnotatedDefinedTerm class.",
      "type": "object",
      "properties": {
        "acquiredInternally": {
          "description": "Whether or not a requirement in a posting may be acquired post-hire.",
          "type": "boolean"
        },
        "acquisitionDifficulty": {
          "description": "Rating or score representing the difficulty of the particular entity to acquire. Note(s): The scale may be applied to any appropriate controlled vocabulary concept such as knowledge, skill, and ability as identified in the associated AnnotationDefinedTerm.",
          "type": "number"
        },
        "assessmentMethod": {
          "description": "Type of method used to conduct an assessment; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of assessment method types such as the AssessmentMethod vocabulary.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "evidenceCategory": {
          "description": "The type of referenced artifact, exam or performance confirming or supporting an assertion; select from an existing enumeration of such types. Note(s): Use a value selected from a controlled vocabulary of evidence types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "preferred": {
          "description": "Whether or not the attribute being annotated has been given priority.",
          "type": "boolean"
        },
        "required": {
          "description": "Whether or not the attribute being annotated is required.",
          "type": "boolean"
        },
        "requiredAssessments": {
          "description": "Resource referenced is an example of a direct, indirect, formative, and summative evaluation or estimation of the nature, ability, or quality of a person's performance or outcome of an action.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentProfileType"
          }
        },
        "requiredAtHiring": {
          "description": "Whether or not a particular requirement is expected at the time of hiring or may be subsequently obtained.",
          "type": "boolean"
        },
        "scaleCategory": {
          "description": "Type or category of scale or weighting to be applied to a specific competency (knowledge, skill, ability), task, responsibility, interest etc.; select from an existing enumeration of such types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        }
      }
    },
    "PropertyValueType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "PropertyValueType",
      "description": "Property-value pair, e.g. representing a feature of an entity. Note(s): Use PropertyValue sparingly! Always use a specific property from a known namespace when they serve your purpose. Using PropertyValue as a substitute for such properties will not trigger the same linked data function as the predicate of an RDF triple as will a more specific property.",
      "type": "object",
      "properties": {
        "propertyID": {
          "description": "URL indicating the type of the property and pointing to an external vocabulary.",
          "type": "string"
        },
        "value": {
          "description": "Value of the quantitative value or property value node.",
          "type": "string"
        }
      }
    },
    "ContactPointType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "ContactPointType",
      "description": "Contact point—for example, for information about a job opening or interview.",
      "type": "object",
      "properties": {
        "contactType": {
          "description": "Specification of the type of contact point. Note(s): Use a value selected from a controlled vocabulary of contact types.",
          "$ref": "#/definitions/AnnotatedDefinedTermType"
        },
        "descriptions": {
          "description": "A description of the item. Note(s): Some online job boards and other services (e.g., Google Jobs) require the general description of a JobPosting to be HTML tagged; in such instances, use the formattedDescription property (if available) instead of the description property.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "description": "Email address of an organization or person.",
          "type": "string"
        },
        "faxNumber": {
          "description": "Fax number of an organization or person.",
          "type": "string"
        },
        "name": {
          "description": "The name of the item. Note(s): NOTE: For the name of the hiring organization, use the subproperty legalName.",
          "type": "string"
        },
        "telephone": {
          "description": "The telephone number of an organization or person.",
          "type": "string"
        }
      }
    },
    "MonetaryAmountDistributionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0-rc.2",
      "title": "MonetaryAmountDistributionType",
      "description": "Statistical distribution of monetary amounts.",
      "type": "object",
      "properties": {
        "currency": {
          "description": "Currency designation (e.g., USD).",
          "type": "string"
        },
        "duration": {
          "description": "Duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.",
          "type": "string"
        },
        "median": {
          "description": "The median value.",
          "type": "number"
        },
        "percentile10": {
          "description": "The 10th percentile value.",
          "type": "number"
        },
        "percentile25": {
          "description": "The 25th percentile value.",
          "type": "number"
        },
        "percentile75": {
          "description": "The 75th percentile value.",
          "type": "number"
        },
        "percentile90": {
          "description": "The 90th percentile value.",
          "type": "number"
        }
      }
    },
    "ProvisionalVerifiableCredentialEmploymentHistoryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialEmploymentHistoryType",
      "$id": "credential-schema-2.0",
      "description": "Provisional Employment Histories JSON Schema for W3C Verifiable Credential",
      "type": "object",
      "properties": {
        "@context": {
          "description": "An ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. The set must contain a URI with the value http://schema.hropenstandards.org/4.5RC/recruiting/json/ler-rs/ProvisionalVerifiableCredentialEmploymentHistoryType.json. Subsequent items in the array express context information.",
          "$ref": "#/definitions/@ContextType"
        },
        "credentialSubject": {
          "description": "HROpen Employment Histories claims about the subjects of the credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the only subject of the credential.",
              "type": "string",
              "format": "uri"
            },
            "employmentHistory": {
              "$ref": "#/definitions/EmployerHistoryType"
            }
          }
        }
      },
      "required": [
        "@context",
        "credentialSubject"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionalVerifiableCredentialDataModelBaseType"
        }
      ],
      "definitions": {
        "@ContextType": {
          "description": "HROpen EmploymentHistories-specific ContextType.",
          "type": "array",
          "uniqueItems": true,
          "items": [
            {
              "description": "The @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1.",
              "enum": [
                "https://www.w3.org/2018/credentials/v1"
              ]
            },
            {
              "description": "Context for ProvisionalVerifiableCredentialEmploymentHistoryType.",
              "enum": [
                "http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/ProvisionalVerifiableCredentialEmploymentHistoryType.json"
              ]
            }
          ],
          "additionalItems": {
            "type": "string"
          }
        }
      }
    },
    "SkillType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "SkillType",
      "description": "A Skill.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the skill.",
          "type": "string"
        },
        "yearsOfExperience": {
          "description": "The number of years of experience using the skill.",
          "type": "integer"
        },
        "description": {
          "description": "Simple description of the skill.",
          "type": "string"
        },
        "definitionReference": {
          "description": "Reference (and scheme) to more formal information about the skill than a simple description.",
          "$ref": "#/definitions/RefSchemeType"
        },
        "schemeReference": {
          "description": "Reference and scheme of the skill.",
          "$ref": "#/definitions/RefSchemeType"
        },
        "endorsers": {
          "description": "Endorsers of the skill. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndorserType"
          }
        },
        "keywords": {
          "description": "Keywords",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueType"
          }
        },
        "lastUsedDate": {
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "interestLevel": {
          "description": "A rating of a person's interest. The interest level is expressed as a score, a point scale, or a mark among range of values.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "comments": {
          "description": "Comments",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verifications": {
          "description": "Verifications of the skill.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerificationType"
          }
        }
      }
    },
    "VerifiableCertificationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifiableCertificationType",
      "description": "Verifiable Certification",
      "type": "object",
      "properties": {
        "verifications": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/VerificationsType"
          }
        }
      },
      "required": [
        "verifications"
      ],
      "additionalProperties": false,
      "definitions": {
        "org": {
          "description": "A verifiable Certification with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification of the Certification. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "prov": {
          "description": "A Verifiable Credential (VC) of the type HR Open Certification.",
          "$ref": "#/definitions/ProvisionalVerifiableCredentialLicenseType"
        },
        "1edtob3": {
          "description": "A Verifiable Credential (VC) of the type Open Badge v3, as defined by 1EdTech ( https://www.imsglobal.org/activity/openbadges ).",
          "$ref": "#/definitions/JSON_Schema_for_the_AchievementCredential_class_______________CHANGED_TO_DRAFT4__Removed_dateOfBirth_format___date___not_supported_in_Draft4______________"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        },
        "VerificationsType": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/prov"
            },
            {
              "$ref": "#/definitions/1edtob3"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      }
    },
    "VerifyingOrganizationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifyingOrganizationType",
      "description": "A reference to an organization that can provide verification of a claim (by contacting the organization and/or person identified).",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "verifyingOrganization": {
          "description": "An organization that can provide verification of a claim (by contacting the organization and/or person identified).",
          "$ref": "#/definitions/OrganizationType"
        }
      }
    },
    "ProvisionalVerifiableCredentialEducationAndLearningType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialEducationAndLearningType",
      "$id": "credential-schema-2.0",
      "description": "Provisional Education And Learnings JSON Schema for W3C Verifiable Credential",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionalVerifiableCredentialDataModelBaseType"
        }
      ],
      "properties": {
        "@context": {
          "description": "An ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. The set must contain a URI with the value http://schema.hropenstandards.org/4.5RC/recruiting/json/ler-rs/ProvisionalVerifiableCredentialEducationAndLearningType.json. Subsequent items in the array express context information.",
          "$ref": "#/definitions/@ContextType"
        },
        "credentialSubject": {
          "description": "HROpen Education Attendance claims about the subjects of the credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the only subject of the credential.",
              "type": "string",
              "format": "uri"
            },
            "educationAndLearning": {
              "$ref": "#/definitions/EducationAttendanceType"
            }
          }
        }
      },
      "required": [
        "@context",
        "credentialSubject"
      ],
      "definitions": {
        "@ContextType": {
          "description": "HROpen EducationAndLearnings-specific ContextType.",
          "type": "array",
          "uniqueItems": true,
          "items": [
            {
              "description": "The @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1.",
              "enum": [
                "https://www.w3.org/2018/credentials/v1"
              ]
            },
            {
              "description": "Context for ProvisionalVerifiableCredentialEducationAndLearningType.",
              "enum": [
                "http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/ProvisionalVerifiableCredentialEducationAndLearningType.json"
              ]
            }
          ],
          "additionalItems": {
            "type": "string"
          }
        }
      }
    },
    "VerifiableEmploymentHistoriesType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifiableEmploymentHistoriesType",
      "description": "Verifiable Employment Histories",
      "type": "object",
      "properties": {
        "verifications": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/VerificationsType"
          }
        }
      },
      "required": [
        "verifications"
      ],
      "additionalProperties": false,
      "definitions": {
        "org": {
          "description": "A verifiable employment history with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification of the employment history. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "prov": {
          "description": "A Verifiable Credential (VC) of the type HR Open EmploymentHitory.",
          "$ref": "#/definitions/ProvisionalVerifiableCredentialEmploymentHistoryType"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        },
        "VerificationsType": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/prov"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      }
    },
    "VerifiableSkillType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifiableSkillType",
      "description": "Verifiable Skill",
      "type": "object",
      "properties": {
        "verifications": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/VerificationsType"
          }
        }
      },
      "required": [
        "verifications"
      ],
      "additionalProperties": false,
      "definitions": {
        "org": {
          "description": "A verifiable education attendance with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification of the education attendance. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "1edtob3": {
          "description": "A Verifiable Credential (VC) of the type Open Badge v3, as defined by 1EdTech ( https://www.imsglobal.org/activity/openbadges ).",
          "$ref": "#/definitions/JSON_Schema_for_the_AchievementCredential_class_______________CHANGED_TO_DRAFT4__Removed_dateOfBirth_format___date___not_supported_in_Draft4______________"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        },
        "VerificationsType": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/1edtob3"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      }
    },
    "RefSchemeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "RefSchemeType",
      "description": "A Reference and Scheme",
      "type": "object",
      "properties": {
        "reference": {
          "description": "A URI (uniform resource identifier).",
          "type": "string",
          "format": "uri"
        },
        "scheme": {
          "description": "A URI (uniform resource identifier) of the reference scheme.",
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "reference"
      ],
      "additionalProperties": false
    },
    "ResumePersonBaseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ResumePersonBaseType",
      "description": "Represents common data about a person for a ResumeCV.",
      "type": "object",
      "properties": {
        "legalId": {
          "description": "The legal identifier of a person. The issuer is most likely a country or state.",
          "$ref": "#/definitions/IdentifierType"
        },
        "birthDate": {
          "description": "The birth date of a person.",
          "$ref": "#/definitions/DateType"
        },
        "gender": {
          "description": "The gender of a person.",
          "$ref": "#/definitions/GenderCodeList"
        },
        "citizenship": {
          "description": "The citizenships that a person holds. This is a legal citizenship in a country (as opposed to nationality which may or may not be a country).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCodeList"
          }
        },
        "residenceCountry": {
          "description": "The country (or countries) where a person currently resides.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCodeList"
          }
        },
        "militaryStatus": {
          "description": "The military status of a person.",
          "type": "string"
        },
        "ethnicity": {
          "description": "The ethnicity (or ethnicities) of a person. Ethnicity is an ethnic group or a social group that shares a common and distinctive culture, religion, and/or language.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "primaryLanguage": {
          "description": "This list is based on Internet Engineering Task Force (IETF) RFC 4646 and RFC 4647 for language tags. This tag system is extensible to region, dialect, and private designations. The IANA Language Subtag Registry is a source of the tag values. See http://www.iana.org/assignments/language-subtag-registry",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "name": {
          "description": "Data comprising a person's name.",
          "$ref": "#/definitions/PersonNameType"
        }
      }
    },
    "ProvisionalVerifiableCredentialDataModelBaseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialDataModelBaseType",
      "description": "Base Provisional JSON Schema based on Verifiable Credentials Data Model v1.1 - https://www.w3.org/TR/vc-data-model/",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id property is intended to unambiguously refer to an object, such as a person, product, or organization. Using the id property allows for the expression of statements about specific things in the verifiable credential. The value of the id property MUST be a URI.",
          "type": "string",
          "format": "uri"
        },
        "type": {
          "description": "The value of the type property MUST be, or map to (through interpretation of the @context property), one or more URIs. If more than one URI is provided, the URIs MUST be interpreted as an unordered set.",
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "minLength": 1
          }
        },
        "issuer": {
          "description": "The entity that issued the credential. The value of the issuer property MUST be either a URI or an object containing an id property.",
          "type": "string",
          "minLength": 1
        },
        "expirationDate": {
          "description": "When the credential ceases to be valid.",
          "type": "string",
          "minLength": 1,
          "format": "date-time"
        },
        "issuanceDate": {
          "description": "When the credential was issued.",
          "type": "string",
          "minLength": 1,
          "format": "date-time"
        },
        "credentialSchema": {
          "description": "MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/CredentialSchemaType"
          }
        },
        "credentialStatus": {
          "description": "Information about the current status of a verifiable credential, such as whether it is suspended or revoked.",
          "type": "object",
          "properties": {
            "id": {
              "description": "MUST be a URI of the issuer credential status method.",
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": {
              "description": "Provides enough information to determine the current status of the credential.",
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "refreshService": {
          "description": "MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/RefreshServiceType"
          }
        },
        "evidence": {
          "description": "MUST be one or more evidence schemes providing enough information for a verifier to determine whether the evidence gathered by the issuer meets its confidence requirements for relying on the credential.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/EvidenceType"
          }
        },
        "termsOfUse": {
          "description": "MUST specify one or more terms of use policies under which the creator issued the credential.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/TermsOfUseType"
          }
        },
        "proof": {
          "description": "One or more cryptographic proofs that can be used to detect tampering and verify the authorship of a credential.",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/ProofType"
          }
        }
      },
      "required": [
        "type",
        "issuer",
        "issuanceDate"
      ],
      "definitions": {
        "ProofType": {
          "description": "Digital proof that makes the credential tamper-evident.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The cryptographic signature suite that was used to generate the signature.",
              "type": "string",
              "minLength": 1
            },
            "created": {
              "description": "The date the signature was created.",
              "type": "string",
              "minLength": 1,
              "format": "date-time"
            },
            "verificationMethod": {
              "description": "The identifier of the public key that can verify the signature.",
              "type": "string",
              "minLength": 1
            },
            "proofPurpose": {
              "description": "Purpose of this proof.",
              "type": "string",
              "minLength": 1
            },
            "proofValue": {
              "description": "Value of this proof.",
              "type": "string",
              "minLength": 1
            },
            "challenge": {
              "description": "Challenge and domain protect against replay attacks.",
              "type": "string",
              "minLength": 1
            },
            "domain": {
              "description": "Challenge and domain protect against replay attacks.",
              "type": "string",
              "minLength": 1
            },
            "jws": {
              "description": "The digital signature value.",
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "RefreshServiceType": {
          "description": "Each refreshService value MUST specify its type (for example, ManualRefreshService2018) and its id, which is the URI of the service.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uri"
            },
            "type": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "CredentialSchemaType": {
          "description": "The Type and id URI of identifying the schema.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uri"
            },
            "type": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "EvidenceType": {
          "description": "Each evidence scheme is identified by its type. The id property is optional, but if present, SHOULD contain a URL that points to where more information about this instance of evidence can be found. The precise content of each evidence scheme is determined by the specific evidence type definition.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1
            },
            "type": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "TermsOfUseType": {
          "description": "Each termsOfUse value MUST specify its type, for example, IssuerPolicy, and MAY specify its instance id. The precise contents of each term of use is determined by the specific termsOfUse type definition. ",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "minLength": 1
            },
            "type": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        }
      }
    },
    "VerifiableEducationAttendanceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifiableEducationAttendanceType",
      "description": "Verifiable Education Attendance",
      "type": "object",
      "properties": {
        "verifications": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/VerificationsType"
          }
        }
      },
      "required": [
        "verifications"
      ],
      "additionalProperties": false,
      "definitions": {
        "org": {
          "description": "A verifiable education attendance with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification of the education attendance. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "prov": {
          "description": "A Verifiable Credential (VC) of the type HR Open EducationAndLearning.",
          "$ref": "#/definitions/ProvisionalVerifiableCredentialEducationAndLearningType"
        },
        "1edtob3": {
          "description": "A Verifiable Credential (VC) of the type Open Badge v3, as defined by 1EdTech ( https://www.imsglobal.org/activity/openbadges ).",
          "$ref": "#/definitions/JSON_Schema_for_the_AchievementCredential_class_______________CHANGED_TO_DRAFT4__Removed_dateOfBirth_format___date___not_supported_in_Draft4______________"
        },
        "1edtclr2": {
          "description": "A Verifiable Credential (VC) of the type Comprehensive Learner Record v2, as defined by 1EdTech ( https://www.imsglobal.org/activity/comprehensive-learner-record ).",
          "$ref": "#/definitions/JSON_Schema_for_the_ClrCredential_class_"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        },
        "VerificationsType": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/prov"
            },
            {
              "$ref": "#/definitions/1edtob3"
            },
            {
              "$ref": "#/definitions/1edtclr2"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      }
    },
    "VerificationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerificationType",
      "description": "A Verification.",
      "type": "object",
      "properties": {
        "Verification": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      },
      "definitions": {
        "org": {
          "description": "A verification with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        }
      }
    },
    "ProvisionalVerifiableCredentialLicenseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialLicenseType",
      "$id": "credential-schema-2.0",
      "description": "Provisional License JSON Schema for W3C Verifiable Credential",
      "type": "object",
      "properties": {
        "@context": {
          "description": "An ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. The set must contain a URI with the value http://schema.hropenstandards.org/4.5RC/recruiting/json/ler-rs/ProvisionalVerifiableCredentialLicenseType.json. Subsequent items in the array express context information.",
          "$ref": "#/definitions/@ContextType"
        },
        "credentialSubject": {
          "description": "HROpen License claims about the subjects of the credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the only subject of the credential.",
              "type": "string",
              "format": "uri"
            },
            "license": {
              "$ref": "#/definitions/LicenseType"
            }
          }
        }
      },
      "required": [
        "@context",
        "credentialSubject"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionalVerifiableCredentialDataModelBaseType"
        }
      ],
      "definitions": {
        "@ContextType": {
          "description": "HROpen License-specific ContextType.",
          "type": "array",
          "uniqueItems": true,
          "items": [
            {
              "description": "The @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1.",
              "enum": [
                "https://www.w3.org/2018/credentials/v1"
              ]
            },
            {
              "description": "Context for ProvisionalVerifiableCredentialLicenseType.",
              "enum": [
                "http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/ProvisionalVerifiableCredentialLicenseType.json"
              ]
            }
          ],
          "additionalItems": {
            "type": "string"
          }
        }
      }
    },
    "NameValueType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "NameValueType",
      "description": "Classic Name-Value. Cane beused as a keyword where only the name is present.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "value": {
          "description": "The value.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "VerifiableLicenseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "VerifiableLicenseType",
      "description": "Verifiable License",
      "type": "object",
      "properties": {
        "verifications": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/VerificationsType"
          }
        }
      },
      "required": [
        "verifications"
      ],
      "additionalProperties": false,
      "definitions": {
        "org": {
          "description": "A verifiable License with information from a verifying organization. Note that this is not a Verifiable Credential (VC).",
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "ref": {
          "description": "A external reference to a verification of the License. Note that this may or may not be a reference to a Verifiable Credential (VC).",
          "$ref": "#/definitions/RefSchemeType"
        },
        "prov": {
          "description": "A Verifiable Credential (VC) of the type HR Open License.",
          "$ref": "#/definitions/ProvisionalVerifiableCredentialLicenseType"
        },
        "1edtob3": {
          "description": "A Verifiable Credential (VC) of the type Open Badge v3, as defined by 1EdTech ( https://www.imsglobal.org/activity/openbadges ).",
          "$ref": "#/definitions/JSON_Schema_for_the_AchievementCredential_class_______________CHANGED_TO_DRAFT4__Removed_dateOfBirth_format___date___not_supported_in_Draft4______________"
        },
        "other": {
          "description": "A Verifiable Credential (VC) of any type.",
          "$ref": "#/definitions/OtherW3CVerifiableCredentialType"
        },
        "VerificationsType": {
          "oneOf": [
            {
              "$ref": "#/definitions/org"
            },
            {
              "$ref": "#/definitions/ref"
            },
            {
              "$ref": "#/definitions/prov"
            },
            {
              "$ref": "#/definitions/1edtob3"
            },
            {
              "$ref": "#/definitions/other"
            }
          ]
        }
      }
    },
    "NarrativeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "NarrativeType",
      "description": "A named set of texts, which may have a reference to the definition of the narrative and keywords.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name for the narrative.",
          "type": "string"
        },
        "definitionReference": {
          "description": "Reference (and scheme) to more information on the narrative.",
          "$ref": "#/definitions/RefSchemeType"
        },
        "keywords": {
          "description": "Keywords about the narrative.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueType"
          }
        },
        "texts": {
          "description": "Named text of the narrative.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StringArrayRefSchemeType"
          }
        }
      },
      "required": [
        "name",
        "texts"
      ]
    },
    "EndorserType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "EndorserType",
      "description": "An Endorser, which can be an individual and/or an organization, as defined in https://github.com/WebOfTrustInfo/rwot11-the-hague/blob/master/advance-readings/endorsements.md",
      "type": "object",
      "properties": {
        "person": {
          "description": "The person who is making an endorsement.",
          "$ref": "#/definitions/ResumePersonBaseType"
        },
        "organization": {
          "description": "The organization that is making an endorsement.",
          "$ref": "#/definitions/OrganizationType"
        },
        "comments": {
          "description": "Comments related to the endorsement being made by the endorser.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "oneOf": [
        {
          "required": [
            "person"
          ]
        },
        {
          "required": [
            "organization"
          ]
        }
      ]
    },
    "OtherW3CVerifiableCredentialType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "OtherW3CVerifiableCredentialType",
      "description": "A W3C Verifiable Credential.",
      "type": "object",
      "properties": {
        "otherW3CVerifiableCredential": {
          "description": "A W3C Verifiable Credential (VC). This required property is unconstained.",
          "type": "object"
        }
      },
      "required": [
        "otherW3CVerifiableCredential"
      ],
      "additionalProperties": false
    },
    "StringArrayRefSchemeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "StringArrayRefSchemeType",
      "description": " ",
      "type": "object",
      "properties": {
        "name": {
          "description": " ",
          "type": "string"
        },
        "lines": {
          "description": " ",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "refScheme": {
          "description": "reference and scheme.",
          "$ref": "#/definitions/RefSchemeType"
        }
      },
      "required": [
        "lines"
      ]
    },
    "ProvisionalVerifiableCredentialCertificationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "ProvisionalVerifiableCredentialCertificationType",
      "$id": "credential-schema-2.0",
      "description": "Provisional Certification JSON Schema for W3C Verifiable Credential",
      "type": "object",
      "properties": {
        "@context": {
          "description": "An ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1. The set must contain a URI with the value http://schema.hropenstandards.org/4.5RC/recruiting/json/ler-rs/ProvisionalVerifiableCredentialCertificationType.json. Subsequent items in the array express context information.",
          "$ref": "#/definitions/@ContextType"
        },
        "credentialSubject": {
          "description": "HROpen Certification claims about the subjects of the credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the only subject of the credential.",
              "type": "string",
              "format": "uri"
            },
            "certification": {
              "$ref": "#/definitions/CertificationType"
            }
          }
        }
      },
      "required": [
        "@context",
        "credentialSubject"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProvisionalVerifiableCredentialDataModelBaseType"
        }
      ],
      "definitions": {
        "@ContextType": {
          "description": "HROpen Certification-specific ContextType.",
          "type": "array",
          "uniqueItems": true,
          "items": [
            {
              "description": "The @context property MUST be an ordered set where the first item is a URI with the value https://www.w3.org/2018/credentials/v1.",
              "enum": [
                "https://www.w3.org/2018/credentials/v1"
              ]
            },
            {
              "description": "Context for ProvisionalVerifiableCredentialCertificationType.",
              "enum": [
                "http://schema.hropenstandards.org/4.4/recruiting/json/ler-rs/ProvisionalVerifiableCredentialCertificationType.json"
              ]
            }
          ],
          "additionalItems": {
            "type": "string"
          }
        }
      }
    },
    "TravelType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "TravelType",
      "description": "Information regarding travel - preferences or necessities.",
      "type": "object",
      "properties": {
        "willingToTravelIndicator": {
          "description": "Indicates that a person is willing to travel within the capacity of his or her position.",
          "$ref": "#/definitions/IndicatorType"
        },
        "percentage": {
          "description": "The percentage of time required (or willing) to travel for a position. For example, a person needs (or is willing) to travel 25% of his or her regularly scheduled hours.",
          "$ref": "#/definitions/PercentType"
        },
        "descriptions": {
          "description": "Text describing any special travel preferences or considerations.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "RemoteWorkType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "RemoteWorkType",
      "description": "Represents the remote work specification.",
      "type": "object",
      "properties": {
        "remoteWorkIndicator": {
          "description": "Indicator for remote work is available to employee.",
          "type": "boolean"
        },
        "workLocationCodes": {
          "description": "A list of codes defining work locations allowed for or desired for remote work.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkLocationCodeList"
          }
        },
        "restrictionCodes": {
          "description": "A list of codes defining the scope of restrictions of work locations allowed for or desired for remote work.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestrictionCodeList"
          }
        },
        "remoteEligibilityRequirement": {
          "description": "The requirements of the remote work for a candidate. This could include having a computer, internet access, a quiet or private office environment, etc.",
          "type": "string"
        },
        "restrictionDetails": {
          "description": "The details related to the RestrictionCode that help to describe the specifics of the remote work restriction.",
          "type": "string"
        }
      },
      "definitions": {
        "WorkLocationCodeList": {
          "title": "WorkLocationCodeList",
          "description": "A code classifying the role of an entity or the role with which that entity is associated. 'Home' allows for work at a candidate's home. 'Virtual' allows for work in any location that is not provided by the company (i.e. airport, coffee shop). 'Colocation' would be for remote office or shared office environment near the candidate.",
          "enum": [
            "Home",
            "Virtual",
            "Colocation"
          ]
        },
        "RestrictionCodeList": {
          "title": "RestrictionCodeList",
          "description": "A code classifying the restriction of the remote work to a particular region or time zone. 'Local' typically refers to a city or small area. 'Regional' refers to a state, province or official territory. 'Timezone' refers to a restriction based on time zone. 'Country' refers to a restriction in one or more countries. 'Territory' refers to a defined area by the company. 'Other' means a restriction not defined by the other choices. If there are no restrictions, use 'None'. The details of the restriction should be specified in 'RestrictionDetails'.",
          "enum": [
            "Local",
            "Regional",
            "Timezone",
            "Country",
            "Territory",
            "Other"
          ]
        }
      }
    },
    "PositionPreferenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "PositionPreferenceType",
      "description": "Contains a collection of information about a candidate's preferences in an ideal position or role.",
      "type": "object",
      "properties": {
        "locations": {
          "description": "A list of locations which are preferred to the candidate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PreferredLocationType"
          }
        },
        "jobCategories": {
          "description": "A list of job categories which are preferred to the candidate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityType"
          }
        },
        "positionTitles": {
          "description": "A list of position titles which are preferred to the candidate.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "positionOfferingTypeCodes": {
          "description": "These are values that are descriptive in classifying a position within advertising or communications of a position opportunity or offering. Note that these classifications are useful within advertising, but they are not precise classes useful internally to drive pay, benefits, and HR compliance. This is an enumerated list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionTypeCodeList"
          }
        },
        "positionScheduleTypeCodes": {
          "description": "Values that classify the working schedule of a position offered or a position sought. Essentially, whether a position offered or sought is full-time or part-time or has provision for flexible scheduling. Intended to classify schedule position preferences of a candidate or conversely employer preferences or requirements related to candidates with respect to an advertised position. Used in the context of matching candidates to positions. This is an enumerated list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionScheduleTypeCodeList"
          }
        },
        "shiftSchedules": {
          "description": "In detail specification of shift schedules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleType"
          }
        },
        "shiftDescriptions": {
          "description": "A list of shifts which are preferred to the candidate.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "remoteWork": {
          "description": "The preference for remote work requirement.",
          "$ref": "#/definitions/RemoteWorkType"
        },
        "careerLevelCodes": {
          "description": "A list of career levels which are preferred to the candidate. This describes the experience level, management level, or other levels of measuring a career.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CareerLevelCodeList"
          }
        },
        "jobGradeCode": {
          "description": "A job grade code for the position. This would be defined by a company, union, or industry.",
          "$ref": "#/definitions/EntityType"
        },
        "offeredRemunerationPackage": {
          "description": "The preference for remuneration (including salary or hourly rate, benefits) for a position.",
          "$ref": "#/definitions/RemunerationPackageType"
        },
        "travel": {
          "description": "Information regarding travel preferences of a person seeking a job.",
          "$ref": "#/definitions/TravelType"
        },
        "relocation": {
          "description": "Indicates if a candidate would consider moving to a new city or location for a suitable position.",
          "$ref": "#/definitions/RelocationType"
        },
        "workingLanguageCodes": {
          "description": "A code classifying the language or languages used within the workplace or associated with work. This is intended to communicate general information about the language(s) used within the work environment or correspondingly general information about a candidate's specific language preferences. This component might be offered as descriptive 'pre-qualification' information on a position announcement. It might appear within the context of a Candidate Profile as a general statement of a candidate's general language capabilities or preferences. WorkingLanguageCode is not intended as a statement of language proficiency or specific requirement relating to language proficiency. Specific information regarding language proficiency should be covered either within PersonCompetency or PositionCompetency as may be appropriate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageCodeList"
          }
        }
      },
      "definitions": {
        "PreferredLocationType": {
          "title": "PreferredLocationType",
          "description": "Contains a collection of information about a candidate's preferences in the location of a position.",
          "type": "object",
          "properties": {
            "maximumCommuteDuration": {
              "$ref": "#/definitions/MeasureType"
            },
            "maximumCommuteDistance": {
              "$ref": "#/definitions/MeasureType"
            },
            "referenceLocation": {
              "$ref": "#/definitions/AddressType"
            }
          }
        }
      }
    },
    "RelocationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "RelocationType",
      "description": "Information about relocation.",
      "type": "object",
      "properties": {
        "willingToRelocateIndicator": {
          "description": "Indicates whether relocation is an option for the candidate or considered by the hiring company.",
          "$ref": "#/definitions/IndicatorType"
        },
        "descriptions": {
          "description": "Text describing any special considerations about relocation.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "EmployerPreferenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.4",
      "title": "EmployerPreferenceType",
      "description": "Contains a collection of information about a candidate's preferences in an ideal employer or company.",
      "type": "object",
      "properties": {
        "organizationNames": {
          "description": "A list of organization names which are preferred to the candidate.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "organizationTypes": {
          "description": "A list of organization types (such as public, non-profit) which are preferred to the candidate.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "industryCodes": {
          "description": "A list of industry codes which are preferred to the candidate.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "headcountRange": {
          "description": "A measure of size of a company based on the number of employees (headcount). This range is inclusive of the minimum and maximum number.",
          "type": "object",
          "properties": {
            "minimum": {
              "type": "number"
            },
            "maximum": {
              "type": "number"
            }
          },
          "minProperties": 1
        },
        "descriptions": {
          "description": "A list of text descriptions of the candidate preferences for an employer.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "RecruitingDocumentStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RecruitingDocumentStatusCodeList",
      "description": "Values that describe the disposition of a position opening document.",
      "enum": [
        "Active",
        "Closed",
        "Incomplete",
        "OnHold"
      ]
    },
    "CandidateRelationshipCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CandidateRelationshipCodeList",
      "description": "Values that classify the relationship of a candidate to a (potential) employer.",
      "enum": [
        "Applicant",
        "Employee",
        "Intern",
        "Alumnus",
        "Contractor",
        "VendorEmployee",
        "RelatedCompanyEmployee"
      ]
    },
    "ApprovalStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ApprovalStatusCodeList",
      "description": "Values that describe the status of an approval process.",
      "enum": [
        "InReview",
        "Approved",
        "NotApproved"
      ]
    },
    "PostingRequesterRoleCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PostingRequesterRoleCodeList",
      "description": "Values that describe the roles of job posting requesters.",
      "enum": [
        "Company",
        "Agency"
      ]
    },
    "JSON_Schema_for_the_AchievementCredential_class_______________CHANGED_TO_DRAFT4__Removed_dateOfBirth_format___date___not_supported_in_Draft4______________": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$id": "https://purl.imsglobal.org/spec/ob/v3p0/schema/json/ob_v3p0_achievementcredential_schema.json",
      "title": "JSON Schema for the AchievementCredential class. *************CHANGED TO DRAFT4. Removed dateOfBirth format = date - not supported in Draft4 *************",
      "description": "AchievementCredentials are representations of an awarded achievement, used to share information about a achievement belonging to one earner. Maps to a Verifiable Credential as defined in the [[VC-DATA-MODEL]]. As described in [[[#proofs-signatures]]], at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the `proof` property.",
      "type": "object",
      "properties": {
        "@context": {
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "The value of the `@context` property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/2018/credentials/v1', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context/ob_v3p0.jsonld'.",
            "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
            "type": "string"
          }
        },
        "id": {
          "description": "Unambiguous reference to the credential.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string"
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'AchievementCredential' or the URI 'OpenBadgeCredential'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'AchievementCredential' or the URI 'OpenBadgeCredential'.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string"
              }
            }
          ]
        },
        "name": {
          "description": "The name of the credential for display purposes in wallets. For example, in a list of credentials and in detail views.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string"
        },
        "description": {
          "description": "The short description of the credential for display purposes in wallets.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string"
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "credentialSubject": {
          "$ref": "#/$defs/AchievementSubject"
        },
        "endorsement": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EndorsementCredential"
          }
        },
        "endorsementJwt": {
          "type": "array",
          "items": {
            "description": "Allows endorsers to make specific claims about the credential, and the achievement and profiles in the credential. These endorsements are signed with the VC-JWT proof format.",
            "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
          }
        },
        "evidence": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Evidence"
          }
        },
        "issuer": {
          "$ref": "#/$defs/Profile"
        },
        "issuanceDate": {
          "description": "Timestamp of when the credential was awarded.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "proof": {
          "oneOf": [
            {
              "$ref": "#/$defs/Proof"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Proof"
              }
            }
          ]
        },
        "credentialSchema": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/CredentialSchema"
          }
        },
        "credentialStatus": {
          "$ref": "#/$defs/CredentialStatus"
        },
        "refreshService": {
          "$ref": "#/$defs/RefreshService"
        }
      },
      "required": [
        "@context",
        "id",
        "type",
        "name",
        "credentialSubject",
        "issuer",
        "issuanceDate"
      ],
      "additionalProperties": true,
      "$defs": {
        "CredentialStatus": {
          "description": "The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be the URL of the issuer's credential status method.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The name of the credential status method.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "AchievementSubject": {
          "description": "A collection of information about the recipient of an achievement. Maps to Credential Subject in [[VC-DATA-MODEL]].",
          "type": "object",
          "properties": {
            "id": {
              "description": "An identifier for the Credential Subject. Either `id` or at least one `identifier` MUST be supplied.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'AchievementSubject'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'AchievementSubject'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "activityEndDate": {
              "description": "The datetime the activity ended.",
              "$comment": "Origin: DateTime (PrimitiveType); An [[ISO8601]] time using the syntax YYYY-MM-DDThh:mm:ss.",
              "type": "string",
              "format": "date-time"
            },
            "activityStartDate": {
              "description": "The datetime the activity started.",
              "$comment": "Origin: DateTime (PrimitiveType); An [[ISO8601]] time using the syntax YYYY-MM-DDThh:mm:ss.",
              "type": "string",
              "format": "date-time"
            },
            "creditsEarned": {
              "description": "The number of credits earned, generally in semester or quarter credit hours. This field correlates with the Achievement `creditsAvailable` field.",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            },
            "achievement": {
              "$ref": "#/$defs/Achievement"
            },
            "identifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentityObject"
              }
            },
            "image": {
              "$ref": "#/$defs/Image"
            },
            "licenseNumber": {
              "description": "The license number that was issued with this credential.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "narrative": {
              "description": "A narrative that connects multiple pieces of evidence. Likely only present at this location if evidence is a multi-value array.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            },
            "result": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Result"
              }
            },
            "role": {
              "description": "Role, position, or title of the learner when demonstrating or performing the achievement or evidence of learning being asserted. Examples include 'Student President', 'Intern', 'Captain', etc.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "source": {
              "$ref": "#/$defs/Profile"
            },
            "term": {
              "description": "The academic term in which this assertion was achieved.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "type",
            "achievement"
          ],
          "additionalProperties": false
        },
        "IdentityObject": {
          "description": "A collection of information about the recipient of an achievement.",
          "type": "object",
          "properties": {
            "type": {
              "description": "MUST be the IRI 'IdentityObject'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "hashed": {
              "description": "Whether or not the `identityHash` value is hashed.",
              "$comment": "Origin: Boolean (PrimitiveType); A boolean, expressed as `true` or `false`",
              "type": "boolean"
            },
            "identityHash": {
              "description": "Either the IdentityHash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used.",
              "$comment": "Origin: IdentityHash (DerivedType); A hash string containing an algorithm identifier and a resulting hash of an identifier, separated by a dollar sign ('$') and the algorithm used to generate the hash. The only supported algorithms are MD5 [[RFC1321]] and SHA-256 [[FIPS-180-4]], identified by the strings md5 and sha256 respectively. Resulting hash for each of these algorithms MUST be expressed in hexadecimal using uppercase (A-F, 0-9) or lowercase character (a-f, 0-9) sets. For example: sha256$7a1a1b3f7d40552e4299180e346e3add12bf9a751a43d9c4ca4518febc2c60c6 represents the result of calculating a SHA-256 hash on the string 'mayze'.",
              "type": "string"
            },
            "identityType": {
              "description": "The identity type.",
              "$comment": "Origin: IdentifierTypeEnum (EnumExt)",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "sourcedId",
                    "systemId",
                    "productId",
                    "userName",
                    "accountId",
                    "emailAddress",
                    "nationalIdentityNumber",
                    "isbn",
                    "issn",
                    "lisSourcedId",
                    "oneRosterSourcedId",
                    "sisSourcedId",
                    "ltiContextId",
                    "ltiDeploymentId",
                    "ltiToolId",
                    "ltiPlatformId",
                    "ltiUserId",
                    "identifier"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "salt": {
              "description": "If the `identityHash` is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "type",
            "hashed",
            "identityHash",
            "identityType"
          ],
          "additionalProperties": false
        },
        "Evidence": {
          "description": "Descriptive metadata about evidence related to the achievement assertion. Each instance of the evidence class present in an assertion corresponds to one entity, though a single entry can describe a set of items collectively. There may be multiple evidence entries referenced from an assertion. The narrative property is also in scope of the assertion class to provide an overall description of the achievement related to the assertion in rich text. It is used here to provide a narrative of achievement of the specific entity described. If both the description and narrative properties are present, displayers can assume the narrative value goes into more detail and is not simply a recapitulation of description.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The URL of a webpage presenting evidence of achievement or the evidence encoded as a Data URI. The schema of the webpage is undefined.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Evidence'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Evidence'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "narrative": {
              "description": "A narrative that describes the evidence and process of achievement that led to an assertion.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            },
            "name": {
              "description": "A descriptive title of the evidence.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "description": {
              "description": "A longer description of the evidence.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "genre": {
              "description": "A string that describes the type of evidence. For example, Poetry, Prose, Film.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "audience": {
              "description": "A description of the intended audience for a piece of evidence.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "EndorsementCredential": {
          "description": "A verifiable credential that asserts a claim about an entity. As described in [[[#proofs-signatures]]], at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the `proof` property.",
          "type": "object",
          "properties": {
            "@context": {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the `@context` property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/2018/credentials/v1', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context/ob_v3p0.jsonld'.",
                "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
                "type": "string"
              }
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "id": {
              "description": "Unambiguous reference to the credential.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "credentialSubject": {
              "$ref": "#/$defs/EndorsementSubject"
            },
            "issuer": {
              "$ref": "#/$defs/Profile"
            },
            "issuanceDate": {
              "description": "Timestamp of when the credential was awarded.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "expirationDate": {
              "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "proof": {
              "oneOf": [
                {
                  "$ref": "#/$defs/Proof"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/Proof"
                  }
                }
              ]
            },
            "credentialSchema": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CredentialSchema"
              }
            },
            "credentialStatus": {
              "$ref": "#/$defs/CredentialStatus"
            },
            "refreshService": {
              "$ref": "#/$defs/RefreshService"
            }
          },
          "required": [
            "@context",
            "type",
            "id",
            "credentialSubject",
            "issuer",
            "issuanceDate"
          ],
          "additionalProperties": false
        },
        "Achievement": {
          "description": "A collection of information about the accomplishment recognized by the Assertion. Many assertions may be created corresponding to one Achievement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique URI for the Achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "No description supplied.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "No description supplied.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "achievementType": {
              "description": "The type of achievement. This is an extensible vocabulary.",
              "$comment": "Origin: AchievementType (EnumExt); The type of achievement, for example 'Award' or 'Certification'. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "Achievement",
                    "ApprenticeshipCertificate",
                    "Assessment",
                    "Assignment",
                    "AssociateDegree",
                    "Award",
                    "Badge",
                    "BachelorDegree",
                    "Certificate",
                    "CertificateOfCompletion",
                    "Certification",
                    "CommunityService",
                    "Competency",
                    "Course",
                    "CoCurricular",
                    "Degree",
                    "Diploma",
                    "DoctoralDegree",
                    "Fieldwork",
                    "GeneralEducationDevelopment",
                    "JourneymanCertificate",
                    "LearningProgram",
                    "License",
                    "Membership",
                    "ProfessionalDoctorate",
                    "QualityAssuranceCredential",
                    "MasterCertificate",
                    "MasterDegree",
                    "MicroCredential",
                    "ResearchDoctorate",
                    "SecondarySchoolDiploma"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "creator": {
              "$ref": "#/$defs/Profile"
            },
            "creditsAvailable": {
              "description": "Credit hours associated with this entity, or credit hours possible. For example 3.0.",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            },
            "criteria": {
              "$ref": "#/$defs/Criteria"
            },
            "description": {
              "description": "A short description of the achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "endorsement": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EndorsementCredential"
              }
            },
            "endorsementJwt": {
              "type": "array",
              "items": {
                "description": "Allows endorsers to make specific claims about the Achievement. These endorsements are signed with the VC-JWT proof format.",
                "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
              }
            },
            "fieldOfStudy": {
              "description": "Category, subject, area of study, discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "humanCode": {
              "description": "The code, generally human readable, associated with an achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "image": {
              "$ref": "#/$defs/Image"
            },
            "@language": {
              "description": "The language of the achievement.",
              "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
              "type": "string",
              "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
            },
            "name": {
              "description": "The name of the achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "otherIdentifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentifierEntry"
              }
            },
            "related": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Related"
              }
            },
            "resultDescription": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ResultDescription"
              }
            },
            "specialization": {
              "description": "Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include 'Entrepreneurship', 'Technical Communication', and 'Finance'.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "tag": {
              "type": "array",
              "items": {
                "description": "Tags that describes the type of achievement.",
                "$comment": "Origin: String (PrimitiveType); Character strings.",
                "type": "string"
              }
            },
            "version": {
              "description": "The version property allows issuers to set a version string for an Achievement. This is particularly useful when replacing a previous version with an update.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "criteria",
            "description",
            "name"
          ],
          "additionalProperties": true
        },
        "Alignment": {
          "description": "Describes an alignment between an achievement and a node in an educational framework.",
          "type": "object",
          "properties": {
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "targetCode": {
              "description": "If applicable, a locally unique string identifier that identifies the alignment target within its framework and/or targetUrl.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetDescription": {
              "description": "Short description of the alignment target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetName": {
              "description": "Name of the alignment.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetFramework": {
              "description": "Name of the framework the alignment target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetType": {
              "description": "The type of the alignment target node.",
              "$comment": "Origin: AlignmentTargetType (EnumExt); The type of the alignment target node in the target framework.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "ceasn:Competency",
                    "ceterms:Credential",
                    "CFItem",
                    "CFRubric",
                    "CFRubricCriterion",
                    "CFRubricCriterionLevel",
                    "CTDL"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "targetUrl": {
              "description": "URL linking to the official description of the alignment target, for example an individual standard within an educational framework.",
              "$comment": "Origin: URL (DerivedType); A `URI` that represents a Uniform Resource Locator (URL).",
              "type": "string"
            }
          },
          "required": [
            "type",
            "targetName",
            "targetUrl"
          ],
          "additionalProperties": true
        },
        "Criteria": {
          "description": "Descriptive metadata about the achievements necessary to be recognized with an assertion of a particular achievement. This data is added to the Achievement class so that it may be rendered when the achievement assertion is displayed, instead of simply a link to human-readable criteria external to the achievement. Embedding criteria allows either enhancement of an external criteria page or increased portability and ease of use by allowing issuers to skip hosting the formerly-required external criteria page altogether. Criteria is used to allow would-be recipients to learn what is required of them to be recognized with an assertion of a particular achievement. It is also used after the assertion is awarded to a recipient to let those inspecting earned achievements know the general requirements that the recipients met in order to earn it.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The URI of a webpage that describes in a human-readable format the criteria for the achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "narrative": {
              "description": "A narrative of what is needed to earn the achievement. Markdown is allowed.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            }
          },
          "required": [],
          "additionalProperties": true
        },
        "IdentifierEntry": {
          "description": "No description supplied.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'IdentifierEntry'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "identifier": {
              "description": "An identifier.",
              "$comment": "Origin: Identifier (DerivedType); A `NormalizedString` that functions as an identifier.",
              "type": "string"
            },
            "identifierType": {
              "description": "The identifier type.",
              "$comment": "Origin: IdentifierTypeEnum (EnumExt)",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "sourcedId",
                    "systemId",
                    "productId",
                    "userName",
                    "accountId",
                    "emailAddress",
                    "nationalIdentityNumber",
                    "isbn",
                    "issn",
                    "lisSourcedId",
                    "oneRosterSourcedId",
                    "sisSourcedId",
                    "ltiContextId",
                    "ltiDeploymentId",
                    "ltiToolId",
                    "ltiPlatformId",
                    "ltiUserId",
                    "identifier"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            }
          },
          "required": [
            "type",
            "identifier",
            "identifierType"
          ],
          "additionalProperties": false
        },
        "Proof": {
          "description": "A JSON-LD Linked Data proof.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Signature suite used to produce proof.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "created": {
              "description": "Date the proof was created.",
              "$comment": "Origin: DateTime (PrimitiveType); An [[ISO8601]] time using the syntax YYYY-MM-DDThh:mm:ss.",
              "type": "string",
              "format": "date-time"
            },
            "challenge": {
              "description": "A value chosen by the verifier to mitigate authentication proof replay attacks.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the proof to restrict its use to a particular target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "nonce": {
              "description": "A value chosen by the creator of proof to randomize proof values for privacy purposes.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "proofPurpose": {
              "description": "The purpose of the proof to be used with `verificationMethod`. MUST be 'assertionMethod'.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "proofValue": {
              "description": "Value of the proof.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "verificationMethod": {
              "description": "The URL of the public key that can verify the signature.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "RefreshService": {
          "description": "The information in RefreshService is used to refresh the verifiable credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be the URL of the issuer's refresh service.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The name of the refresh service method.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": true
        },
        "Image": {
          "description": "Metadata about images that represent assertions, achieve or profiles. These properties can typically be represented as just the id string of the image, but using a fleshed-out document allows for including captions and other applicable metadata.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The URI or Data URI of the image.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "MUST be the IRI 'Image'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "caption": {
              "description": "The caption for the image.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "EndorsementSubject": {
          "description": "A collection of information about the subject of the endorsement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the individual, entity, organization, assertion, or achievement that is endorsed.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "endorsementComment": {
              "description": "Allows endorsers to make a simple claim in writing about the entity.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "Result": {
          "description": "Describes a result that was achieved.",
          "type": "object",
          "properties": {
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Result'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Result'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "achievedLevel": {
              "description": "If the result represents an achieved rubric criterion level (e.g. Mastered), the value is the `id` of the RubricCriterionLevel in linked ResultDescription.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "resultDescription": {
              "description": "An achievement can have many result descriptions describing possible results. The value of `resultDescription` is the `id` of the result description linked to this result. The linked result description must be in the achievement that is being asserted.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "status": {
              "description": "The status of the achievement. Required if `resultType` of the linked ResultDescription is Status.",
              "$comment": "Origin: ResultStatusType (Enumeration); Defined vocabulary to convey the status of an achievement.",
              "type": "string",
              "enum": [
                "Completed",
                "Enrolled",
                "Failed",
                "InProgress",
                "OnHold",
                "Withdrew"
              ]
            },
            "value": {
              "description": "A string representing the result of the performance, or demonstration, of the achievement. For example, 'A' if the recipient received an A grade in class.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "ResultDescription": {
          "description": "Describes a possible achievement result.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique URI for this result description. Required so a result can link to this result description.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "allowedValue": {
              "type": "array",
              "items": {
                "description": "An ordered list of allowed values. The values should be ordered from low to high as determined by the achievement creator.",
                "$comment": "Origin: String (PrimitiveType); Character strings.",
                "type": "string"
              }
            },
            "name": {
              "description": "The name of the result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "requiredLevel": {
              "description": "The `id` of the rubric criterion level required to pass as determined by the achievement creator.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "requiredValue": {
              "description": "A value from `allowedValue` or within the range of `valueMin` to `valueMax` required to pass as determined by the achievement creator.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "resultType": {
              "description": "The type of result this description represents. This is an extensible enumerated vocabulary.",
              "$comment": "Origin: ResultType (EnumExt); The type of result. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "GradePointAverage",
                    "LetterGrade",
                    "Percent",
                    "PerformanceLevel",
                    "PredictedScore",
                    "RawScore",
                    "Result",
                    "RubricCriterion",
                    "RubricCriterionLevel",
                    "RubricScore",
                    "ScaledScore",
                    "Status"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "rubricCriterionLevel": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/RubricCriterionLevel"
              }
            },
            "valueMax": {
              "description": "The maximum possible `value` that may be asserted in a linked result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "valueMin": {
              "description": "The minimum possible `value` that may be asserted in a linked result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "name",
            "resultType"
          ],
          "additionalProperties": true
        },
        "RubricCriterionLevel": {
          "description": "Describes a rubric criterion level.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique URI for this rubric criterion level. Required so a result can link to this rubric criterion level.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "description": {
              "description": "Description of the rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "level": {
              "description": "The rubric performance level in terms of success.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "name": {
              "description": "The name of the rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "points": {
              "description": "The points associated with this rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "name"
          ],
          "additionalProperties": true
        },
        "Related": {
          "description": "Identifies a related achievement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The related achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "@language": {
              "description": "The language of the related achievement.",
              "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
              "type": "string",
              "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
            },
            "version": {
              "description": "The version of the related achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "Profile": {
          "description": "A Profile is a collection of information that describes the entity or organization using Open Badges. Issuers must be represented as Profiles, and recipients, endorsers, or other entities may also be represented using this vocabulary. Each Profile that represents an Issuer may be referenced in many BadgeClasses that it has defined. Anyone can create and host an Issuer file to start issuing Open Badges. Issuers may also serve as recipients of Open Badges, often identified within an Assertion by specific properties, like their url or contact email address.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique URI for the Issuer/Profile file.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "name": {
              "description": "The name of the entity or organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "url": {
              "description": "The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "phone": {
              "description": "A phone number.",
              "$comment": "Origin: PhoneNumber (DerivedType); A `NormalizedString` representing a phone number.",
              "type": "string"
            },
            "description": {
              "description": "A short description of the issuer entity or organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "endorsement": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EndorsementCredential"
              }
            },
            "endorsementJwt": {
              "type": "array",
              "items": {
                "description": "Allows endorsers to make specific claims about the individual or organization represented by this profile. These endorsements are signed with the VC-JWT proof format.",
                "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
              }
            },
            "image": {
              "$ref": "#/$defs/Image"
            },
            "email": {
              "description": "An email address.",
              "$comment": "Origin: EmailAddress (DerivedType); A `NormalizedString` representing an email address.",
              "type": "string"
            },
            "address": {
              "$ref": "#/$defs/Address"
            },
            "otherIdentifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentifierEntry"
              }
            },
            "official": {
              "description": "If the entity is an organization, `official` is the name of an authorized official of the organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "parentOrg": {
              "$ref": "#/$defs/Profile"
            },
            "familyName": {
              "description": "Family name. In the western world, often referred to as the 'last name' of a person.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "givenName": {
              "description": "Given name. In the western world, often referred to as the 'first name' of a person.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "additionalName": {
              "description": "Additional name. Includes what is often referred to as 'middle name' in the western world.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "patronymicName": {
              "description": "Patronymic name.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "honorificPrefix": {
              "description": "Honorific prefix(es) preceding a person's name (e.g. 'Dr', 'Mrs' or 'Mr').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "honorificSuffix": {
              "description": "Honorific suffix(es) following a person's name (e.g. 'M.D, PhD').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "familyNamePrefix": {
              "description": "Family name prefix. As used in some locales, this is the leading part of a family name (e.g. 'de' in the name 'de Boer').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "dateOfBirth": {
              "description": "No description supplied.",
              "$comment": "Origin: Date (PrimitiveType); An [[ISO8601]] calendar date using the syntax YYYY-MM-DD.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": true
        },
        "Address": {
          "description": "An address for the described entity.",
          "type": "object",
          "properties": {
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "addressCountry": {
              "description": "A country.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "addressCountryCode": {
              "description": "A country code. The value must be a ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
              "$comment": "Origin: CountryCode (DerivedType); A two-digit ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
              "type": "string"
            },
            "addressRegion": {
              "description": "A region within the country.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "addressLocality": {
              "description": "A locality within the region.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "streetAddress": {
              "description": "A street address within the locality.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "postOfficeBoxNumber": {
              "description": "A post office box number for PO box addresses.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "postalCode": {
              "description": "A postal code.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "geo": {
              "$ref": "#/$defs/GeoCoordinates"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": false
        },
        "GeoCoordinates": {
          "description": "The geographic coordinates of a location.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'GeoCoordinates'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "latitude": {
              "description": "The latitude of the location [[WGS84]].",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            },
            "longitude": {
              "description": "The longitude of the location [[WGS84]].",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            }
          },
          "required": [
            "type",
            "latitude",
            "longitude"
          ],
          "additionalProperties": false
        },
        "CredentialSchema": {
          "description": "Identify the type and location of a data schema.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be a URI identifying the schema file. One instance of `CredentialSchema` MUST have an `id` that is the URL of the JSON Schema for this credential defined by this specification.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The value MUST identify the type of data schema validation. One instance of `CredentialSchema` MUST have a `type` of 'JsonSchemaValidator2019'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        }
      }
    },
    "JSON_Schema_for_the_ClrCredential_class_": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$id": "https://purl.imsglobal.org/spec/clr/v2p0/schema/json/clr_v2p0_clrcredential_schema.json",
      "title": "JSON Schema for the ClrCredential class.",
      "description": "A ClrCredential is a CLR with all the properties needed to conform with a Verifiable Credential as defined in the [[VC-DATA-MODEL]].  *************CHANGED TO DRAFT4. Removed date format = date - not supported in Draft4 *************",
      "type": "object",
      "properties": {
        "@context": {
          "type": "array",
          "minItems": 1,
          "items": {
            "description": "The value of the `@context` property MUST be an ordered set where the first three items are the URLs `https://www.w3.org/2018/credentials/v1`, `https://purl.imsglobal.org/spec/clr/v2p0/context.json`, `https://purl.imsglobal.org/spec/ob/v3p0/context.json`.",
            "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
            "type": "string"
          }
        },
        "type": {
          "oneOf": [
            {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI `VerifiableCredential`, and one of the items MUST be the IRI `ClrCredential`.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI `VerifiableCredential`, and one of the items MUST be the IRI `ClrCredential`.",
                "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                "type": "string"
              }
            }
          ]
        },
        "id": {
          "description": "Unambiguous reference to the credential.",
          "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
          "type": "string"
        },
        "name": {
          "description": "The name of the CLR. May be displayed by wallet user interfaces.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string"
        },
        "description": {
          "description": "Optional description of the CLR. May be displayed by wallet user interfaces.",
          "$comment": "Origin: String (PrimitiveType); Character strings.",
          "type": "string"
        },
        "endorsement": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/EndorsementCredential"
          }
        },
        "endorsementJwt": {
          "type": "array",
          "items": {
            "description": "Allows endorsers to make specific claims about the ClrCredential, or any AssertionCredential, Achievement, or Profile referenced in the ClrCredential. These endorsements are signed with the VC-JWT proof format.",
            "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
          }
        },
        "image": {
          "$ref": "#/$defs/Image"
        },
        "partial": {
          "description": "True if CLR does not contain all the assertions known by the publisher for the learner at the time the CLR is issued. Useful if you are sending a small set of achievements in real time when they are achieved. If False or omitted, the CLR SHOULD be interpreted as containing all the assertions for the learner known by the publisher at the time of issue.",
          "$comment": "Origin: Boolean (PrimitiveType); A boolean, expressed as `true` or `false`",
          "type": "boolean"
        },
        "credentialSubject": {
          "$ref": "#/$defs/ClrSubject"
        },
        "issuer": {
          "$ref": "#/$defs/Profile"
        },
        "issuanceDate": {
          "description": "Timestamp of when the credential was awarded.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
          "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
          "type": "string",
          "format": "date-time"
        },
        "proof": {
          "oneOf": [
            {
              "$ref": "#/$defs/Proof"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Proof"
              }
            }
          ]
        },
        "credentialSchema": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/CredentialSchema"
          }
        },
        "credentialStatus": {
          "$ref": "#/$defs/CredentialStatus"
        },
        "refreshService": {
          "$ref": "#/$defs/RefreshService"
        }
      },
      "required": [
        "@context",
        "type",
        "id",
        "name",
        "credentialSubject",
        "issuer",
        "issuanceDate"
      ],
      "additionalProperties": true,
      "$defs": {
        "CredentialStatus": {
          "description": "The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be the URL of the issuer's credential status method.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The name of the credential status method.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "RefreshService": {
          "description": "The information in RefreshService is used to refresh the verifiable credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be the URL of the issuer's refresh service.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The name of the refresh service method.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": true
        },
        "CredentialSchema": {
          "description": "Identify the type and location of a data schema.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The value MUST be a URI identifying the schema file. One instance of `CredentialSchema` MUST have an `id` that is the URL of the JSON Schema for this credential defined by this specification.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "The value MUST identify the type of data schema validation. One instance of `CredentialSchema` MUST have a `type` of 'JsonSchemaValidator2019'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "Image": {
          "description": "Metadata about images that represent assertions, achieve or profiles. These properties can typically be represented as just the id string of the image, but using a fleshed-out document allows for including captions and other applicable metadata.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The URI or Data URI of the image.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "description": "MUST be the IRI 'Image'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "caption": {
              "description": "The caption for the image.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "Proof": {
          "description": "A JSON-LD Linked Data proof.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Signature suite used to produce proof.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "created": {
              "description": "Date the proof was created.",
              "$comment": "Origin: DateTime (PrimitiveType); An [[ISO8601]] time using the syntax YYYY-MM-DDThh:mm:ss.",
              "type": "string",
              "format": "date-time"
            },
            "challenge": {
              "description": "A value chosen by the verifier to mitigate authentication proof replay attacks.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "domain": {
              "description": "The domain of the proof to restrict its use to a particular target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "nonce": {
              "description": "A value chosen by the creator of proof to randomize proof values for privacy purposes.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "proofPurpose": {
              "description": "The purpose of the proof to be used with `verificationMethod`. MUST be 'assertionMethod'.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "proofValue": {
              "description": "Value of the proof.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "verificationMethod": {
              "description": "The URL of the public key that can verify the signature.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": true
        },
        "ClrSubject": {
          "description": "A collection of information about the learner that is the subject of this CLR credential.",
          "type": "object",
          "properties": {
            "id": {
              "description": "An identifier for the recipient of the CLR credential. Either `id` or at least one `identifier` is required.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The property MUST contain the IRI `ClrSubject`.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The property MUST contain the IRI `ClrSubject`.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "identifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentityObject"
              }
            },
            "achievement": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Achievement"
              }
            },
            "verifiableCredential": {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/$defs/VerifiableCredential"
              }
            },
            "association": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Association"
              }
            }
          },
          "required": [
            "type",
            "verifiableCredential"
          ],
          "additionalProperties": true
        },
        "IdentityObject": {
          "description": "A collection of information about the recipient of an achievement.",
          "type": "object",
          "properties": {
            "type": {
              "description": "MUST be the IRI 'IdentityObject'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "hashed": {
              "description": "Whether or not the `identityHash` value is hashed.",
              "$comment": "Origin: Boolean (PrimitiveType); A boolean, expressed as `true` or `false`",
              "type": "boolean"
            },
            "identityHash": {
              "description": "Either the IdentityHash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used.",
              "$comment": "Origin: IdentityHash (DerivedType); A hash string containing an algorithm identifier and a resulting hash of an identifier, separated by a dollar sign ('$') and the algorithm used to generate the hash. The only supported algorithms are MD5 [[RFC1321]] and SHA-256 [[FIPS-180-4]], identified by the strings md5 and sha256 respectively. Resulting hash for each of these algorithms MUST be expressed in hexadecimal using uppercase (A-F, 0-9) or lowercase character (a-f, 0-9) sets. For example: sha256$7a1a1b3f7d40552e4299180e346e3add12bf9a751a43d9c4ca4518febc2c60c6 represents the result of calculating a SHA-256 hash on the string 'mayze'.",
              "type": "string"
            },
            "identityType": {
              "description": "The identity type.",
              "$comment": "Origin: IdentifierTypeEnum (EnumExt)",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "sourcedId",
                    "systemId",
                    "productId",
                    "userName",
                    "accountId",
                    "emailAddress",
                    "nationalIdentityNumber",
                    "isbn",
                    "issn",
                    "lisSourcedId",
                    "oneRosterSourcedId",
                    "sisSourcedId",
                    "ltiContextId",
                    "ltiDeploymentId",
                    "ltiToolId",
                    "ltiPlatformId",
                    "ltiUserId",
                    "identifier"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "salt": {
              "description": "If the `identityHash` is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "type",
            "hashed",
            "identityHash",
            "identityType"
          ],
          "additionalProperties": false
        },
        "VerifiableCredential": {
          "description": "A Verifiable Credential as defined in the [[VC-DATA-MODEL]]. As described in [[[#proofs-signatures]]], at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the `proof` property.",
          "type": "object",
          "properties": {
            "@context": {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the `@context` property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/2018/credentials/v1'.",
                "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
                "type": "string"
              }
            },
            "id": {
              "description": "Unambiguous reference to the credential.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "issuer": {
              "$ref": "#/$defs/Profile"
            },
            "issuanceDate": {
              "description": "Timestamp of when the credential was awarded.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "expirationDate": {
              "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "credentialSubject": {
              "$ref": "#/$defs/CredentialSubject"
            },
            "proof": {
              "oneOf": [
                {
                  "$ref": "#/$defs/Proof"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/Proof"
                  }
                }
              ]
            },
            "credentialSchema": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CredentialSchema"
              }
            },
            "credentialStatus": {
              "$ref": "#/$defs/CredentialStatus"
            },
            "refreshService": {
              "$ref": "#/$defs/RefreshService"
            }
          },
          "required": [
            "@context",
            "type",
            "issuer",
            "issuanceDate",
            "credentialSubject"
          ],
          "additionalProperties": true
        },
        "CredentialSubject": {
          "description": "Claims about the credential subject. Maps to Credential Subject as defined in the [[VC-DATA-MODEL]].",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identity of the credential subject.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [],
          "additionalProperties": true
        },
        "Association": {
          "description": "An Association describes the semantic relationship between two achievements and the credentials that assert those achievements.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The valud of the type property MUST be 'Association'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "associationType": {
              "description": "The type of relationship between a source achievement and a target achievement. For example the source achievement is the child of the target achievement.",
              "$comment": "Origin: AssociationType (Enumeration); A vocabulary of association types. Associations describe the semantic relationship between two achievements.",
              "type": "string",
              "enum": [
                "exactMatchOf",
                "isChildOf",
                "isParentOf",
                "isPartOf",
                "isPeerOf",
                "isRelatedTo",
                "precedes",
                "replacedBy"
              ]
            },
            "sourceId": {
              "description": "The `id` of the source achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "targetId": {
              "description": "The `id` of the target achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            }
          },
          "required": [
            "type",
            "associationType",
            "sourceId",
            "targetId"
          ],
          "additionalProperties": false
        },
        "Achievement": {
          "description": "A collection of information about the accomplishment recognized by the Assertion. Many assertions may be created corresponding to one Achievement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique URI for the Achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "No description supplied.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "No description supplied.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "achievementType": {
              "description": "The type of achievement. This is an extensible vocabulary.",
              "$comment": "Origin: AchievementType (EnumExt); The type of achievement, for example 'Award' or 'Certification'. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "Achievement",
                    "ApprenticeshipCertificate",
                    "Assessment",
                    "Assignment",
                    "AssociateDegree",
                    "Award",
                    "Badge",
                    "BachelorDegree",
                    "Certificate",
                    "CertificateOfCompletion",
                    "Certification",
                    "CommunityService",
                    "Competency",
                    "Course",
                    "CoCurricular",
                    "Degree",
                    "Diploma",
                    "DoctoralDegree",
                    "Fieldwork",
                    "GeneralEducationDevelopment",
                    "JourneymanCertificate",
                    "LearningProgram",
                    "License",
                    "Membership",
                    "ProfessionalDoctorate",
                    "QualityAssuranceCredential",
                    "MasterCertificate",
                    "MasterDegree",
                    "MicroCredential",
                    "ResearchDoctorate",
                    "SecondarySchoolDiploma"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "creator": {
              "$ref": "#/$defs/Profile"
            },
            "creditsAvailable": {
              "description": "Credit hours associated with this entity, or credit hours possible. For example 3.0.",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            },
            "criteria": {
              "$ref": "#/$defs/Criteria"
            },
            "description": {
              "description": "A short description of the achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "endorsement": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EndorsementCredential"
              }
            },
            "endorsementJwt": {
              "type": "array",
              "items": {
                "description": "Allows endorsers to make specific claims about the Achievement. These endorsements are signed with the VC-JWT proof format.",
                "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
              }
            },
            "fieldOfStudy": {
              "description": "Category, subject, area of study, discipline, or general branch of knowledge. Examples include Business, Education, Psychology, and Technology.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "humanCode": {
              "description": "The code, generally human readable, associated with an achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "image": {
              "$ref": "#/$defs/Image"
            },
            "@language": {
              "description": "The language of the achievement.",
              "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
              "type": "string",
              "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
            },
            "name": {
              "description": "The name of the achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "otherIdentifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentifierEntry"
              }
            },
            "related": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Related"
              }
            },
            "resultDescription": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/ResultDescription"
              }
            },
            "specialization": {
              "description": "Name given to the focus, concentration, or specific area of study defined in the achievement. Examples include 'Entrepreneurship', 'Technical Communication', and 'Finance'.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "tag": {
              "type": "array",
              "items": {
                "description": "Tags that describes the type of achievement.",
                "$comment": "Origin: String (PrimitiveType); Character strings.",
                "type": "string"
              }
            },
            "version": {
              "description": "The version property allows issuers to set a version string for an Achievement. This is particularly useful when replacing a previous version with an update.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "criteria",
            "description",
            "name"
          ],
          "additionalProperties": true
        },
        "Criteria": {
          "description": "Descriptive metadata about the achievements necessary to be recognized with an assertion of a particular achievement. This data is added to the Achievement class so that it may be rendered when the achievement assertion is displayed, instead of simply a link to human-readable criteria external to the achievement. Embedding criteria allows either enhancement of an external criteria page or increased portability and ease of use by allowing issuers to skip hosting the formerly-required external criteria page altogether. Criteria is used to allow would-be recipients to learn what is required of them to be recognized with an assertion of a particular achievement. It is also used after the assertion is awarded to a recipient to let those inspecting earned achievements know the general requirements that the recipients met in order to earn it.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The URI of a webpage that describes in a human-readable format the criteria for the achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "narrative": {
              "description": "A narrative of what is needed to earn the achievement. Markdown is allowed.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            }
          },
          "required": [],
          "additionalProperties": true
        },
        "IdentifierEntry": {
          "description": "No description supplied.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'IdentifierEntry'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "identifier": {
              "description": "An identifier.",
              "$comment": "Origin: Identifier (DerivedType); A `NormalizedString` that functions as an identifier.",
              "type": "string"
            },
            "identifierType": {
              "description": "The identifier type.",
              "$comment": "Origin: IdentifierTypeEnum (EnumExt)",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "sourcedId",
                    "systemId",
                    "productId",
                    "userName",
                    "accountId",
                    "emailAddress",
                    "nationalIdentityNumber",
                    "isbn",
                    "issn",
                    "lisSourcedId",
                    "oneRosterSourcedId",
                    "sisSourcedId",
                    "ltiContextId",
                    "ltiDeploymentId",
                    "ltiToolId",
                    "ltiPlatformId",
                    "ltiUserId",
                    "identifier"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            }
          },
          "required": [
            "type",
            "identifier",
            "identifierType"
          ],
          "additionalProperties": false
        },
        "ResultDescription": {
          "description": "Describes a possible achievement result.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique URI for this result description. Required so a result can link to this result description.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'ResultDescription'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "allowedValue": {
              "type": "array",
              "items": {
                "description": "An ordered list of allowed values. The values should be ordered from low to high as determined by the achievement creator.",
                "$comment": "Origin: String (PrimitiveType); Character strings.",
                "type": "string"
              }
            },
            "name": {
              "description": "The name of the result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "requiredLevel": {
              "description": "The `id` of the rubric criterion level required to pass as determined by the achievement creator.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "requiredValue": {
              "description": "A value from `allowedValue` or within the range of `valueMin` to `valueMax` required to pass as determined by the achievement creator.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "resultType": {
              "description": "The type of result this description represents. This is an extensible enumerated vocabulary.",
              "$comment": "Origin: ResultType (EnumExt); The type of result. This is an extensible enumerated vocabulary. Extending the vocabulary makes use of a naming convention.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "GradePointAverage",
                    "LetterGrade",
                    "Percent",
                    "PerformanceLevel",
                    "PredictedScore",
                    "RawScore",
                    "Result",
                    "RubricCriterion",
                    "RubricCriterionLevel",
                    "RubricScore",
                    "ScaledScore",
                    "Status"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "rubricCriterionLevel": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/RubricCriterionLevel"
              }
            },
            "valueMax": {
              "description": "The maximum possible `value` that may be asserted in a linked result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "valueMin": {
              "description": "The minimum possible `value` that may be asserted in a linked result.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "name",
            "resultType"
          ],
          "additionalProperties": true
        },
        "RubricCriterionLevel": {
          "description": "Describes a rubric criterion level.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique URI for this rubric criterion level. Required so a result can link to this rubric criterion level.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'RubricCriterionLevel'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "alignment": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Alignment"
              }
            },
            "description": {
              "description": "Description of the rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "level": {
              "description": "The rubric performance level in terms of success.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "name": {
              "description": "The name of the rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "points": {
              "description": "The points associated with this rubric criterion level.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "name"
          ],
          "additionalProperties": true
        },
        "Profile": {
          "description": "A Profile is a collection of information that describes the entity or organization using Open Badges. Issuers must be represented as Profiles, and recipients, endorsers, or other entities may also be represented using this vocabulary. Each Profile that represents an Issuer may be referenced in many BadgeClasses that it has defined. Anyone can create and host an Issuer file to start issuing Open Badges. Issuers may also serve as recipients of Open Badges, often identified within an Assertion by specific properties, like their url or contact email address.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique URI for the Issuer/Profile file.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Profile'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "name": {
              "description": "The name of the entity or organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "url": {
              "description": "The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "phone": {
              "description": "A phone number.",
              "$comment": "Origin: PhoneNumber (DerivedType); A `NormalizedString` representing a phone number.",
              "type": "string"
            },
            "description": {
              "description": "A short description of the issuer entity or organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "endorsement": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/EndorsementCredential"
              }
            },
            "endorsementJwt": {
              "type": "array",
              "items": {
                "description": "Allows endorsers to make specific claims about the individual or organization represented by this profile. These endorsements are signed with the VC-JWT proof format.",
                "$comment": "Origin: CompactJws (DerivedType); A `String` in Compact JWS format [[RFC7515]].",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]*\\.[a-zA-Z0-9_-]+$"
              }
            },
            "image": {
              "$ref": "#/$defs/Image"
            },
            "email": {
              "description": "An email address.",
              "$comment": "Origin: EmailAddress (DerivedType); A `NormalizedString` representing an email address.",
              "type": "string"
            },
            "address": {
              "$ref": "#/$defs/Address"
            },
            "otherIdentifier": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/IdentifierEntry"
              }
            },
            "official": {
              "description": "If the entity is an organization, `official` is the name of an authorized official of the organization.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "parentOrg": {
              "$ref": "#/$defs/Profile"
            },
            "familyName": {
              "description": "Family name. In the western world, often referred to as the 'last name' of a person.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "givenName": {
              "description": "Given name. In the western world, often referred to as the 'first name' of a person.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "additionalName": {
              "description": "Additional name. Includes what is often referred to as 'middle name' in the western world.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "patronymicName": {
              "description": "Patronymic name.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "honorificPrefix": {
              "description": "Honorific prefix(es) preceding a person's name (e.g. 'Dr', 'Mrs' or 'Mr').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "honorificSuffix": {
              "description": "Honorific suffix(es) following a person's name (e.g. 'M.D, PhD').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "familyNamePrefix": {
              "description": "Family name prefix. As used in some locales, this is the leading part of a family name (e.g. 'de' in the name 'de Boer').",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "dateOfBirth": {
              "description": "No description supplied.",
              "$comment": "Origin: Date (PrimitiveType); An [[ISO8601]] calendar date using the syntax YYYY-MM-DD.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": true
        },
        "Related": {
          "description": "Identifies a related achievement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The related achievement.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "@language": {
              "description": "The language of the related achievement.",
              "$comment": "Origin: LanguageCode (DerivedType); A language code [[BCP47]].",
              "type": "string",
              "pattern": "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$"
            },
            "version": {
              "description": "The version of the related achievement.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        },
        "Address": {
          "description": "An address for the described entity.",
          "type": "object",
          "properties": {
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Address'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "addressCountry": {
              "description": "A country.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "addressCountryCode": {
              "description": "A country code. The value must be a ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
              "$comment": "Origin: CountryCode (DerivedType); A two-digit ISO 3166-1 alpha-2 country code [[ISO3166-1]].",
              "type": "string"
            },
            "addressRegion": {
              "description": "A region within the country.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "addressLocality": {
              "description": "A locality within the region.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "streetAddress": {
              "description": "A street address within the locality.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "postOfficeBoxNumber": {
              "description": "A post office box number for PO box addresses.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "postalCode": {
              "description": "A postal code.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "geo": {
              "$ref": "#/$defs/GeoCoordinates"
            }
          },
          "required": [
            "type"
          ],
          "additionalProperties": false
        },
        "GeoCoordinates": {
          "description": "The geographic coordinates of a location.",
          "type": "object",
          "properties": {
            "type": {
              "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'GeoCoordinates'.",
              "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "latitude": {
              "description": "The latitude of the location [[WGS84]].",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            },
            "longitude": {
              "description": "The longitude of the location [[WGS84]].",
              "$comment": "Origin: Float (PrimitiveType)",
              "type": "number"
            }
          },
          "required": [
            "type",
            "latitude",
            "longitude"
          ],
          "additionalProperties": false
        },
        "EndorsementCredential": {
          "description": "A verifiable credential that asserts a claim about an entity. As described in [[[#proofs-signatures]]], at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the `proof` property.",
          "type": "object",
          "properties": {
            "@context": {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "The value of the `@context` property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/2018/credentials/v1', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context/ob_v3p0.jsonld'.",
                "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
                "type": "string"
              }
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "id": {
              "description": "Unambiguous reference to the credential.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "credentialSubject": {
              "$ref": "#/$defs/EndorsementSubject"
            },
            "issuer": {
              "$ref": "#/$defs/Profile"
            },
            "issuanceDate": {
              "description": "Timestamp of when the credential was awarded.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "expirationDate": {
              "description": "If the credential has some notion of expiry, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered expired.",
              "$comment": "Origin: DateTimeZ (DerivedType); A `DateTime` with the trailing timezone specifier included, e.g. `2021-09-07T02:09:59+02:00`",
              "type": "string",
              "format": "date-time"
            },
            "proof": {
              "oneOf": [
                {
                  "$ref": "#/$defs/Proof"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/Proof"
                  }
                }
              ]
            },
            "credentialSchema": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/CredentialSchema"
              }
            },
            "credentialStatus": {
              "$ref": "#/$defs/CredentialStatus"
            },
            "refreshService": {
              "$ref": "#/$defs/RefreshService"
            }
          },
          "required": [
            "@context",
            "type",
            "id",
            "credentialSubject",
            "issuer",
            "issuanceDate"
          ],
          "additionalProperties": false
        },
        "EndorsementSubject": {
          "description": "A collection of information about the subject of the endorsement.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The identifier of the individual, entity, organization, assertion, or achievement that is endorsed.",
              "$comment": "Origin: URI (DerivedType); A `NormalizedString` that respresents a Uniform Resource Identifier (URI).",
              "type": "string"
            },
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementSubject'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "endorsementComment": {
              "description": "Allows endorsers to make a simple claim in writing about the entity.",
              "$comment": "Origin: Markdown (DerivedType); A `String` that may contain Markdown.",
              "type": "string"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "additionalProperties": false
        },
        "Alignment": {
          "description": "Describes an alignment between an achievement and a node in an educational framework.",
          "type": "object",
          "properties": {
            "type": {
              "oneOf": [
                {
                  "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
                  "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                  "type": "string"
                },
                {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "description": "The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Alignment'.",
                    "$comment": "Origin: IRI (DerivedType); A `NormalizedString` that represents an Internationalized Resource Identifier (IRI), which extends the ASCII characters subset of the Uniform Resource Identifier (URI).",
                    "type": "string"
                  }
                }
              ]
            },
            "targetCode": {
              "description": "If applicable, a locally unique string identifier that identifies the alignment target within its framework and/or targetUrl.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetDescription": {
              "description": "Short description of the alignment target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetName": {
              "description": "Name of the alignment.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetFramework": {
              "description": "Name of the framework the alignment target.",
              "$comment": "Origin: String (PrimitiveType); Character strings.",
              "type": "string"
            },
            "targetType": {
              "description": "The type of the alignment target node.",
              "$comment": "Origin: AlignmentTargetType (EnumExt); The type of the alignment target node in the target framework.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "ceasn:Competency",
                    "ceterms:Credential",
                    "CFItem",
                    "CFRubric",
                    "CFRubricCriterion",
                    "CFRubricCriterionLevel",
                    "CTDL"
                  ]
                },
                {
                  "type": "string",
                  "pattern": "(ext:)[a-z|A-Z|0-9|.|-|_]+"
                }
              ]
            },
            "targetUrl": {
              "description": "URL linking to the official description of the alignment target, for example an individual standard within an educational framework.",
              "$comment": "Origin: URL (DerivedType); A `URI` that represents a Uniform Resource Locator (URL).",
              "type": "string"
            }
          },
          "required": [
            "type",
            "targetName",
            "targetUrl"
          ],
          "additionalProperties": true
        }
      }
    },
    "WorkerPaidHoursType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkerPaidHoursType",
      "description": "The hours a worker was paid for time off or actual time worked.",
      "definitions": {
        "PaidForWorkInPayPeriodType": {
          "title": "PaidForWorkInPayPeriodType",
          "description": "Details on if the worker was paid in a particular month.",
          "type": "object",
          "properties": {
            "includedDayOfMonth": {
              "description": "Specifies pay period that includes this day, i.e The person worked during this pay period that includes the 12th.",
              "$ref": "#/definitions/DayOfMonthType"
            },
            "reportedMonth": {
              "description": "The reported month.",
              "$ref": "#/definitions/MonthType"
            },
            "paidForWorkIndicator": {
              "description": "Indicate if worker was paid in PayPeriodMonthDay and ReportedYearMonth.",
              "$ref": "#/definitions/IndicatorType"
            }
          }
        },
        "WorkedHoursType": {
          "title": "WorkedHoursType",
          "description": "Specifies the hours worked for a specific pay type. For example, 8 hours of holiday pay.",
          "type": "object",
          "properties": {
            "workedPayTypeCode": {
              "description": "Type of compensation, e.g. holiday, overtime, shift differential, etc.",
              "$ref": "#/definitions/PayTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the pay type.",
              "type": "string"
            },
            "workedHours": {
              "description": "Number of hours worked for a specific pay type.",
              "$ref": "#/definitions/NumberType"
            }
          }
        },
        "TimeOffHoursType": {
          "title": "TimeOffHoursType",
          "description": "The hours a worker took off. For example, 8 hours of vacation pay.",
          "type": "object",
          "properties": {
            "timeOffTypeCode": {
              "description": "The type of hours a worker took off, such as bereavement, jury duty, vacation, etc.",
              "$ref": "#/definitions/TimeOffTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the pay type.",
              "type": "string"
            },
            "timeOffHours": {
              "description": "Number of hours a worker took off.",
              "$ref": "#/definitions/NumberType"
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "workerId": {
          "description": "Provides a unique identifier to a specific worker (an employer specific identifier).",
          "$ref": "#/definitions/IdentifierType"
        },
        "reportingTimePeriod": {
          "description": "Defines the period of the hours paid and worked. 'As of date' would use the validTo date.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "totalPaidHours": {
          "description": "The total number of hours for which a worker received pay. Includes all actual work hours and hours of employer-paid leave that were used.",
          "$ref": "#/definitions/NumberType"
        },
        "totalWorkedHours": {
          "description": "The total number of hours a worker was engaged in a paid work activity, including regular and premium hours (overtime, shift differential), rest periods and stand-by time. Includes work hours for which compensatory time off was earned. Does not include any employer-paid leave time used.",
          "$ref": "#/definitions/NumberType"
        },
        "totalPremiumWorkedHours": {
          "description": "The number of premium hours a worker actually worked, including stand-by time, for which a premium rate of compensation was paid. Includes overtime and hours for which shift differentials were paid such as night, holiday or weekend work. Includes hours for which compensatory time off was earned, if more than one hour of CTO was earned for each hour of actual work. Does not include any hours used of employer-paid leave time.",
          "$ref": "#/definitions/NumberType"
        },
        "totalPaidTimeOffHours": {
          "description": "The total number of hours of employer-paid time used by a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, meals, military duty, administrative time off, sabbatical, or other personal leave. Includes hours of compensatory time off (CTO) when used. ",
          "$ref": "#/definitions/NumberType"
        },
        "totalHolidayPaidTimeOffHours": {
          "description": "When the employer offers such benefit as a separate accrued leave, the number of hours a worker was paid by the employer for absence from work on days of special religious, cultural, social, or patriotic significance, on which work and business ordinarily cease. Includes public and floating holiday paid leave.",
          "$ref": "#/definitions/NumberType"
        },
        "workedWeeks": {
          "description": "The number of weeks during which the worker earned, at a minimum, an amount of remuneration specified by the state based on time worked and paid leave taken.",
          "$ref": "#/definitions/NumberType"
        },
        "paidForWorkInPayPeriod": {
          "description": "Details on if the worker was paid in a particular month.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaidForWorkInPayPeriodType"
          }
        },
        "regularWorkedHours": {
          "description": "The number of hours a worker was engaged in a regular paid work activity.",
          "$ref": "#/definitions/NumberType"
        },
        "premiumWorkedHours": {
          "description": "The number of hours a worker was engaged in a premium paid work activity, including premium hours (overtime, shift differential), rest periods and stand-by time. Includes work hours for which compensatory time off was earned. Does not include any employer-paid leave time used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkedHoursType"
          }
        },
        "paidTimeOffHours": {
          "description": "The number of hours of employer-paid time used by a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, meals, military duty, administrative time off, sabbatical, or other personal leave. Includes hours of compensatory time off (CTO) when used. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeOffHoursType"
          }
        }
      }
    },
    "WorkerWithholdingType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkerWithholdingType",
      "description": "Amounts withheld from the worker including taxes, premiums, insurance, other withholdings.",
      "type": "object",
      "properties": {
        "totalTaxWithholdingAmount": {
          "description": "The monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to taxes.",
          "$ref": "#/definitions/AmountType"
        },
        "totalInsurancePremiumsWithholdingAmount": {
          "description": "The total monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to insurance premiums.",
          "$ref": "#/definitions/AmountType"
        },
        "totalRetirementWithholdingAmount": {
          "description": "The total monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to retirement.",
          "$ref": "#/definitions/AmountType"
        },
        "totalOtherWithholdingAmount": {
          "description": "The total of all other monetary amounts withheld by the employer from the worker's pay for other than taxes, insurance and retirement.",
          "$ref": "#/definitions/AmountType"
        },
        "taxWithholdingAmount": {
          "description": "The monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to taxes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WithholdingAmountType"
          }
        },
        "insurancePremiumsWithholdingAmount": {
          "description": "The monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to insurance premiums.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WithholdingAmountType"
          }
        },
        "retirementWithholdingAmount": {
          "description": "The monetary amount withheld by the employer from the worker's pay to cover the worker's contribution to retirement.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WithholdingAmountType"
          }
        },
        "otherWithholdingAmount": {
          "description": "The monetary amount withheld by the employer from the worker's pay for other than taxes, insurance, and retirement.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WithholdingAmountType"
          }
        }
      }
    },
    "PayrollType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayrollType",
      "description": "Represents the Payroll Specification.",
      "type": "object",
      "properties": {
        "payrollSetup": {
          "$ref": "#/definitions/PayrollSetupType"
        },
        "payrollInstructions": {
          "$ref": "#/definitions/PayrollInstructionsType"
        }
      }
    },
    "WorkerCompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkerCompensationType",
      "description": "The direct and indirect compensation a worker was paid.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "workerId": {
          "description": "Provides a unique identifier to a specific worker (an employer specific identifier).",
          "$ref": "#/definitions/IdentifierType"
        },
        "reportingTimePeriod": {
          "description": "Defines the period of the compensation paid. 'As of date' would use the validTo date.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "totalCompensationAmount": {
          "description": "The total monetary amount of all cash, cash-equivalent and non-cash compensation that was paid by the employer to a worker for her or his services, for work or time off from work. Includes payments directly to the worker as well as the dollar value of non-cash fringe benefits paid indirectly to the worker.",
          "$ref": "#/definitions/AmountType"
        },
        "totalDirectCompensationAmount": {
          "description": "The total monetary amount of all forms of cash or cash-equivalent compensation paid by the employer directly to the employee for her or his services, for work or time off from work.",
          "$ref": "#/definitions/AmountType"
        },
        "totalIndirectCompensationAmount": {
          "description": "The total monetary value of all compensation and contributions paid by the employer for the worker’s legally required and discretionary (voluntary) non-cash fringe benefits. ",
          "$ref": "#/definitions/AmountType"
        },
        "totalWorkerWithholdingAmount": {
          "description": "The total monetary amount withheld by the employer from the worker's pay for all purposes.",
          "$ref": "#/definitions/AmountType"
        },
        "directCompensationAmount": {
          "description": "The monetary compensation paid to a worker.",
          "$ref": "#/definitions/DirectCompensationType"
        },
        "indirectCompensationAmount": {
          "description": "The monetary value of compensation paid by the employer for a worker's voluntary and non-voluntary non-cash fringe benefits.",
          "$ref": "#/definitions/IndirectCompensationType"
        },
        "taxableCompensationAmount": {
          "description": "The monetary value withheld from the worker for tax purposes. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxableCompensationType"
          }
        },
        "workerWithholdingAmount": {
          "description": "The monetary value withheld from the worker for the specified tax, premiums, retirement or other purposes.",
          "$ref": "#/definitions/WorkerWithholdingType"
        }
      }
    },
    "GarnishmentInstructionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GarnishmentInstructionType",
      "description": "This defines the deduction associated to a garnishment in the context of that which is relevant to payroll processing.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RemunerationOrDeductionType"
        }
      ],
      "properties": {
        "partialGarnishmentAllowedIndicator": {
          "description": "True: If there isn't enough pay to cover the full garnishment, deduct part of the garnishment.",
          "$ref": "#/definitions/IndicatorType"
        },
        "issuanceDate": {
          "description": "The date the garnishment was issued.",
          "$ref": "#/definitions/DateType"
        },
        "registrationDate": {
          "description": "The date the garnishment was registered.",
          "$ref": "#/definitions/DateType"
        },
        "jurisdictionRegions": {
          "description": "A set of information broadly describing the region(s) where the garnishment was issues.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JurisdictionType"
          }
        },
        "issuerId": {
          "description": "Identifier of the issuer.",
          "$ref": "#/definitions/IdentifierType"
        },
        "serviceChargeAmount": {
          "description": "The requested service charge amount or adminstrative fee to be levied.",
          "$ref": "#/definitions/AmountType"
        },
        "serviceChargeFeeIndicator": {
          "description": "Specifies if a standard administration fee may be charged. If indicator is specified, the amount is not used.",
          "$ref": "#/definitions/IndicatorType"
        },
        "maximumServiceChargeAmount": {
          "description": "The maximum service charge amount or administration fee a processor can levy. If amount is specificed, the indicator is not used.",
          "$ref": "#/definitions/AmountType"
        },
        "actualServiceChargeAmount": {
          "description": "The actual service charge amount or adminstrative fee levied.",
          "$ref": "#/definitions/AmountType"
        },
        "priority": {
          "description": "The priority of the garnishment in relation to other Garnishments.",
          "type": "string"
        },
        "protectedEarningsAmount": {
          "description": "The amount of earnings to be left to the employee when deducting this garnishment. ",
          "$ref": "#/definitions/AmountType"
        }
      }
    },
    "TaxableCompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "TaxableCompensationType",
      "description": "Type and monetary value reported in government reports. In the US, an example would be the Internal Revenue Service Form W-2.",
      "type": "object",
      "properties": {
        "typeCode": {
          "description": "Type of taxable wage.",
          "$ref": "#/definitions/USTaxableCompensationTypeCodeList"
        },
        "description": {
          "description": "A short phrase further describing the taxable compensation type.",
          "type": "string"
        },
        "amount": {
          "description": "Monetary value of taxable wage.",
          "$ref": "#/definitions/AmountType"
        }
      }
    },
    "WithholdingAmountType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "WithholdingAmountType",
      "description": "Type and monetary value withheld from an worker. This may include taxes, premiums, and retirement withholdings.",
      "type": "object",
      "properties": {
        "typeCode": {
          "description": "Type of withholding amount.",
          "$ref": "#/definitions/CodeType"
        },
        "description": {
          "description": "Short phrase further describing the withholding amount.",
          "type": "string"
        },
        "amount": {
          "description": "Monetary value of withholding amount.",
          "$ref": "#/definitions/AmountType"
        }
      }
    },
    "IndirectCompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "IndirectCompensationType",
      "description": "The monetary value of compensation paid by the employer for a worker's voluntary and non-voluntary non-cash fringe benefits.",
      "definitions": {
        "VoluntaryBenefitAmountType": {
          "title": "VoluntaryBenefitAmountType",
          "description": "The type and amount of voluntary benefit compensation.",
          "type": "object",
          "properties": {
            "typeCode": {
              "description": "Types of voluntary benefits such as insurance, retirement or savings.",
              "$ref": "#/definitions/VoluntaryBenefitTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the benefit type.",
              "type": "string"
            },
            "amount": {
              "description": "The monetary value of the voluntary benefit.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "NonVoluntaryBenefitAmountType": {
          "title": "NonVoluntaryBenefitAmountType",
          "description": "Describes the type and amount of benefits paid by the employer.",
          "type": "object",
          "properties": {
            "typeCode": {
              "description": "Types of non-voluntary benefits. In the US, this would include social security, medicare, unemployment and workers compensation.",
              "$ref": "#/definitions/USBenefitTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the benefit type.",
              "type": "string"
            },
            "amount": {
              "description": "The monetary value of the non-voluntary benefit.",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "totalVoluntaryBenefitAmount": {
          "description": "Total monetary value of employer-paid contributions for discretionary fringe benefits provided to the worker, including insurance, retirement, and savings.",
          "type": "object",
          "$ref": "#/definitions/AmountType"
        },
        "totalNonVoluntaryBenefitAmount": {
          "description": "The total monetary value of compensation paid by the employer for a worker's legally required non-cash benefits. In the US, this would include employer contributions to Social Security, Medicare, FUTA, state Unemployment Insurance, Workers’ Compensation, and any other government-mandated benefits.",
          "type": "object",
          "$ref": "#/definitions/AmountType"
        },
        "voluntaryBenefitAmount": {
          "description": "The monetary value of employer-paid contributions for discretionary fringe benefits provided to the worker, including insurance, retirement, and savings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoluntaryBenefitAmountType"
          }
        },
        "nonVoluntaryBenefitAmount": {
          "description": "The monetary value of compensation paid by the employer for workers’s legally required non-cash fringe benefits, including employer contributions to Social Security, Medicare, FUTA, state Unemployment Insurance, Workers’ Compensation, and any other state-mandated benefits. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NonVoluntaryBenefitAmountType"
          }
        }
      }
    },
    "PayrollInstructionsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayrollInstructionsType",
      "description": "Contains details to process a payroll for a person.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "personId": {
          "description": "The identifier for the person.",
          "$ref": "#/definitions/IdentifierType"
        },
        "paymentInstructions": {
          "description": "Instructions for payment method and amount.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstructionsType"
          }
        },
        "remunerationInstructions ": {
          "description": "Instructions for the payments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationOrDeductionType"
          }
        },
        "deductionInstructions": {
          "description": "Instructions for General and Benefits deductions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationOrDeductionType"
          }
        },
        "garnishmentInstructions": {
          "description": "Instructions for Garnishment deductions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GarnishmentInstructionType"
          }
        }
      }
    },
    "PaymentInstructionsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PaymentInstructionsType",
      "description": "The instructions for payment.",
      "type": "object",
      "definitions": {
        "PaymentDistributionType": {
          "description": "Describes how to distribute the payment among the accounts.",
          "type": "object",
          "properties": {
            "amount": {
              "description": "The amount of the payment.  This is only relevant for the secondary account in the event of a partial distribution.",
              "$ref": "#/definitions/AmountType"
            },
            "percentage": {
              "description": "The percentage of the payment. This is only relevant for the secondary account in the event of a partial distribution.",
              "$ref": "#/definitions/PercentType"
            },
            "remainingBalanceIndicator": {
              "description": "Specifies if the remaining amount should be applied to this account.",
              "$ref": "#/definitions/IndicatorType"
            }
          }
        }
      },
      "properties": {
        "id": {
          "description": "Identifies the payment instruction when there is more than one payment instruction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "sequence": {
          "description": "Specifies in what order are the payments processed in the secondary accounts until the remainder is paid into the main account.",
          "type": "number"
        },
        "deploymentId": {
          "description": "Provides a unique identifier to a specific deployment. This may be used when a person has multiple deployments within an organization. For example, a coach and math teacher at a school.",
          "$ref": "#/definitions/IdentifierType"
        },
        "paymentMethod": {
          "$ref": "#/definitions/PaymentMethodType"
        },
        "paymentDistribution": {
          "$ref": "#/definitions/PaymentDistributionType"
        }
      }
    },
    "PayrollSetupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayrollSetupType",
      "description": "Provides the information needed to setup a payroll.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "definitions": {
        "PayrollPersonType": {
          "title": "PayrollPersonType",
          "description": "Information about the person.",
          "type": "object",
          "properties": {
            "personName": {
              "description": "The name of the person.",
              "$ref": "#/definitions/PersonNameType"
            },
            "personBase": {
              "description": "General information about the person, e.g. id, birthdate and gender.",
              "$ref": "#/definitions/PersonBaseType"
            },
            "personLegal": {
              "description": "Legal details about a person, e.g. passport, parents names, marital status.",
              "$ref": "#/definitions/PersonLegalInclusion"
            }
          }
        }
      },
      "properties": {
        "person": {
          "description": "Information about the person, including name, birthdate, legal ids, and marital status.",
          "$ref": "#/definitions/PayrollPersonType"
        },
        "workLifeCycle": {
          "description": "Describes the relationship of the worker, e.g. hire date, termination, hir.",
          "$ref": "#/definitions/WorkLifeCycleType"
        },
        "deployment": {
          "description": "Information about the person's position, organization, and work location.",
          "$ref": "#/definitions/DeploymentType"
        },
        "paymentInstructions": {
          "description": "Instructions for payment method and amount.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstructionsType"
          }
        },
        "remunerationInstructions ": {
          "description": "Instructions for the payments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationOrDeductionType"
          }
        },
        "deductionInstructions": {
          "description": "Instructions for General and Benefits deductions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationOrDeductionType"
          }
        },
        "garnishmentInstructions": {
          "description": "Instructions for Garnishment deductions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GarnishmentInstructionType"
          }
        }
      }
    },
    "DirectCompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DirectCompensationType",
      "description": "The monetary compensation paid to a worker.",
      "definitions": {
        "WorkedCompensationAmountType": {
          "title": "WorkedCompensationAmountType",
          "description": "Type and monetary value for time worked.",
          "type": "object",
          "properties": {
            "workedPayTypeCode": {
              "description": "Type of compensation, e.g. holiday, overtime, shift differential, etc.",
              "$ref": "#/definitions/PayTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the pay type.",
              "type": "string"
            },
            "workedPayAmount": {
              "description": "The monetary value paid to the worker.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "TimeOffCompensationAmountType": {
          "title": "TimeOffCompensationAmountType",
          "description": "Type and monetary value of the time off.",
          "type": "object",
          "properties": {
            "timeOffPayType": {
              "description": "Type of compensation, e.g. bereavement, jury duty, sick, etc.",
              "$ref": "#/definitions/TimeOffTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the time off type.",
              "type": "string"
            },
            "timeOffPayAmount": {
              "description": "The monetary value paid to the worker.",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "salaryAmount": {
          "description": "The agreed upon fixed or set monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services, that was not based on hours worked or production level. Salary is commonly paid in fixed intervals, for example, monthly payments of one-twelfth of the annual salary.",
          "$ref": "#/definitions/AmountType"
        },
        "totalHourlyWageAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services based on hourly rates of pay and the number of hours worked. Includes pay for both regular hours (straight-time) and premium hours (overtime, shift differentials) worked.",
          "$ref": "#/definitions/AmountType"
        },
        "totalPremiumHourlyWageAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker based on a premium hourly rate of pay and the number of premium hours worked. ",
          "$ref": "#/definitions/AmountType"
        },
        "totalPaidTimeoffAmount": {
          "description": "The total monetary amount the employer paid to a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, military duty, administrative time off, sabbatical, or other personal leave. Includes compensatory time off (CTO) when used.",
          "$ref": "#/definitions/AmountType"
        },
        "totalHolidayPaidTimeOffAmount": {
          "description": "The total monetary amount a worker was paid for absence from work on days of special religious, cultural, social, or patriotic significance, on which work and business ordinarily cease.",
          "$ref": "#/definitions/AmountType"
        },
        "totalOtherCompensationAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker other than salary, hourly wages, and paid leave. Includes, but is not limited to bonuses, commissions, lump-sum, residuals, severance, tips, and incentive, piecework, production-based payments, and buy back of accrued leave. ",
          "$ref": "#/definitions/AmountType"
        },
        "regularHourlyWagesAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services.",
          "$ref": "#/definitions/WorkedCompensationAmountType"
        },
        "premiumHourlyWagesAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkedCompensationAmountType"
          }
        },
        "paidTimeOffAmount": {
          "description": "The monetary amount the employer paid to a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, military duty, administrative time off, sabbatical, or other personal leave. Includes compensatory time off (CTO) when used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeOffCompensationAmountType"
          }
        },
        "otherCompensationAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker other than salary, hourly wages, and paid leave. Includes, but is not limited to bonuses, commissions, lump-sum, residuals, severance, tips, and incentive, piecework, production-based payments, and buy back of accrued leave. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkedCompensationAmountType"
          }
        }
      }
    },
    "USBenefitTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "USBenefitTypeCodeList",
      "description": "Specifies non-voluntary benefits paid by the employer on behalf of the worker.",
      "enum": [
        "SocialSecurityContribution",
        "MedicareContribution",
        "FederalUnemploymentInsurance",
        "StateUnemploymentInsurance",
        "WorkersCompensationContribution",
        "Other"
      ]
    },
    "USTaxableCompensationTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "USTaxableCompensationTypeCodeList",
      "description": "Specifies the data reported in the U.S. Department of the Treasury, Internal Revenue Service Form W-2.",
      "enum": [
        "WagesTaxableCompensation",
        "SocialSecurityTaxableCompensation",
        "MedicareTaxableCompensation",
        "SocialSecurityTipsTaxableCompensation",
        "StateTaxableCompensation",
        "StateDisabilityInsuranceTaxableCompensation",
        "StateUnemploymentInsuranceTaxableCompensation",
        "LocalTaxableCompensation",
        "OtherProgramTaxableCompensation",
        "TotalWagesPaidOutOfStateCompensation"
      ]
    },
    "VoluntaryBenefitTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "VoluntaryBenefitTypeCodeList",
      "description": "Specifies voluntary benefits paid by the employer on behalf of the worker.",
      "enum": [
        "Insurance",
        "Retirement",
        "Saving",
        "Other"
      ]
    },
    "InterviewAddressType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InterviewAddressType",
      "description": "Contact information regarding the candidate to invite.",
      "allOf": [
        {
          "$ref": "#/definitions/AddressType"
        }
      ],
      "type": "object",
      "properties": {
        "comments": {
          "description": "Instructions or comments for the candidate.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "PositionQuestionsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionQuestionsType",
      "description": "The collection of questions for each interview type in which a candidate may participate.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "type": "object",
      "definitions": {
        "QuestionType": {
          "title": "QuestionType",
          "description": "Includes the questions to be asked during an interview.",
          "type": "object",
          "properties": {
            "questionText": {
              "type": "string"
            },
            "mediaURL": {
              "description": "The media URL if the question if the question is to be presented in some form of media.",
              "$ref": "#/definitions/WebType"
            },
            "responseType": {
              "description": "video, audio, essay, multiple-choice, multiple-select, etc.",
              "type": "string"
            },
            "responsePrepTimeSeconds": {
              "description": "How long after question presentation before the candidate must start answering the question.",
              "$ref": "#/definitions/DurationType"
            },
            "maxResponseTimeSeconds": {
              "description": "How long does the user have to answer the question once presented to them.",
              "$ref": "#/definitions/DurationType"
            },
            "maxResponseLength": {
              "description": "What is the maximum length of the response? Units will be a number representing the number of seconds or characters.",
              "$ref": "#/definitions/NumberType"
            },
            "rerecordCount": {
              "description": "Can the user rerecord their answer and if so, how many times? If not present option left to the interviewing system.",
              "$ref": "#/definitions/NumberType"
            },
            "questionContext": {
              "description": "The context for the question. Typically used with a group of questions related to a scenario.",
              "type": "string"
            },
            "reviewType": {
              "description": "If reviewers can review by question, what type of review (text, multiple choice, multiple select).",
              "type": "string"
            },
            "responseChoice": {
              "description": "If multiple choice or multiple select, the collection of possible responses.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChoiceType"
              }
            },
            "reviewChoice": {
              "description": "xxx.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChoiceType"
              }
            },
            "rankingChoice": {
              "description": "xxx.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChoiceType"
              }
            }
          }
        },
        "ChoiceType": {
          "title": "ChoiceType",
          "description": "Provides a choice for the response or review.",
          "type": "object",
          "properties": {
            "text": {
              "description": "The score for the selection if provided automated scoring for multiple-select or multiple-choice answers",
              "type": "string"
            },
            "value": {
              "description": "The score for the selection if provided automated scoring for multiple-select or multiple-choice answers.",
              "type": "string"
            }
          }
        }
      },
      "properties": {
        "interviewFormatType": {
          "description": "The type of interview (asynchronous video, asynchronous audio, live video, live audio, in-person).",
          "$ref": "#/definitions/CodeType"
        },
        "questions": {
          "description": "The collection of questions for a specific interview type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionType"
          }
        },
        "defaultRerecordCount": {
          "description": "The number of times an answer may be rerecorded.",
          "$ref": "#/definitions/NumberType"
        },
        "comments": {
          "description": "Additional information in support of position questions, such as a URL to interviewing system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      }
    },
    "AsynchronousOrderType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AsynchronousOrderType",
      "description": "Provides the information needed to order the Interview.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "positionId": {
          "description": "This is the Position Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "positionTitle": {
          "description": "The position title which might be presented to candidates.",
          "type": "string"
        },
        "externalPositionId": {
          "description": "Identifier used by the requesting system to identify the position.",
          "$ref": "#/definitions/IdentifierType"
        },
        "externalInterviewOrderId": {
          "description": "Identifier used by the requesting system to identify the interview transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "interviewOrderId": {
          "description": "This is the Interview Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "interviewFormatType": {
          "description": "The type of interview (asynchronous video, asynchronous audio, live video, live audio, in-person).",
          "$ref": "#/definitions/CodeType"
        },
        "recruiter": {
          "$ref": "#/definitions/RecruiterContactType"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateContactType"
        },
        "accountCode": {
          "description": "Account Code for use for accounting purposes.",
          "type": "string"
        },
        "submissionDeadline": {
          "description": "The default deadline, in hours or date, for an interview requested for this position.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "languageCode": {
          "description": "The default language in which the position is presented to the outside world.",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "question": {
          "type": "object",
          "$ref": "#/definitions/PositionQuestionsType"
        },
        "comments": {
          "description": "Additional information in support of the order, such as a URL to interviewing system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      }
    },
    "InterviewType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InterviewType",
      "description": "Represents the Interview Specification.",
      "type": "object",
      "properties": {
        "asynchronousOrder": {
          "$ref": "#/definitions/AsynchronousOrderType"
        },
        "interviewPosition": {
          "$ref": "#/definitions/InterviewPositionType"
        },
        "statusNotification": {
          "$ref": "#/definitions/StatusNotificationType_1"
        },
        "synchronousOrder": {
          "$ref": "#/definitions/SynchronousOrderType"
        }
      }
    },
    "RecruiterContactType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RecruiterContactType",
      "description": "The contact information for a recruiter managing the position.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "type": "object",
      "properties": {
        "recruiterName": {
          "description": "The recruiter's name.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PersonNameType"
            }
          ],
          "required": [
            "formattedName"
          ]
        },
        "recruiterContact": {
          "description": "The phone number, email or other communication method for contacting the requesting recruiter.",
          "$ref": "#/definitions/CommunicationType"
        }
      }
    },
    "CandidateContactType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CandidateContactType",
      "description": "Contact information regarding the candidate to invite.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "type": "object",
      "properties": {
        "candidateName": {
          "description": "The candidate's name.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/PersonNameType"
            }
          ]
        },
        "candidateContact": {
          "description": "The phone number, email or other communication method for contacting the candidate.",
          "$ref": "#/definitions/CommunicationType"
        },
        "preferredLanguage": {
          "description": "Preferred language between the candidate and the interviewing system.",
          "$ref": "#/definitions/LanguageCodeList"
        }
      }
    },
    "StatusNotificationType_1": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "StatusNotificationType",
      "description": "Provides the status information related to asyncrhonous interviewing system activity.",
      "type": "object",
      "definitions": {
        "InterviewQuestionsScoreType": {
          "title": "InterviewQuestionsScoreType",
          "description": "The collection of question scores for a specific interview type.",
          "type": "object",
          "properties": {
            "questionScore": {
              "$ref": "#/definitions/BaseScoreType"
            },
            "questionScoreNotes": {
              "$ref": "#/definitions/CommentType"
            }
          }
        },
        "InterviewScoreType": {
          "title": "InterviewScoreType",
          "description": "The score of a specific interview type.",
          "type": "object",
          "properties": {
            "interviewScoreCode": {
              "$ref": "#/definitions/CodeType"
            },
            "interviewScore": {
              "$ref": "#/definitions/BaseScoreType"
            },
            "interviewScoreNotes": {
              "$ref": "#/definitions/CommentType"
            }
          }
        },
        "ReviewerType": {
          "title": "ReviewerType",
          "description": "Information about the person and date/time of the review.",
          "type": "object",
          "properties": {
            "averageRating": {
              "description": "Average rating from the reviewer.",
              "$ref": "#/definitions/NumberType"
            },
            "decision": {
              "description": "Reviewer decision.",
              "$ref": "#/definitions/TextType"
            },
            "reviewerName": {
              "description": "The reviewer's name.",
              "$ref": "#/definitions/PersonNameType"
            },
            "reviewerContact": {
              "description": "The phone number, email or other communication method for contacting the requesting reviewer.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommunicationType"
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "interviewId": {
          "description": "This is the Interview Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "positionId": {
          "description": "This is the Position Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "externalPositionId": {
          "description": "Identifier used by the requesting system to identify the position transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "externalInterviewId": {
          "description": "Identifier used by the requesting system to identify the interview transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "status": {
          "description": "Acknowledged by Provider, Invitations Sent, In Progress, Expired, Complete, Canceled, Position Created, etc.",
          "type": "string"
        },
        "positionCategoryId": {
          "description": "The identifier of a position category. E.g, Manager, Admin, Software, Retail, etc.",
          "$ref": "#/definitions/IdentifierType"
        },
        "questionScores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterviewQuestionsScoreType"
          }
        },
        "interviewScores": {
          "description": "A collection of interview scores.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InterviewScoreType"
          }
        },
        "reviewers": {
          "description": "Reviewers for the interview.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewerType"
          }
        },
        "reviewDateTime": {
          "$ref": "#/definitions/DateTimeType"
        },
        "comments": {
          "description": "Additional information in support of status, such as a URL to interviewing system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      }
    },
    "SynchronousOrderType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SynchronousOrderType",
      "description": "Provides the information needed to order the Interview synchronously.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "positionId": {
          "description": "This is the Position Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "eventId": {
          "description": "TODO: review this. This is the Event Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "positionTitle": {
          "description": "The position title which might be presented to candidates.",
          "type": "string"
        },
        "externalPositionId": {
          "description": "Identifier used by the requesting system to identify the position.",
          "$ref": "#/definitions/IdentifierType"
        },
        "externalInterviewOrderId": {
          "description": "Identifier used by the requesting system to identify the interview transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "interviewOrderId": {
          "description": "This is the Interview Identifier assigned by the interviewing system.",
          "$ref": "#/definitions/IdentifierType"
        },
        "interviewFormatType": {
          "description": "The type of interview (asynchronous video, asynchronous audio, live video, live audio, in-person).",
          "$ref": "#/definitions/CodeType"
        },
        "recruiter": {
          "$ref": "#/definitions/RecruiterContactType"
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateContactType"
          }
        },
        "accountCode": {
          "description": "Account Code for use for accounting purposes.",
          "type": "string"
        },
        "sessions": {
          "description": "The interview sessions.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "TODO: description for name. Session Name?",
                "type": "string"
              },
              "durationMinutes": {
                "description": "TODO: description for durationMinutes",
                "type": "number"
              },
              "startTime": {
                "description": "Start time for the interview sessions with UTC.",
                "$ref": "#/definitions/DateTimeType"
              },
              "participants": {
                "description": "TODO: description for participants",
                "type": "array",
                "items": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PersonNameType"
                    }
                  ],
                  "properties": {
                    "contactEmail": {
                      "$ref": "#/definitions/EmailType"
                    }
                  },
                  "required": [
                    "contactEmail",
                    "formattedName"
                  ]
                }
              }
            }
          }
        },
        "languageCode": {
          "description": "The language used to communicate between the interviewing system, candidate, and participants. (e.g. email or SMS)",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "question": {
          "type": "object",
          "$ref": "#/definitions/PositionQuestionsType"
        },
        "comments": {
          "description": "Additional information in support of the order, such as a URL to interviewing system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        },
        "selfScheduleIndicator": {
          "description": "Indicates the candidate may schedule the interview at their convenience.",
          "$ref": "#/definitions/IndicatorType"
        },
        "interviewAddress": {
          "description": "Contains the address of where the interview will take place.",
          "$ref": "#/definitions/InterviewAddressType"
        }
      }
    },
    "InterviewPositionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InterviewPositionType",
      "description": "Provides the information needed to create a Position for an Interview.",
      "type": "object",
      "definitions": {
        "PositionType": {
          "title": "PositionType",
          "description": "Information about the position.",
          "type": "object",
          "properties": {
            "positionId": {
              "description": "This is the Position Identifier assigned by the interviewing system.",
              "$ref": "#/definitions/IdentifierType"
            },
            "positionTemplate": {
              "description": "The name and Id of a position template.",
              "$ref": "#/definitions/EntityType"
            },
            "positionTitle": {
              "description": "The position title which might be presented to interviewees.",
              "type": "string"
            },
            "positionPublicTitle": {
              "description": "The position title that is presented to the interviewee as opposed to the PositionTitle which is used internally by recruiters to reference the position..",
              "type": "string"
            },
            "positionDescription": {
              "description": "Position description, which may include html or some type of formatting information.",
              "type": "string"
            },
            "positionLocation": {
              "description": "The location of the position..",
              "$ref": "#/definitions/LocationType"
            },
            "positionEndDate": {
              "description": "The end date for the position.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "positionCategory": {
              "description": "A way of grouping positions. E.g, Manager, Admin, Software, Retail, etc.",
              "$ref": "#/definitions/EntityType"
            },
            "themeId": {
              "description": "ID of branding theme this position will use.",
              "$ref": "#/definitions/IdentifierType"
            },
            "interviewFormatArray": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            }
          },
          "required": [
            "interviewFormatArray",
            "positionTitle"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "position": {
          "$ref": "#/definitions/PositionType"
        },
        "recruiter": {
          "$ref": "#/definitions/RecruiterContactType"
        },
        "accountCode": {
          "description": "Account Code for use for accounting purposes.",
          "type": "string"
        },
        "externalId": {
          "description": "Identifier used by the requesting system to identify the position.",
          "$ref": "#/definitions/IdentifierType"
        },
        "submissionDeadline": {
          "description": "The default deadline, in hours or date, for an interview requested for this position.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "languageCode": {
          "description": "The default language in which the position is presented to the outside world.",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "positionQuestions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionQuestionsType"
          }
        },
        "introVideoInId": {
          "description": "ID of video that welcomes the interviewee to the interview.",
          "$ref": "#/definitions/IdentifierType"
        },
        "introVideoOutId": {
          "description": "ID of video that thanks interviewee for their participation.",
          "$ref": "#/definitions/IdentifierType"
        },
        "comments": {
          "description": "Additional information in support of interview position, such as a URL to interviewing system.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      }
    },
    "InitialNotificationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InitialNotificationType",
      "description": "Initial Notification.",
      "type": "object",
      "definitions": {
        "NotificationTypeDependent": {
          "description": ".",
          "type": "object",
          "properties": {
            "dependent": {
              "description": "Information on the dependents associated with a person.",
              "$ref": "#/definitions/DependentType"
            },
            "originalEnrollmentEffectiveDate": {
              "description": "The date the dependent originally enrolled in the plan.",
              "$ref": "#/definitions/DateType"
            },
            "enrollmentEndDate": {
              "description": "The last day of coverage for the dependent in the plan. ",
              "$ref": "#/definitions/DateType"
            }
          }
        }
      },
      "properties": {
        "person": {
          "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/EventParticipantPersonType"
        },
        "primaryDeployment": {
          "$ref": "#/definitions/DeploymentType"
        },
        "waivedCoverage": {
          "description": "Indicator that an employee has waived all COBRA eligible coverage.",
          "$ref": "#/definitions/IndicatorType"
        },
        "notificationTypeCode": {
          "$ref": "#/definitions/NotificationTypeCodeList"
        },
        "sendCOBRAInitialRightsNotificationCode": {
          "$ref": "#/definitions/InitialRightsNotificationCodeList"
        },
        "sendHIPAAInitialRightsNotificationCode": {
          "$ref": "#/definitions/InitialRightsNotificationCodeList"
        },
        "originalEnrollmentEffectiveDate": {
          "description": "The date the employee originally enrolled in the plan.",
          "$ref": "#/definitions/DateType"
        },
        "enrollmentEndDate": {
          "description": "The last day of coverage for the employee in the medical plan.",
          "$ref": "#/definitions/DateType"
        },
        "medicalPlanName": {
          "description": "The name of the plan.",
          "type": "string"
        },
        "coverageLevelTierTypeCode": {
          "description": "The coverage level tier being defined.",
          "$ref": "#/definitions/CoverageLevelTierTypeCodeList"
        },
        "coverageLevelTierTypeValue": {
          "description": "The number of dependents included in the coverageLevelTierType Employee+[X]",
          "type": "integer"
        },
        "notificationTypeDependents": {
          "description": "Information on the dependents associated with a person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationTypeDependent"
          }
        }
      }
    },
    "PlanEligibilityGroupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PlanEligibilityGroupType",
      "description": "Information pertaining to a plan eligibility group.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the Eligibility Group.",
          "$ref": "#/definitions/IdentifierType"
        },
        "eligibilityGroupName": {
          "description": "The Eligibility Group name.",
          "type": "string"
        },
        "effectivePeriod": {
          "description": "The effective period of the Eligibility Group.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "waitingRules": {
          "description": "The rule that defines how long the subscriber must wait before they are eligible to enroll in the plan.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanEligibilityWaitingRuleType"
          }
        },
        "dependentChildAgeLimit": {
          "description": "The type defining the age limit of a dependent child.",
          "$ref": "#/definitions/DependentChildAgeLimitType"
        },
        "terminationRule": {
          "description": "The type defining how coverage in the given plan is impacted due to termination of employment.",
          "$ref": "#/definitions/TerminationRuleType"
        },
        "benefitEarnings": {
          "description": "The earning types used for the given eligibility group.",
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/BenefitEarningsTypeCodeList"
          }
        },
        "dependency": {
          "description": "The type defining the dependency rules for a given coverage.",
          "$ref": "#/definitions/DependencyType"
        },
        "coverageTiers": {
          "description": "The type defining values specific to a given coverage tier of a plan.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoverageTierType"
          }
        },
        "serviceBasedCosts": {
          "description": "The collection of costs (deductibles, copays, out-of-pocket maximums, etc.) for specific services.  These are most often used for decision support",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceBasedCostType"
          }
        }
      },
      "definitions": {
        "PlanEligibilityWaitingRuleType": {
          "description": "The rule that defines how long the subscriber must wait before they are eligible to enroll in the plan.",
          "type": "object",
          "properties": {
            "waitingRuleEventCode": {
              "description": "A code classifying the event associated with the waiting rule.",
              "$ref": "#/definitions/WaitingRuleEventCodeList"
            },
            "waitingRuleTypeCode": {
              "description": "A code classifying the type associated with the waiting rule.",
              "$ref": "#/definitions/WaitingRuleTypeCodeList"
            },
            "rollForwardIndicator": {
              "description": "An indicator as to whether the 'First of month' waiting rule type can be rolled forward to the first of the following month when the hire date falls on the first of the month.",
              "$ref": "#/definitions/IndicatorType"
            },
            "ruleValue": {
              "description": "Value indicating the number of months or days for the waiting rule type code.",
              "type": "integer"
            }
          }
        },
        "DependentChildAgeLimitType": {
          "description": "The type defining the age limit of a dependent child.",
          "type": "object",
          "properties": {
            "ageLimit": {
              "description": "Maximum age at which dependent can be enrolled.",
              "type": "integer"
            },
            "ageLimitCode": {
              "description": "A code classifying the age limit.",
              "$ref": "#/definitions/AgeLimitCodeList"
            },
            "studentAgeLimt": {
              "description": "Maximum age at which a dependent classified as full-time student can be enrolled.",
              "type": "integer"
            }
          }
        },
        "TerminationRuleType": {
          "description": "The type defining how coverage in the given plan is impacted due to termination of employment.",
          "type": "object",
          "properties": {
            "terminationRuleTypeCode": {
              "description": "When an employee is terminated, coverage for this plan terminates according to the selected rule.",
              "$ref": "#/definitions/TerminationRuleTypeCodeList"
            },
            "terminationRuleValue": {
              "description": "Value indicating the number of months or days for the termination rule type code.",
              "type": "integer"
            }
          }
        }
      }
    },
    "AccountBasedCoverageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AccountBasedCoverageType",
      "description": "Enrollment data specific to account based coverage types.",
      "type": "object",
      "properties": {
        "accountBasedProductCode": {
          "description": "@Deprecated Use CoverageType productCode. The code classifying the type of account based product.",
          "$ref": "#/definitions/ProductCodeList"
        },
        "effectivePeriod": {
          "description": "@Deprecated Use CoverageType productCode. A time period during which the enrollment is effective.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "electionType": {
          "description": "@Deprecated. Use elections in CoverageType.",
          "$ref": "#/definitions/ElectionType"
        },
        "taxTypeCode": {
          "description": "The tax type code.",
          "$ref": "#/definitions/ContributionTaxTypeCodeList"
        }
      }
    },
    "COBRAEventType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "COBRAEventType",
      "description": "The data involved with an event associated with a given participant.",
      "type": "object",
      "definitions": {
        "EventParticipantType": {
          "description": "The data involved with an event associated with a given participant.",
          "type": "object",
          "properties": {
            "person": {
              "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
              "$ref": "#/definitions/EventParticipantPersonType"
            },
            "specificRightsNoticeMailedDate": {
              "description": "The date the original COBRA Specific Rights Notice was mailed to the QB.",
              "$ref": "#/definitions/DateType"
            },
            "COBRAElectionIndicator": {
              "description": "The status of the member's COBRA election.",
              "$ref": "#/definitions/IndicatorType"
            },
            "electionFormPostmarkDate": {
              "description": "The date the Election Form was postmarked.",
              "$ref": "#/definitions/DateType"
            },
            "nextPremiumOwedDate": {
              "description": "The month and year when the member’s next premium payment is due. Format MM-DD.",
              "type": "string"
            },
            "disabilityApproved": {
              "description": "Indicates that the disabliity extension confirmation letter was sent to the member.",
              "$ref": "#/definitions/IndicatorType"
            },
            "disabilityDenialReason": {
              "description": "The reason disability was deined.",
              "type": "string"
            },
            "disabilityNotificationPostmarkDate": {
              "description": "The date the Disability Extension Confirmation Letter was mailed either to the member or to the administrator.",
              "$ref": "#/definitions/DateType"
            },
            "disabledDate": {
              "description": "The date the member became disabled.",
              "$ref": "#/definitions/DateType"
            },
            "takeoverLetterIndicator": {
              "description": "Indicates that a Takeover letter will be sent.",
              "$ref": "#/definitions/IndicatorType"
            },
            "conversionLetterIndicator": {
              "description": "Indicates if a Conversion Option Letter has already been sent to the member.",
              "$ref": "#/definitions/IndicatorType"
            },
            "healthCoverageTaxCreditIndicator": {
              "description": "Indicates if the member uses a federal credit for health insurance.",
              "$ref": "#/definitions/IndicatorType"
            },
            "federalSubsidyAssistanceEligibilityIndicator": {
              "description": "Indicates if the member is eligible for federal subsidy assistance, such as ARPA or ARRA.",
              "$ref": "#/definitions/IndicatorType"
            },
            "coverages": {
              "description": "Information about coverages of a person",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CoverageType"
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the event.",
          "$ref": "#/definitions/IdentifierType"
        },
        "eventDate": {
          "description": "The date of the event.",
          "$ref": "#/definitions/DateType"
        },
        "eventCode": {
          "description": "The code of the event.",
          "$ref": "#/definitions/EventCodeList"
        },
        "eventPraticipants": {
          "type": "array",
          "description": "The details of the participants for the given event.",
          "items": {
            "$ref": "#/definitions/EventParticipantType"
          }
        }
      }
    },
    "OutOfPocketMaximumType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OutOfPocketMaximumType",
      "description": "The type defining an out-of-pocket maximum amount the participant is liable for over a unit time.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceBasedCostBaseType"
        }
      ],
      "properties": {
        "outOfPocketMaximumAmount": {
          "description": "The maximum amount the participant is liable for over a unit time.",
          "$ref": "#/definitions/AmountType"
        },
        "unitTime": {
          "description": "The unit of time that applies to the out of pocket maximum.",
          "enum": [
            "Annual",
            "Lifetime"
          ]
        },
        "serviceApplicability": {
          "enum": [
            "Orthodontics",
            "GeneralOutOfPocketLimit"
          ]
        }
      },
      "required": [
        "outOfPocketMaximumAmount",
        "unitTime"
      ]
    },
    "DependentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DependentType",
      "description": "Contains information to describe the dependent, including the relationship between the primary insured and dependent.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the coverage.",
          "$ref": "#/definitions/IdentifierType"
        },
        "relationshipCode": {
          "description": "The code classifying the dependent type.",
          "$ref": "#/definitions/FamilyRelationshipCodeList"
        },
        "person": {
          "description": "Information to identify the dependent, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/SubscriberPersonType"
        },
        "custodialParent": {
          "description": "Information to identify the custodial parent for the dependent.",
          "$ref": "#/definitions/PersonReferenceType"
        },
        "responsible": {
          "description": "Information to identify the person financially responsible for the dependent.",
          "$ref": "#/definitions/SpecifiedPersonType"
        },
        "fullTimeStudentIndicator": {
          "description": "Indicator of the dependents full time student status.",
          "$ref": "#/definitions/IndicatorType"
        },
        "educationOrganization": {
          "description": "Information pertaining to the dependents education organization for student status verfication.",
          "$ref": "#/definitions/OrganizationType"
        }
      }
    },
    "DeductibleType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DeductibleType",
      "description": "The type defining a single deductible for a plan.  The deductible refers to a particular service type (e.g., individual in-network) and a deductibe amount associated with the service type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceBasedCostBaseType"
        }
      ],
      "properties": {
        "deductibleAmount": {
          "description": "The dollar amount a participant must pay before coverage is applied through the plan for this service.",
          "$ref": "#/definitions/AmountType"
        }
      },
      "required": [
        "deductibleAmount"
      ]
    },
    "ElectionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ElectionType",
      "description": "The detail of a given election including the amount, frequency and source.",
      "type": "object",
      "definitions": {
        "ReimbursmentMethodType": {
          "properties": {
            "reimbursmentMethodTypePriorityCode": {
              "description": "The priority of the options available for an employee to receive their funds.",
              "$ref": "#/definitions/ReimbursmentMethodTypePriorityCodeList"
            },
            "reimbursmentMethodTypeCode": {
              "description": "The way an employee receives their funds.",
              "$ref": "#/definitions/ReimbursmentMethodTypeCodeList"
            }
          }
        }
      },
      "properties": {
        "amount": {
          "description": "The amount of the given election.",
          "$ref": "#/definitions/AmountType"
        },
        "frequencyCode": {
          "description": "The frequency of the given election.",
          "$ref": "#/definitions/ElectionFrequencyCodeList"
        },
        "contributorCode": {
          "description": "A code identifying the source of the election.",
          "$ref": "#/definitions/ContributorCodeList"
        },
        "reimbursmentMethods": {
          "description": "The preferred way for an employee to receive their funds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReimbursmentMethodType"
          }
        },
        "amountTypeCode": {
          "description": "Determines if the election amount is a percentage or a flat dollar amount.",
          "$ref": "#/definitions/AmountQualifierCodeList"
        }
      }
    },
    "CoverageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageType",
      "description": "Describes the coverage details such as plan and group id, and the organization carrying the plan.",
      "type": "object",
      "definitions": {
        "BeneficiaryType": {
          "allOf": [
            {
              "$ref": "#/definitions/PersonBaseType"
            }
          ],
          "type": "object",
          "properties": {
            "familyRelationshipCode": {
              "description": "The relationship of the person in the family.",
              "$ref": "#/definitions/FamilyRelationshipCodeList"
            },
            "beneficiaryPriorityCode": {
              "description": "The beneficiary priority code.",
              "$ref": "#/definitions/BeneficiaryPriorityCodeList"
            },
            "designations": {
              "description": "The designation for the given beneficiary.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignationType"
              }
            }
          }
        },
        "ParticipantType": {
          "type": "object",
          "properties": {
            "id": {
              "description": "Unique alphanumeric identifier for the coverage.",
              "$ref": "#/definitions/IdentifierType"
            },
            "familyRelationshipCode": {
              "description": "The relationship of the person in the family.",
              "$ref": "#/definitions/FamilyRelationshipCodeList"
            }
          }
        },
        "DesignationType": {
          "type": "object",
          "properties": {
            "designationTypeCode": {
              "description": "A code identifying the qualifier of the amount.",
              "$ref": "#/definitions/AmountQualifierCodeList"
            },
            "designationTypeAmount": {
              "description": "The type of the amount.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "PrimaryCareProviderType": {
          "description": "The heath care practitoner associated with the coverage.",
          "properties": {
            "idNumber": {
              "description": "The identification number of the heath care practitoner associated with the coverage.",
              "$ref": "#/definitions/IdentifierType"
            },
            "firstName": {
              "description": "The first name of the health care practitioner associated with the coverage.",
              "type": "string"
            },
            "lastName": {
              "description": "The last name of the health care practitioner associated with the coverage.",
              "type": "string"
            }
          }
        },
        "SubsidyType": {
          "description": "",
          "properties": {
            "startDate": {
              "description": "The date the subsidy begins.",
              "$ref": "#/definitions/DateType"
            },
            "endDate": {
              "description": "The date the subsidy ends.",
              "$ref": "#/definitions/DateType"
            },
            "severanceTypeCode": {
              "description": "Determines who is funding the subsidy. Eg. Employer or Government.",
              "$ref": "#/definitions/SeveranceTypeCodeList"
            },
            "severanceAmountType": {
              "description": "Determines if the subisdies severance amount is a percentage of the premium or a fixed dollar amount.",
              "$ref": "#/definitions/AmountQualifierCodeList"
            },
            "severanceAmount": {
              "description": "Percentage of premiums or flat dollar amount the employer subsidizes for coverage.",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the coverage.",
          "$ref": "#/definitions/IdentifierType"
        },
        "electedPlanId": {
          "description": "Unique alphanumeric identifier for the plan.",
          "$ref": "#/definitions/IdentifierType"
        },
        "electedEligibilityGroupId": {
          "description": "Unique alphanumeric identifier for the elected eligibility group.",
          "$ref": "#/definitions/IdentifierType"
        },
        "electedLegalPlanName": {
          "description": "The legal name of the elected plan.",
          "type": "string"
        },
        "electedEligibilityGroupName": {
          "description": "The name of the elected eligibility group.",
          "type": "string"
        },
        "groupNumberId": {
          "description": "Unique alphanumeric identifier for the group.",
          "$ref": "#/definitions/IdentifierType"
        },
        "carrierOrganization": {
          "description": "Basic information to reference a specific organization.",
          "$ref": "#/definitions/OrganizationReferenceType"
        },
        "deductionInstructions": {
          "description": "Deprecated. Use deductionInstruction.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationOrDeductionType"
          }
        },
        "deductionInstruction": {
          "description": "Instructions for benefits deductions. Note: updated to object from type array ",
          "$ref": "#/definitions/RemunerationOrDeductionType"
        },
        "productCode": {
          "description": "The code classifying the type of product.",
          "$ref": "#/definitions/BenefitProductCodeList"
        },
        "coverageLevelTierTypeCode": {
          "description": "The coverage level tier of the election.",
          "$ref": "#/definitions/CoverageLevelTierTypeCodeList"
        },
        "coverageLevelTierTypeValue": {
          "description": "The number of dependents included in the coverageLevelTierType Employee+[X]",
          "type": "integer"
        },
        "questionAnswers": {
          "description": "Questions and answers which may be applicable to a given entity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswerType"
          }
        },
        "effectivePeriod": {
          "description": "The effective period of the coverage.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "signatureDate": {
          "description": "The date on which the enrollment form is signed, or the date the electronic enrollment is made.",
          "$ref": "#/definitions/DateType"
        },
        "eligibilityDate": {
          "description": "Date indicating when a participants eligbility in a given plan began.",
          "$ref": "#/definitions/DateType"
        },
        "primaryCareProvider": {
          "description": "The heath care practitoner associated with the coverage.",
          "$ref": "#/definitions/PrimaryCareProviderType"
        },
        "participants": {
          "description": "The person(s) eligible to receive distribution from the elected coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParticipantType"
          }
        },
        "beneficiaries": {
          "description": "The person(s) or organization(s) eligible to receive distribution from the elected coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BeneficiaryType"
          }
        },
        "memberSpecificRateAmount": {
          "description": "The premium amount charged to the member for coverage used when plan rates are not already defined or are individually rated. When providing rates, do not include the 2% administrative fee paid by the member.",
          "$ref": "#/definitions/AmountType"
        },
        "memberSpecificRateStartDate": {
          "description": "The date the member specific rate begins.",
          "$ref": "#/definitions/DateType"
        },
        "memberSpecificRateEndDate": {
          "description": "The date the member specific rate ends.",
          "$ref": "#/definitions/DateType"
        },
        "memberSpecificRateAmountPaid": {
          "description": "The premium amount paid by the member for elected coverage.",
          "$ref": "#/definitions/AmountType"
        },
        "memberSpecificRatePaidThroughDate": {
          "description": "The date through which the premium amount is paid.",
          "$ref": "#/definitions/DateType"
        },
        "subsidies": {
          "description": ".",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubsidyType"
          }
        },
        "elections": {
          "description": "The detail of a given election including the amount, frequency and source.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElectionType"
          }
        },
        "accountDetail": {
          "description": "Information on the account based coverages of a person.",
          "$ref": "#/definitions/AccountBasedCoverageType"
        },
        "rateDetail": {
          "description": "Information on the rate based coverages of a person.",
          "$ref": "#/definitions/RateBasedCoverageType"
        },
        "dependency": {
          "description": "The type defining the dependency rules for a given coverage.",
          "$ref": "#/definitions/DependencyType"
        }
      }
    },
    "BenefitsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BenefitsType",
      "description": "Represents the Benefits Specification.",
      "type": "object",
      "properties": {
        "census": {
          "$ref": "#/definitions/CensusType"
        },
        "enrollment": {
          "$ref": "#/definitions/EnrollmentType"
        },
        "planSetup": {
          "$ref": "#/definitions/PlanSetupType"
        },
        "employerOrganization": {
          "$ref": "#/definitions/OrganizationType"
        }
      }
    },
    "ServiceBasedCostType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ServiceBasedCostType",
      "description": "The fields defining non-premium costs for specific services (for example, out-of-network outpatient hospital care) useful for decision support but not directly affecting employee or employer premiums or rules governing enrollment.",
      "type": "object",
      "properties": {
        "deductibles": {
          "description": "The deductible refers to a particular service type (e.g., individual in-network) and a deductibe amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeductibleType"
          }
        },
        "coinsurance": {
          "description": "The coinsurance refers to a particular service type (e.g., in-network) and a coinsurance percentage associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoinsuranceType"
          }
        },
        "copays": {
          "description": "The copay refers to a particular service type (e.g., in-network) and a copay dollar amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CopayType"
          }
        },
        "outOfPocketMaximums": {
          "description": "The type defining an out-of-pocket maximum amount the participant is liable for over a unit time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutOfPocketMaximumType"
          }
        }
      }
    },
    "QuestionAnswerType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "QuestionAnswerType",
      "description": "Questions and answers which may be applicable to a given entity.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for a question that may be required when an enrollment in the plan occurs.",
          "$ref": "#/definitions/IdentifierType"
        },
        "questionSetId": {
          "description": "Unique alphanumeric identifier for a set that a question belongs in.",
          "$ref": "#/definitions/IdentifierType"
        },
        "question": {
          "description": "The question that may require an answer when an enrollment in the plan occurs.",
          "type": "string"
        },
        "answer": {
          "description": "The answer of the question-answer pair.",
          "type": "string"
        },
        "timestamp": {
          "description": "The timestamp of the question-answer pair.",
          "$ref": "#/definitions/DateTimeType"
        }
      }
    },
    "EmploymentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmploymentType",
      "description": "This data type has been deprecated.  WorkLifeCycleType will be used instead. Describes the work life cycle of a person, i.e details for leave of absence, termination or retirement. ",
      "definitions": {
        "BenefitsHireType": {
          "type": "object",
          "properties": {
            "typeCode": {
              "enum": [
                "NewHire",
                "Rehire",
                "Acquisition",
                "Transfer"
              ]
            },
            "date": {
              "$ref": "#/definitions/DateType"
            },
            "firstWorkDate": {
              "$ref": "#/definitions/DateType"
            },
            "expectedFirstWorkDate": {
              "$ref": "#/definitions/DateType"
            },
            "originalDate": {
              "$ref": "#/definitions/DateType"
            },
            "adjustedDate": {
              "$ref": "#/definitions/DateType"
            },
            "cancelDate": {
              "$ref": "#/definitions/DateType"
            }
          }
        },
        "BenefitsLeaveType": {
          "type": "object",
          "properties": {
            "statusCode": {
              "enum": [
                "Active",
                "Inactive"
              ]
            },
            "remunerationCode": {
              "enum": [
                "Paid",
                "Unpaid"
              ]
            },
            "reasonCode": {
              "$ref": "#/definitions/CodeType"
            },
            "startDate": {
              "$ref": "#/definitions/DateType"
            },
            "lastWorkedDate": {
              "$ref": "#/definitions/DateType"
            },
            "lastPaidDate": {
              "$ref": "#/definitions/DateType"
            },
            "scheduledWorkReturnDate": {
              "$ref": "#/definitions/DateType"
            },
            "workReturnDate": {
              "$ref": "#/definitions/DateType"
            }
          }
        },
        "BenefitsTerminationType": {
          "type": "object",
          "properties": {
            "reasonCode": {
              "$ref": "#/definitions/CodeType"
            },
            "date": {
              "$ref": "#/definitions/DateType"
            },
            "lastWorkedDate": {
              "$ref": "#/definitions/DateType"
            },
            "lastPaidDate": {
              "$ref": "#/definitions/DateType"
            }
          }
        },
        "BenefitsRetirementType": {
          "type": "object",
          "properties": {
            "intendedDate": {
              "$ref": "#/definitions/DateType"
            },
            "firstDayDate": {
              "$ref": "#/definitions/DateType"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "hire": {
          "$ref": "#/definitions/BenefitsHireType"
        },
        "leave": {
          "$ref": "#/definitions/BenefitsLeaveType"
        },
        "termination": {
          "$ref": "#/definitions/BenefitsTerminationType"
        },
        "retirement": {
          "$ref": "#/definitions/BenefitsRetirementType"
        }
      }
    },
    "EnrollmentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EnrollmentType",
      "description": "The data involved in initial creation and maintenance of employee benefit changes.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "person": {
          "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/SubscriberPersonType"
        },
        "employee": {
          "description": "Deprecated. Use Common/Deployment instead.",
          "$ref": "#/definitions/EmployeeType"
        },
        "employment": {
          "description": "Deprecated. Use common/WorkLifeCycle instead.",
          "$ref": "#/definitions/EmploymentType"
        },
        "employeeWorkLifeCycle": {
          "description": "Information to specify details on the employee life cycle. For example, Hire Date, Leave Expected Return Date, etc.",
          "$ref": "#/definitions/WorkLifeCycleType"
        },
        "deployment": {
          "description": "Information about an employee's deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentType"
          }
        },
        "dependents": {
          "description": "Information on the dependents of a person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentType"
          }
        },
        "accountBasedCoverage": {
          "description": "Deprecated: Use coverages. coverage type for election based coverage - e.g., FSA, Retirement/Savings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountBasedCoverageType"
          }
        },
        "rateBasedCoverage": {
          "description": "Deprecated: Use coverages. Information on the rate based coverages of a person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RateBasedCoverageType"
          }
        },
        "coverages": {
          "description": "Information about coverages of a person",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoverageType"
          }
        }
      }
    },
    "NetworkBasedAttributeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NetworkBasedAttributeType",
      "description": "The type defining attributes for network-based services -e.g., copays, coinsurances, deductibles, etc., which are based on an in-network or out-of-network designation.",
      "type": "object",
      "properties": {
        "copays": {
          "description": "The copay refers to a particular service type (e.g., in-network) and a copay dollar amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CopayType"
          }
        },
        "coinsurances": {
          "description": "The coinsurance refers to a particular service type (e.g., in-network) and a coinsurance percentage associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoinsuranceType"
          }
        },
        "deductibles": {
          "description": "The deductible refers to a particular service type (e.g., individual in-network) and a deductibe amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeductibleType"
          }
        },
        "OutOfPocketLimits": {
          "description": "The type defining an out-of-pocket maximum amount the participant is liable for over a unit time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeductibleType"
          }
        }
      },
      "definitions": {
        "copays": {
          "description": "The copay refers to a particular service type (e.g., in-network) and a copay dollar amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CopayType"
          }
        },
        "coinsurances": {
          "description": "The coinsurance refers to a particular service type (e.g., in-network) and a coinsurance percentage associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CoinsuranceType"
          }
        },
        "deductibles": {
          "description": "The deductible refers to a particular service type (e.g., individual in-network) and a deductibe amount associated with the service type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeductibleType"
          }
        },
        "OutOfPocketLimits": {
          "description": "The type defining an out-of-pocket maximum amount the participant is liable for over a unit time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeductibleType"
          }
        }
      }
    },
    "CopayType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CopayType",
      "description": "The type defining a single copay for a plan.  The copay refers to a particular service type (e.g., in-network) and a copay dollar amount associated with the service type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceBasedCostBaseType"
        }
      ],
      "properties": {
        "copayAmount": {
          "description": "The percentage of coverage a participant must pay for this service.",
          "$ref": "#/definitions/AmountType"
        }
      },
      "required": [
        "copayAmount"
      ]
    },
    "PlanSetupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PlanSetupType",
      "description": "Plan setup type",
      "definitions": {
        "WaitingRuleType": {
          "description": "The rule that defines how long the subscriber must wait before they are eligible to enroll in the plan.",
          "type": "object",
          "properties": {
            "waitingRuleEventCode": {
              "description": "A code classifying the event associated with the waiting rule.",
              "$ref": "#/definitions/WaitingRuleEventCodeList"
            },
            "waitingRuleTypeCode": {
              "description": "A code classifying the type associated with the waiting rule.",
              "$ref": "#/definitions/WaitingRuleTypeCodeList"
            },
            "rollForwardIndicator": {
              "description": "An indicator as to whether the ‘First of month’ waiting rule type can be rolled forward to the first of the following month when the hire date falls on the first of the month.",
              "$ref": "#/definitions/IndicatorType"
            },
            "ruleValue": {
              "description": "Value indicating the number of months or days for the waiting rule type code.",
              "type": "integer"
            }
          }
        },
        "FinalFilingRuleType": {
          "description": "An indicator that defines how long a participant has to file a claim against the plan.",
          "type": "object",
          "properties": {
            "finalFilingRuleCode": {
              "description": "A code classifying the participant's employment status associated with the final filing rule.",
              "$ref": "#/definitions/FinalFilingRuleCodeList"
            },
            "finalFilingRuleTypeCode": {
              "description": "A code classifying the type associated with the final filing rule.",
              "$ref": "#/definitions/FinalFilingRuleTypeCodeList"
            },
            "finalFilingRuleValue": {
              "description": "Value indicating the number of days for the final filing rule type code.",
              "type": "integer"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the plan setup.",
          "$ref": "#/definitions/IdentifierType"
        },
        "productCode": {
          "description": "The code classifying the type of product.",
          "$ref": "#/definitions/BenefitProductCodeList"
        },
        "productDescription": {
          "description": "A description to identify the type of plan.",
          "type": "string"
        },
        "legalPlanName": {
          "description": "The legal name of the plan.",
          "type": "string"
        },
        "displayPlanName": {
          "description": "The display name of the plan.",
          "type": "string"
        },
        "alternateId": {
          "description": "The alternate identifier of the plan.",
          "$ref": "#/definitions/IdentifierType"
        },
        "groupNumberId": {
          "description": "Unique alphanumeric identifier for the group who the plan belongs.",
          "$ref": "#/definitions/IdentifierType"
        },
        "carrierOrganization": {
          "description": "Basic information to reference a specific organization.",
          "$ref": "#/definitions/OrganizationReferenceType"
        },
        "effectivePeriod": {
          "description": "The effective period of the plan.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "originalEffectiveDate": {
          "description": "The first start date that this plan is effective. This date will stay the same accross multiple effective periods for the plan.",
          "$ref": "#/definitions/DateType"
        },
        "terminationDate": {
          "description": "The last date that this plan is effective.",
          "$ref": "#/definitions/DateType"
        },
        "countryCode": {
          "description": "Two letter country codes as defined by ISO 3166-1:2013. Content referenced from Wikipedia.",
          "$ref": "#/definitions/CountryCodeList"
        },
        "planAnniversary": {
          "description": "The month and day of plan renewal. Format MM-DD.",
          "type": "string"
        },
        "limitedPurposeConversionIndicator": {
          "description": "An Indicator as to whether the limited purpose plan can convert to a full purpose plan based upon a specified deductible.",
          "$ref": "#/definitions/IndicatorType"
        },
        "COBRAEligibleIndicator": {
          "description": "An indicator as to whether an enrollee of the plan may be eligible for COBRA.",
          "$ref": "#/definitions/IndicatorType"
        },
        "COBRAEnrollmentIndicator": {
          "description": "An indicator as to whether the plan restricts enrollments to only COBRA participants.",
          "$ref": "#/definitions/IndicatorType"
        },
        "directBillEligibleIndicator": {
          "description": "An indicator as to whether the plan is available to direct bill participants.",
          "$ref": "#/definitions/IndicatorType"
        },
        "stateContinuationIndicator": {
          "description": "An indicator as to whether the plan is eligible for state continuation.",
          "$ref": "#/definitions/IndicatorType"
        },
        "gracePeriod": {
          "description": "The number of days expenses can be incurred after the plan year end date.",
          "type": "integer"
        },
        "finalFilingRule": {
          "description": "Defines how long a participant has to file a claim against the plan.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinalFilingRuleType"
          }
        },
        "debitCardIndicator": {
          "description": "An indicator as to whether the plan allows debit card as a form of reimbursement.",
          "$ref": "#/definitions/IndicatorType"
        },
        "billingCutoff": {
          "description": "The day of month on which all effective dated information is pulled for invoice purposes.",
          "type": "integer"
        },
        "retroactiveChangeLimitMonths": {
          "description": "The number of months a retroactive change, such as a termination, will be credited for on an invoice.",
          "type": "integer"
        },
        "highDeductibleHealthPlanIndicator": {
          "description": "An indicator of a High Deductible Health Plan (HDHP), which is a requirement for being enrolled in a Health Savings Account (HSA) plan. ",
          "$ref": "#/definitions/IndicatorType"
        },
        "questionAnswers": {
          "description": "Questions and answers which may be applicable to a given entity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswerType"
          }
        },
        "planEligibilityGroups": {
          "description": "Information pertaining to a plan eligibility group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanEligibilityGroupType"
          }
        },
        "accountBasedPlanSetupType": {
          "description": "Deprecated: Use PlanEligibilityGroupType.",
          "$ref": "#/definitions/AccountBasedPlanSetupType"
        },
        "carryOverAmount": {
          "description": "Deprecated: Use CarryOverAmountType in CoverageTierType.",
          "$ref": "#/definitions/AmountType"
        },
        "waitingRuleType": {
          "description": "Deprecated: Use waitingRuleType in PlanEligibilityGroupType.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WaitingRuleType"
          }
        },
        "providerId": {
          "description": "Deprecated: Use Carrier Organization.",
          "$ref": "#/definitions/IdentifierType"
        }
      }
    },
    "RateBasedCoverageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateBasedCoverageType",
      "description": "Specifies details for rate-based coverage (typically voluntary benefits offered by an employer), such as type and dates of coverage. ",
      "definitions": {
        "CoverageLevelType": {
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/AmountType"
            },
            "multiplier": {
              "$ref": "#/definitions/NumberType"
            },
            "typeCode": {
              "$ref": "#/definitions/CoverageLevelTypeCodeList"
            },
            "volumeAmount": {
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "RatedBasedBeneficiaryType": {
          "allOf": [
            {
              "$ref": "#/definitions/PersonBaseType"
            }
          ],
          "type": "object",
          "properties": {
            "designationSequence": {
              "$ref": "#/definitions/PercentType"
            },
            "familyRelationshipCode": {
              "$ref": "#/definitions/FamilyRelationshipCodeList"
            },
            "inheritanceAmount": {
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "VolumeType": {
          "type": "object",
          "description": "Information pertaining to the volumes elected for the coverage.",
          "properties": {
            "volumeTypeCode": {
              "description": "The type of volume being defined.",
              "$ref": "#/definitions/VolumeTypeCodeList"
            },
            "volumeAmount": {
              "description": "The amount of the volume.",
              "$ref": "#/definitions/AmountType"
            },
            "volumeMultiplier": {
              "description": "The multiple used to calculate the volume.",
              "type": "string"
            },
            "volumeMultiplierCode": {
              "description": "The multiple used to calculate the volume.",
              "$ref": "#/definitions/VolumeMultiplierCodeList"
            },
            "volumeRateAmount": {
              "description": "The amount of the given rate.",
              "$ref": "#/definitions/AmountType"
            },
            "volumeRateUnit": {
              "description": "The unit of the given rate.",
              "$ref": "#/definitions/RateUnitCodeList"
            },
            "volumeDescription": {
              "description": "A description of the volume suitable to the user.",
              "type": "string"
            },
            "eligibleVolumeCode": {
              "description": "The unit of the given rate.",
              "$ref": "#/definitions/EligibleVolumeCodeList"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "eligibilityRegionCode": {
          "description": "A code indicating the participants eligibility region.",
          "$ref": "#/definitions/CodeType"
        },
        "lateEntrantIndicator": {
          "description": "Indicator of the election occuring outside of the period of time the participant is eligible.",
          "$ref": "#/definitions/IndicatorType"
        },
        "volumes": {
          "description": "Information pertaining to the volumes elected for the coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeType"
          }
        },
        "eoiOnFileWithEmployerIndicator": {
          "description": "Indicates if the Evidence of Insurability document is on file with the employer.",
          "$ref": "#/definitions/IndicatorType"
        },
        "eoiRequiredIndictator": {
          "description": "Indicates if the Evidence of Insurability document is required.",
          "$ref": "#/definitions/IndicatorType"
        },
        "lifeCoverageStatus": {
          "description": "Provides the status as it pertains to the life coverage.",
          "$ref": "#/definitions/LifeCoverageStatusCodeList"
        },
        "rateBasedProductCode": {
          "description": "@Deprecated Use CoverageType productCode.",
          "$ref": "#/definitions/RateBasedProductCodeList"
        },
        "coverageEntityCode": {
          "description": "@Deprecated.",
          "$ref": "#/definitions/CoverageEntityCodeList"
        },
        "effectivePeriod": {
          "description": "@Deprecated, use CoverageType effectivePeriod.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "approvedCoverageLevel": {
          "description": "@Deprecated.",
          "$ref": "#/definitions/CoverageLevelType"
        },
        "requestedCoverageLevel": {
          "description": "@Deprecated.",
          "$ref": "#/definitions/CoverageLevelType"
        },
        "questionAnswerPair": {
          "description": "@Deprecated. Use CoverageType",
          "type": "string"
        },
        "beneficiary": {
          "description": "@Deprecated. Use CoverageType",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RatedBasedBeneficiaryType"
          }
        },
        "productTypeCode": {
          "description": "@Deprecated Use CoverageType productCode.",
          "$ref": "#/definitions/RateBasedProductSubTypeCodeList"
        }
      }
    },
    "CoinsuranceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoinsuranceType",
      "description": "The type defining a single coinsurance for a plan.  The coinsurance refers to a particular service type (e.g., in-network) and a coinsurance percentage associated with the service type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServiceBasedCostBaseType"
        }
      ],
      "properties": {
        "coinsuranceAmount": {
          "description": "The percentage of coverage a participant must pay for this service.",
          "$ref": "#/definitions/PercentType"
        }
      },
      "required": [
        "coinsuranceAmount"
      ]
    },
    "CoverageTierType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageTierType",
      "description": "The type defining values specific to a given coverage tier of a plan.",
      "type": "object",
      "definitions": {
        "CarryOverAmountType": {
          "description": "The type defining the amount that can be carried over to subsequent plan years for a given plan.",
          "type": "object",
          "properties": {
            "percentage": {
              "description": "The percentage of remaining dollar amount that can be carried over to subsequent plan year.",
              "$ref": "#/definitions/PercentType"
            },
            "minimumDollarAmount": {
              "description": "The minimum dollar amount that be carried over to subsequent plan year.",
              "$ref": "#/definitions/AmountType"
            },
            "maximumDollarAmount": {
              "description": "The maximum dollar amount that be carried over to subsequent plan year.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "SurchargeType": {
          "description": "The type defining any surcharges that apply to a given plan.",
          "type": "object",
          "properties": {
            "surchargeCode": {
              "description": "Defines when the surcharge applies.",
              "$ref": "#/definitions/SurchargeCodeList"
            },
            "surchargeAmount": {
              "description": "The amount of the surcharge.",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "properties": {
        "id": {
          "description": "Unique alphanumeric identifier for the event.",
          "$ref": "#/definitions/IdentifierType"
        },
        "coverageLevelTierTypeCode": {
          "description": "The coverage level tier being defined.",
          "$ref": "#/definitions/CoverageLevelTierTypeCodeList"
        },
        "coverageLevelTierTypeValue": {
          "description": "The number of dependents included in the coverageLevelTierType Employee+[X]",
          "type": "integer"
        },
        "carryOverAmount": {
          "description": "The type defining the amount that can be carried over to subsequent plan years for a given plan.",
          "$ref": "#/definitions/CarryOverAmountType"
        },
        "surcharges": {
          "description": "The array defining any surcharges that apply to a given plan.",
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SurchargeType"
          }
        },
        "accountDetails": {
          "description": "The array defining the account details for a given plan.",
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccountBasedPlanSetupType"
          }
        },
        "rateDetail": {
          "description": "The type defining the rate details of a given plan.",
          "$ref": "#/definitions/RateBasedPlanSetupType"
        }
      }
    },
    "DependencyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DependencyType",
      "description": "The type defining the dependency rules for a given coverage.",
      "type": "object",
      "definitions": {
        "DependencyItemType": {
          "description": "A container for a plan and eligibility group identifier which refers to a coverage that must or must not be elected prior to enrolling in a given line of coverage.",
          "type": "object",
          "properties": {
            "dependentPlanIdentifier": {
              "description": "Unique alphanumeric identifier for a coverage that is a prerequisite for enrollment in this plan.",
              "$ref": "#/definitions/IdentifierType"
            },
            "dependentPlanAlternateId": {
              "description": "Alternate unique alphanumeric identifier for a coverage that is a prerequisite for enrollment in this plan.",
              "$ref": "#/definitions/IdentifierType"
            },
            "dependentProductCode": {
              "description": "The code classifying the type of product for a coverage that is a prerequisite for enrollment in this plan.",
              "$ref": "#/definitions/BenefitProductCodeList"
            },
            "dependentEligibilityGroupName": {
              "description": "The Eligibility Group name for a coverage that is a prerequisite for enrollment in this plan.",
              "type": "string"
            },
            "dependentEligibilityGroupId": {
              "description": "The Eligibility Group identifier for a coverage that is a prerequisite for enrollment in this plan.",
              "$ref": "#/definitions/IdentifierType"
            }
          }
        }
      },
      "properties": {
        "mustEnrollInAllOf": {
          "description": "Array of plan identifiers, all of which must be elected prior to electing the given coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyItemType"
          }
        },
        "mustEnrollInSomeOf": {
          "description": "Array of plan identifiers, at least one of which must be elected prior to electing the given coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyItemType"
          }
        },
        "mustEnrollInNoneOf": {
          "description": "Array of plan identifiers, none of which may be elected prior to electing the given coverage.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyItemType"
          }
        },
        "coverageDependencyCode": {
          "description": "The code defining the requirement or dependency rules on this plan.",
          "$ref": "#/definitions/CoverageDependencyCodeList"
        },
        "coverageDependencyPercent": {
          "description": "The coverage dependency code percent.",
          "$ref": "#/definitions/AmountType"
        }
      }
    },
    "RateBasedPlanSetupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateBasedPlanSetupType",
      "description": "Rate Based Plan set up type.",
      "definitions": {
        "AgeReductionType": {
          "description": "Array of age and reduction amount.",
          "type": "object",
          "properties": {
            "ageThreshold": {
              "description": "The age at which the reduction in coverage occurs.",
              "type": "integer"
            },
            "percentReduction": {
              "description": "The amount by which the coverage will be reduced.",
              "type": "integer"
            }
          }
        }
      },
      "properties": {
        "roundingRuleCode": {
          "description": "The method by which the benefit coverage should be rounded.",
          "$ref": "#/definitions/RoundingRuleCodeList"
        },
        "ageReductionType": {
          "description": "Array of age and reduction amount.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgeReductionType"
          }
        },
        "ageCalculationRuleCode": {
          "description": "Specify when a participant will enter a new age band which may impact the coverage.",
          "$ref": "#/definitions/AgeCalculationRuleCodeList"
        },
        "ageBandParticipantTypeCode": {
          "description": "The participant whose age will be used to determine the rate.",
          "$ref": "#/definitions/ParticipantCodeList"
        },
        "tobaccoUseParticipantTypeCode": {
          "description": "The participant whose tobacco usage will be used to determine the rate.",
          "$ref": "#/definitions/ParticipantCodeList"
        },
        "ageFreezingCode": {
          "description": "The rules defining when premiums change based on age.",
          "$ref": "#/definitions/AgeFreezingCodeList"
        },
        "evidenceOfInsurabilityCode": {
          "description": "The array of instances of when evidence of insurability is required for the plan.",
          "$ref": "#/definitions/EvidenceOfInsurabilityCodeList"
        },
        "rateType": {
          "description": "The type defining the rates of a given plan.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlanRateType"
          }
        }
      }
    },
    "EventParticipantPersonType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EventParticipantPersonType",
      "description": "A collection of information containing relevant person information for a benefits plan subscriber.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriberPersonType"
        }
      ],
      "properties": {
        "eventBeneficiaryTypeCode": {
          "description": "Code describing the qualification status of an indivdual.",
          "$ref": "#/definitions/EventBeneficiaryCodeList"
        },
        "relationshipTypeCode": {
          "description": "The code classifying the relationship of an event participant.",
          "$ref": "#/definitions/FamilyRelationshipCodeList"
        },
        "wageHourLawCoverageIndicator": {
          "description": "This determines if a person is covered by wage hour laws. In the US, a person would be considered non-exempt if the indicator is true (they are covered under the law).",
          "$ref": "#/definitions/IdentifierType"
        },
        "employeeWorkLifeCycle": {
          "description": "Information to specify details on the employee life cycle. For example, Hire Date, Leave Expected Return Date, etc.",
          "$ref": "#/definitions/WorkLifeCycleType"
        },
        "deployment": {
          "description": "Information about an employee's deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentType"
          }
        },
        "fullTimeStudentIndicator": {
          "description": "Indicator of the dependents full time student status.",
          "$ref": "#/definitions/IndicatorType"
        }
      }
    },
    "AccountBasedPlanSetupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AccountBasedPlanSetupType",
      "description": "The type defining the account details of a given plan.",
      "type": "object",
      "definitions": {
        "EmployerContributionType": {
          "type": "object",
          "properties": {
            "contributionType": {
              "$ref": "#/definitions/EmployerContributionCodeList"
            },
            "contributionAmount": {
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "properties": {
        "contributionTypeCode": {
          "description": "Contributor type for the plan.",
          "$ref": "#/definitions/ContributorCodeList"
        },
        "contributionTaxTypeCode": {
          "description": "Tax designation for the contribution.",
          "$ref": "#/definitions/ContributionTaxTypeCodeList"
        },
        "contributionAmount": {
          "description": "Contribution amount for the plan.",
          "$ref": "#/definitions/AmountType"
        },
        "minimumContribution": {
          "description": "Minimum contribution amount.",
          "$ref": "#/definitions/AmountType"
        },
        "maximumContribution": {
          "description": "Minimum contribution amount.",
          "$ref": "#/definitions/AmountType"
        },
        "contributionFrequencyCode": {
          "description": "Frequency of the contribution.",
          "$ref": "#/definitions/ElectionFrequencyCodeList"
        },
        "employerContributionType": {
          "description": "Deprecated: Use CoverageType",
          "$ref": "#/definitions/EmployerContributionType"
        }
      }
    },
    "ServiceBasedCostBaseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ServiceBasedCostBaseType",
      "description": "The type defining a service and associated costs (deductibles, copays, coinsurance, out of pocket maximums).",
      "type": "object",
      "definitions": {
        "ServiceType": {
          "description": "The type of service provided.",
          "$ref": "#/definitions/ServiceBasedCostTypeCodeList"
        },
        "NetworkApplicabilityType": {
          "description": "The network applicability of the service.",
          "$ref": "#/definitions/NetworkApplicabilityType"
        },
        "carrierDescription": {
          "description": "The benefit carrier-supplied descriptive text for this coinsurance.",
          "type": "string"
        },
        "finePrint": {
          "description": "The benefit carrier-supplied conditions, exclusions, etc. for this coinsurance.",
          "type": "string"
        }
      },
      "required": [
        "serviceType",
        "networkApplicability"
      ]
    },
    "CensusType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CensusType",
      "description": "The data involved in initial creation and maintenance of employee census changes.",
      "type": "object",
      "definitions": {
        "BenefitsDeploymentType": {
          "description": "The type defining any surcharges that apply to a given plan.",
          "type": "object",
          "properties": {
            "deploymentType": {
              "description": "Defines when the surcharge applies.",
              "$ref": "#/definitions/DeploymentType"
            },
            "salary": {
              "description": "The salary amount.",
              "$ref": "#/definitions/DirectCompensationType_1"
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "person": {
          "description": "Information to identify the person, including name, communication, demographic details and other identifiers.",
          "$ref": "#/definitions/SubscriberPersonType"
        },
        "employee": {
          "description": "Deprecated. Use Common/Deployment instead.",
          "$ref": "#/definitions/EmployeeType"
        },
        "employment": {
          "description": "Deprecated. Use common/WorkLifeCycle instead.",
          "$ref": "#/definitions/EmploymentType"
        },
        "employeeWorkLifeCycle": {
          "description": "Information to specify details on the employee life cycle. For example, Hire Date, Leave Expected Return Date, etc.",
          "$ref": "#/definitions/WorkLifeCycleType"
        },
        "benefitsDeployment": {
          "description": "Information about an employee's deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BenefitsDeploymentType"
          }
        },
        "deployment": {
          "description": "Deprecated: Use benefitsDeployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentType"
          }
        },
        "dependent": {
          "description": "Information on the dependents associated with a person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentType"
          }
        }
      }
    },
    "PlanRateType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PlanRateType",
      "description": "The type defining the rates of a given plan.",
      "type": "object",
      "definitions": {
        "GuaranteedIssueType": {
          "description": "The type defining the guaranteed issue rules for the given plan.",
          "properties": {
            "guaranteedIssueRuleTypeCode": {
              "description": "The rule stating how the guaranteed issue is defined.",
              "$ref": "#/definitions/GuaranteedIssueRuleTypeCodeList"
            },
            "guaranteedIssueDollarAmount": {
              "description": "The dollar amount of coverage guaranteed by the plan.",
              "$ref": "#/definitions/AmountType"
            },
            "guaranteedIssueMultipleOfEarnings": {
              "description": "The multiple of earnings amount of coverage guaranteed by the plan.",
              "$ref": "#/definitions/AmountType"
            },
            "guaranteedIssueApprovalTypeCode": {
              "description": "Determines if the guaranteed amount of coverage is a fixed dollar amount or if it changes with salary",
              "$ref": "#/definitions/GuaranteedIssueApprovalTypeCodeList"
            }
          }
        },
        "RateDifferentiatorType": {
          "description": "The type of rate differentiation.",
          "properties": {
            "rateDifferentiatorTypeCode": {
              "description": "The code describing the type of rate differentiator used.",
              "$ref": "#/definitions/RateDifferentiatorTypeCodeList"
            },
            "lowerAgeRangeValue": {
              "description": "The value delineating the lower range for the differentiator.",
              "type": "integer"
            },
            "upperAgeRangeValue": {
              "description": "The value delineating the upper range for the differentiator.",
              "type": "integer"
            },
            "tobaccoUser": {
              "description": "The true or false value for the tobacco user differentiaton.",
              "$ref": "#/definitions/IndicatorType"
            },
            "gender": {
              "description": "The value for the gender differentiator.",
              "$ref": "#/definitions/GenderCodeList"
            },
            "criticalIllnessSpecificAmountOrdinal": {
              "description": "The ordinal value for the critical illness specific amount differentiator.",
              "type": "integer"
            }
          }
        },
        "InsuranceDetailType": {
          "title": "InsuranceDetailType",
          "description": "The type defining the details of the insurance base and buyup plans.",
          "type": "object",
          "properties": {
            "baseDollarAmount": {
              "description": "The fixed dollar amount of coverage for the base insurance plan.",
              "$ref": "#/definitions/AmountType"
            },
            "baseMultipleOfEarnings": {
              "description": "The multiplier, which when applied as a multiple of earnings is used to determine the coverage amount for the base insurance plan.",
              "type": "integer"
            },
            "baseDollarAdjustment": {
              "description": "A flat, negative or positive,  dollar amount used to adjust the coverage provided by the base multiple of earnings.",
              "$ref": "#/definitions/AmountType"
            },
            "baseDollarMinimum": {
              "description": "The minimum dollar amount of  coverage allowed by the base multiple of earnings insurance plan.",
              "$ref": "#/definitions/AmountType"
            },
            "baseDollarMaximum": {
              "description": "The maximum dollar amount of  coverage allowed  by the base multiple of earnings insurance plan.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupDollarIncrement": {
              "description": "The buyup dollar increment with which the amount of  coverage can be increased.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupDollarMinimum": {
              "description": "The minimum dollar amount of coverage allowed by the buyup insurance plan.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupDollarMaximum": {
              "description": "The maximum dollar amount of  coverage allowed  by the buyup insurance plan.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupMultipleIncrement": {
              "description": "The multiplier, which when incrementally applied as a multiple of earnings is used to determine the coverage amount for the buyup insurance plan.",
              "type": "integer"
            },
            "buyupMultipleOfEarningsMinimum": {
              "description": "The minimum multiplier, which when applied as a multiple of earnings is used to determine the coverage amount for the buyup insurance plan.",
              "type": "integer"
            },
            "buyupMultipleOfEarningsMaximum": {
              "description": "The maximum multiplier, which when applied as a multiple of earnings is used to determine the coverage amount for the buyup insurance plan.",
              "type": "integer"
            }
          }
        },
        "DisabilityDetailType": {
          "description": "The type defining the details of the disability plans.",
          "type": "object",
          "properties": {
            "STDDurationWeeks": {
              "description": "The number of weeks a short term disability insurance is intended to cover.",
              "type": "integer"
            },
            "baseWeeklyPercentageOfEarnings": {
              "description": "The weekly percentage of earnings that can be received as a base disability benefit.",
              "type": "integer"
            },
            "baseWeeklyMaximumDollarBenefit": {
              "description": "The weekly maximum dollar amount that can be received as a base disability benefit.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupOptionType": {
              "description": "The type defining the options available for buy up disability plans.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuyupOptionType"
              }
            },
            "eliminationPeriodType": {
              "description": "The period of time a participant must be disabiled before benefits are paid..",
              "$ref": "#/definitions/EliminationPeriodType"
            },
            "LTDDurationType": {
              "description": "The duration of the Long Term Disability plan.",
              "$ref": "#/definitions/LTDDurationType"
            }
          }
        },
        "CriticalIllnessDetailType": {
          "description": "The type defining the details of the critical illness plans.",
          "properties": {
            "buyupDollarMinimum": {
              "description": "The minimum dollar amount of  coverage allowed by the critical illness plan.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupDollarMaximum": {
              "description": "The maximum dollar amount of  coverage allowed by the critical illness plan.",
              "$ref": "#/definitions/AmountType"
            },
            "buyupIncrementalDollarAmount": {
              "description": "The buyup dollar increment with which the amount of  coverage can be increased.",
              "$ref": "#/definitions/AmountType"
            },
            "specificCoverageDollarAmounts": {
              "description": "Array of specific dollar amounts for the critical illness plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AmountType"
              }
            }
          }
        },
        "BuyupOptionType": {
          "description": "The type defining the options available for buy up disability plans.",
          "type": "object",
          "properties": {
            "buyupWeeklyPercentageIncrease": {
              "description": "The weekly percentage of earnings that can be received as a buyup disability benefit.",
              "type": "integer"
            },
            "buyupWeeklyMaximumDollarBenefit": {
              "description": "The weekly maximum dollar amount that can be received as a buyup disability benefit.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "EliminationPeriodType": {
          "description": "The period of time a participant must be disabiled before benefits are paid.",
          "type": "object",
          "properties": {
            "eliminationDays": {
              "description": "The number of days for the given elimination period.",
              "type": "integer"
            },
            "eliminationCode": {
              "description": "The reason for the elimination period.",
              "$ref": "#/definitions/EliminationCodeList"
            }
          }
        },
        "LTDDurationType": {
          "description": "The period of time a participant must be disabiled before benefits are paid.",
          "type": "object",
          "properties": {
            "LTDDurationTypeCode": {
              "description": "The code classifying the type of long term insuarance duration.",
              "$ref": "#/definitions/LTDDurationTypeCodeList"
            },
            "LTDDurationYears": {
              "description": "The number of years a long term disability insuarance is intended to cover when LTDDurationCodeType is NUMBER_OF_YEARS.",
              "type": "integer"
            },
            "LTDDurationMaximumAge": {
              "description": "The maximum age a long term disability insuarance is intended to cover until when the LTDDurationCodeType is TO_SPECIFIED_AGE or TO_SPECIFIED_AGE_WITH_REDUCTION_AGE.",
              "type": "integer"
            },
            "LTDDurationReductionAge": {
              "description": "The age at which a long term disability insuarance coverage is reduced when the LTDDurationCodeType is TO_SPECIFIED_AGE_WITH_REDUCTION_AGE.",
              "type": "integer"
            }
          }
        }
      },
      "properties": {
        "rateAmount": {
          "description": "The amount of the given rate.",
          "$ref": "#/definitions/AmountType"
        },
        "rateUnit": {
          "description": "The unit of the given rate.",
          "$ref": "#/definitions/RateUnitCodeList"
        },
        "frequency": {
          "description": "The frequency of the given rate.",
          "$ref": "#/definitions/ElectionFrequencyCodeList"
        },
        "ratePaidByEmployee": {
          "description": "The portion of the rate paid by the Employee.",
          "$ref": "#/definitions/AmountType"
        },
        "ratePaidByEmployer": {
          "description": "The portion of the rate paid by the Employer.",
          "$ref": "#/definitions/AmountType"
        },
        "guaranteedIssueType": {
          "$ref": "#/definitions/GuaranteedIssueType"
        },
        "buyup": {
          "description": "An indicator as to whether the rate apply to the buyup coverage or not.",
          "$ref": "#/definitions/IndicatorType"
        },
        "rateDifferentiatorType": {
          "description": "The type of rate differentiation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RateDifferentiatorType"
          }
        },
        "insuranceDetailType": {
          "description": "The type defining the details of the insurance base and buyup plans.",
          "$ref": "#/definitions/InsuranceDetailType"
        },
        "disabilityDetailType": {
          "description": "The type defining the details of the disability plans.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisabilityDetailType"
          }
        },
        "criticalIllnessDetailType": {
          "description": "The type defining the details of the critical illness plans.",
          "$ref": "#/definitions/CriticalIllnessDetailType"
        }
      }
    },
    "SubscriberPersonType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SubscriberPersonType",
      "description": "A collection of information containing relevant person information for a benefits plan subscriber.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        },
        {
          "$ref": "#/definitions/PersonPhysicalInclusion"
        },
        {
          "$ref": "#/definitions/PersonLegalInclusion"
        }
      ],
      "properties": {
        "deceasedIndicator": {
          "description": "An indicator that the subscriber is deceased.",
          "$ref": "#/definitions/IndicatorType"
        },
        "certifiedDeathDate": {
          "description": "The date on which the associated person's death was certified.",
          "$ref": "#/definitions/FormattedDateTimeType"
        }
      }
    },
    "EvidenceOfInsurabilityCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EvidenceOfInsurabilityCodeList",
      "description": "The array of instances of when evidence of insurability is required for the plan.",
      "enum": [
        "LateEntrant",
        "IncreaseInCoverage"
      ]
    },
    "GuaranteedIssueApprovalTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GuaranteedIssueApprovalTypeCodeList",
      "description": "Determines if the guaranteed amount of coverage is a fixed dollar amount or if it changes with salary.",
      "enum": [
        "DollarAmount",
        "TotalElectedCoverage"
      ]
    },
    "RateDifferentiatorTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateDifferentiatorTypeCodeList",
      "description": "A code identifying the source of the election.",
      "enum": [
        "AgeRange",
        "TobaccoUser",
        "Gender",
        "CoverageLevel",
        "SalaryRange",
        "CriticalIllnessParticipantType",
        "CriticalIllnessSpecificAmount"
      ]
    },
    "RateBasedProductCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateBasedProductCodeList",
      "description": "@Deprecated: Use BenefitProductCodeList",
      "enum": [
        "Life",
        "AD&D",
        "STD",
        "LTD"
      ]
    },
    "WaitingRuleTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WaitingRuleTypeCodeList",
      "description": "A code classifying the type associated with the waiting rule.",
      "enum": [
        "HireDate",
        "FirstOfMonthAfterXMonths",
        "AfterXMonths",
        "AfterXDays",
        "FirstOfMonthAfterXDays",
        "OtherProbation",
        "FirstOfMonthAfterHire",
        "FirstPayPeriodAfterXDays",
        "NoWaitingRule"
      ]
    },
    "CoverageDependencyCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageDependencyCodeList",
      "description": "Coverage Dependency Type.",
      "enum": [
        "ExactPercentage",
        "UpToPercentage"
      ]
    },
    "ParticipantCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ParticipantCodeList",
      "description": "A code classifying the participant.",
      "enum": [
        "Employee",
        "Spouse"
      ]
    },
    "EligibleVolumeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EligibleVolumeCodeList",
      "description": "Defines eligible volume code.",
      "enum": [
        "minimum",
        "maximum",
        "increment"
      ]
    },
    "GuaranteedIssueRuleTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GuaranteedIssueRuleTypeCodeList",
      "description": "The rule stating how the guaranteed issue is defined.",
      "enum": [
        "UseSingleAmount",
        "UseLesserOfTwoAmounts"
      ]
    },
    "EventBeneficiaryCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EventBeneficiaryCodeList",
      "description": "Code describing the qualification status of an individual.",
      "enum": [
        "Primary Qualified Employee",
        "Primary Qualified Dependent",
        "Qualified Dependent",
        "NonQualified Dependent",
        "NonQualified Employee",
        "Qualified Beneficiary"
      ]
    },
    "NetworkApplicabilityType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NetworkApplicabilityType",
      "description": "The collection of network definitions a given service cost could be applicable to.",
      "enum": [
        "InNetwork",
        "OutOfNetwork",
        "DesignatedInNetwork"
      ]
    },
    "InitialRightsNotificationCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InitialRightsNotificationCodeList",
      "description": "",
      "enum": [
        "SendAlways",
        "SendOnlyIfUnsent",
        "DoNotSend"
      ]
    },
    "DeductibleServiceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DeductibleServiceType",
      "description": "The collection of service types applicable to plan deductible amounts.",
      "enum": [
        "Individual",
        "Family",
        "DentalPreventativeCare",
        "EyeExams",
        "SingleVisionLenses",
        "LinedBifocalLenses",
        "LinedTrifocalLenses",
        "LenticularLenses",
        "Frames",
        "ContactLensesElective",
        "ContactLensesMedicallyNecessary",
        "ContactLensesEvaluationAndFitting"
      ]
    },
    "ProductCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ProductCodeList",
      "description": "The code classifying the type of product.",
      "enum": [
        "401k",
        "403b",
        "NQB Retirement",
        "Accident",
        "Basic AD&D",
        "Basic Life",
        "Cancer",
        "Critical Illness",
        "Dental",
        "DependentCareFSA",
        "Group AD&D",
        "Group Life",
        "Hospital Indemnity",
        "HRA",
        "HSA",
        "MSA",
        "Legal",
        "LimitedPurposeFSA",
        "LimitedPurposeHRA",
        "LTD",
        "Medical",
        "MedicalFSA",
        "Mental Health",
        "Parking",
        "Pet Insurance",
        "Pet Wellness",
        "Prescription",
        "STD",
        "Supplemental AD&D",
        "Supplemental Life",
        "Transit",
        "Vision"
      ]
    },
    "VolumeMultiplierCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "VolumeMultiplierCodeList",
      "description": "The type of multiplier used to calculate the volume.",
      "enum": [
        "Salary",
        "YearsOfService",
        "Fixed"
      ]
    },
    "ReimbursmentMethodTypePriorityCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ReimbursmentMethodTypePriorityCodeList",
      "description": "The priority of the options available for an employee to receive their funds.",
      "enum": [
        "Primary",
        "Secondary"
      ]
    },
    "CoverageLevelTierTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageLevelTierTypeCodeList",
      "description": "Coverage Level Tier Type Codes.",
      "enum": [
        "Employee",
        "EmployeeSpouse",
        "EmployeeChild",
        "EmployeeChildren",
        "EmployeeFamily",
        "Spouse",
        "Child",
        "Children",
        "Dependent",
        "Family",
        "Employee+[X]"
      ]
    },
    "AccountBasedProductCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AccountBasedProductCodeList",
      "description": "@Deprecated: Use BenefitProductCodeList. The code classifying the type of account based product.",
      "enum": [
        "HSA",
        "Parking",
        "Transit",
        "MedicalFSA",
        "LimitedPurposeFSA",
        "DependentCareFSA"
      ]
    },
    "AmountQualifierCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AmountQualifierCodeList",
      "description": "A code identifying type of amount.",
      "enum": [
        "Flat",
        "Percent"
      ]
    },
    "TerminationRuleTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TerminationRuleTypeCodeList",
      "description": "When an employee is terminated, coverage for this plan terminates according to the selected rule.",
      "enum": [
        "TerminationDate",
        "LastDayOfMonthAfterXMonths",
        "AfterXMonths",
        "AfterXDays",
        "LastDayOfMonthAfterXDays",
        "LastDayOfMonthAfterTermDate",
        "EndOfPayPeriodAfterXDays",
        "Other"
      ]
    },
    "FinalFilingRuleCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "FinalFilingRuleCodeList",
      "description": "A code classifying the participant's employment status associated with the final filing rule.",
      "enum": [
        "Active",
        "Terminated"
      ]
    },
    "SeveranceTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SeveranceTypeCodeList",
      "description": "Determines who is funding the subsidy. Employer,Government",
      "enum": [
        "Employer",
        "Government"
      ]
    },
    "RelationshipCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RelationshipCodeList",
      "description": "Contains information to describe the dependent, including the relationship between the primary insured and dependent.",
      "enum": [
        "AdoptedChild",
        "Child",
        "Brother",
        "Sister",
        "Mother",
        "Father",
        "Spouse",
        "Exspouse",
        "Grandmother",
        "Grandfather",
        "Grandson",
        "Granddaughter",
        "DomesticPartner",
        "ChildOfDomesticPartner",
        "Self"
      ]
    },
    "AgeLimitCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AgeLimitCodeList",
      "description": "A code classifying the age limit. The remaining dependentChildAgeLimit fields only apply to a custom age limit.",
      "enum": [
        "Federal",
        "Custom"
      ]
    },
    "ServiceBasedCostTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ServiceBasedCostTypeCodeList",
      "description": "The collection of service types applicable to plan copay amounts.",
      "enum": [
        "AccidentBenefitAmount",
        "AirAmbulance",
        "Ambulance",
        "CatastrophicLoss",
        "CommonCarrier",
        "CommonDisaster",
        "Concussion",
        "ContactLensesElective",
        "ContactLensesEvaluationAndFitting",
        "ContactLensesMedicallyNecessary",
        "CriticalIllnessAlzheimersDisease",
        "CriticalIllnessAmyotrophicLateralSclerosis",
        "CriticalIllnessBrainTumor",
        "CriticalIllnessCancer",
        "CriticalIllnessCarcinomaInSitu",
        "CriticalIllnessComa",
        "CriticalIllnessCoronaryArteryDisease",
        "CriticalIllnessEndStageRenalFailure",
        "CriticalIllnessHeartAttack",
        "CriticalIllnessInfectiousDisease",
        "CriticalIllnessLossOfHearing",
        "CriticalIllnessLossOfSight",
        "CriticalIllnessMajorOrganFailure",
        "CriticalIllnessOccupationalHIV",
        "CriticalIllnessParalysis",
        "CriticalIllnessParkinsonsDisease",
        "CriticalIllnessPermanentStrokeDamage",
        "CriticalIllnessTransplant",
        "DentalCrownOrExtraction",
        "DentalHospitalStay",
        "DentalPreventativeCare",
        "DiagnosticCtCatMriEeg",
        "DiagnosticXRay",
        "EmergencyRoom",
        "EndodonticsBasic",
        "EyeExams",
        "EyeSurgeryOrObjectRemoval",
        "Family",
        "FollowUpVisits",
        "Frames",
        "GeneralCoInsurance",
        "HospitalAdmission",
        "HospitalAgeLimits",
        "HospitalConfinement",
        "HospitalIcuAdmission",
        "HospitalIcuConfinement",
        "HospitalPortability",
        "HospitalPreexistingLimitation",
        "HospitalScreening",
        "Individual",
        "Inpatient",
        "LabAndXRay",
        "LaserVisionCorrection",
        "LenticularLenses",
        "LinedBifocalLenses",
        "LinedTrifocalLenses",
        "MajorCoinsurance",
        "Orthodontics",
        "OrthoDonticsChild",
        "Outpatient",
        "PeriodonticsBasic",
        "PhysicalTherapy",
        "PrescribedAppliance",
        "PrescribedProsthetic",
        "PreventiveCare",
        "PrimaryCareProvider",
        "ProviderVisit",
        "RehabilitationConfinement",
        "SingleVisionLenses",
        "SpecialistVisit",
        "Telehealth",
        "UrgentCare",
        "UrgentCareVisit",
        "VirtualVisit"
      ]
    },
    "EmployerContributionCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmployerContributionCodeList",
      "description": "A code identifying type of employer contribution.",
      "enum": [
        "Flat",
        "Percent"
      ]
    },
    "ElectionFrequencyCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ElectionFrequencyCodeList",
      "description": "Election frequency code list.",
      "enum": [
        "Annually",
        "Bi-Weekly",
        "Monthly",
        "PerPayPeriod",
        "Quartely",
        "Semi-Monthly",
        "Weekly"
      ]
    },
    "CopayServiceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CopayServiceType",
      "description": "The collection of service types applicable to plan copay amounts.",
      "enum": [
        "PrimaryCareProvider",
        "SpecialistVisit",
        "PreventiveCare",
        "ProviderVisit",
        "EmergencyRoom"
      ]
    },
    "ReimbursmentMethodTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ReimbursmentMethodTypeCodeList",
      "description": "The actual way an employee receives their funds.",
      "enum": [
        "DirectDeposit",
        "Check",
        "DebitCard",
        "VirtualCard"
      ]
    },
    "ContributionTaxTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ContributionTaxTypeCodeList",
      "description": "Tax designation for the contribution.",
      "enum": [
        "PreTax",
        "PostTax"
      ]
    },
    "BenefitProductCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BenefitProductCodeList",
      "description": "The code classifying the type of product.",
      "enum": [
        "401k",
        "403b",
        "NQB Retirement",
        "Accident",
        "Basic AD&D",
        "Basic Life",
        "Cancer",
        "Critical Illness",
        "Dental",
        "DependentCareFSA",
        "Group AD&D",
        "Group Life",
        "Hospital Indemnity",
        "HRA",
        "HSA",
        "MSA",
        "Legal",
        "LimitedPurposeFSA",
        "LimitedPurposeHRA",
        "LTD",
        "Medical",
        "MedicalFSA",
        "Mental Health",
        "Parking",
        "Pet Insurance",
        "Prescription",
        "STD",
        "Supplemental AD&D",
        "Supplemental Life",
        "Transit",
        "Vision"
      ]
    },
    "SurchargeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SurchargeCodeList",
      "description": "Defines when the surcharge applies.",
      "enum": [
        "EmployeeTobacco",
        "SpouseTobacco",
        "Spousal"
      ]
    },
    "LifeCoverageStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LifeCoverageStatusCodeList",
      "description": "Life Coverage Status Code List.",
      "enum": [
        "Member is active",
        "Premium waived due to disability"
      ]
    },
    "AgeCalculationRuleCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AgeCalculationRuleCodeList",
      "description": "Specify when a participant will enter a new age band which may impact the coverage.",
      "enum": [
        "AgeAsOfJanuary1CurrentYear",
        "AgeAsOfPlanAnniversaryCurrentYear",
        "CurrentDateLessDateOfBirth",
        "CurrentDateLessJanuary1BirthYear",
        "CurrentDateLessPlanAnniversaryBirthYear",
        "AgeAsOfJanuary1ExceptNewEnroll",
        "AgeAsOfPlanAnniversaryExceptNewEnroll"
      ]
    },
    "AgeFreezingCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AgeFreezingCodeList",
      "description": "The rules defining when premiums change based on age.",
      "enum": [
        "SingleAge",
        "MultiAge"
      ]
    },
    "FamilyRelationshipCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "FamilyRelationshipCodeList",
      "description": "A Family Relationship Code List.",
      "enum": [
        "AdoptedChild",
        "BrotherOrSister",
        "BrotherInLawOrSisterInLaw",
        "Child",
        "CollateralDependent",
        "CourtAppointedGardian",
        "Cousin",
        "DependentOfAMinorDependent",
        "ExSpouse",
        "Father",
        "FatheOrMother",
        "FatherInLawOrMotherInLaw",
        "FosterChild",
        "GrandfatherOrGrandmother",
        "GrandsonOrGranddaughter",
        "Guardian",
        "LifePartner",
        "Mother",
        "NephewOrNiece",
        "Self",
        "SonInLawOrDaughterInLaw",
        "SponsoredDependent",
        "SpouseStepfather",
        "Stepmother",
        "StepsonOrStepdaughter",
        "UncleOrAunt",
        "Ward"
      ]
    },
    "CoverageLevelTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageLevelTypeCodeList",
      "description": "Coverage Level Type Code List.",
      "enum": [
        "Salary",
        "YearsOfService",
        "Fixed"
      ]
    },
    "CoinsuranceServiceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoinsuranceServiceType",
      "description": "The collection of service types applicable to plan coinsurance amounts.",
      "enum": [
        "GeneralCoInsurance",
        "PreventativeCare",
        "EndodonticsBasic",
        "PeriodonticsBasic",
        "MajorCoinsurance",
        "Orthodontics",
        "OrthoDonticsChild",
        "VirtualVisits",
        "HospitalStay",
        "LabAndXRay"
      ]
    },
    "BenefitEarningsTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BenefitEarningsTypeCodeList",
      "description": "The earning types used for the given eligibility group.",
      "enum": [
        "PayrollBaseSalary",
        "Bonus",
        "Commission",
        "DrawLevel",
        "PriorYearW2K1",
        "ShiftDifferential"
      ]
    },
    "FinalFilingRuleTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "FinalFilingRuleTypeCodeList",
      "description": "A code identifying the source of the election.",
      "enum": [
        "AfterXDaysFromPlanEndDate",
        "AfterXDaysFromEventDate"
      ]
    },
    "WaitingRuleEventCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WaitingRuleEventCodeList",
      "description": "A code classifying the event associated with the waiting rule.",
      "enum": [
        "WorkEvent",
        "NewHire",
        "LifeEvent"
      ]
    },
    "EliminationCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EliminationCodeList",
      "description": "The reason for the elimination period.",
      "enum": [
        "Sickness",
        "Accident"
      ]
    },
    "LTDDurationTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LTDDurationTypeCodeList",
      "description": "The code classifying the type of long term insuarance duration.",
      "enum": [
        "NumberOfYears",
        "ToSpecifiedAge",
        "ToSpecifiedAgeWithReductionAge",
        "ToSSNRA"
      ]
    },
    "NotificationTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NotificationTypeCodeList",
      "description": "",
      "enum": [
        "HIPAAInitialRights",
        "COBRAInitialRights",
        "HIPAAandCOBRAInitialRights"
      ]
    },
    "VolumeTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "VolumeTypeCodeList",
      "description": "The type of volume being defined.",
      "enum": [
        "Actual",
        "Approved",
        "Requested"
      ]
    },
    "CoverageEntityCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CoverageEntityCodeList",
      "description": "A code identifying coverage entity.",
      "enum": [
        "Self",
        "Spouse",
        "CommonLawSpouse",
        "Dependent",
        "Child"
      ]
    },
    "EventCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EventCodeList",
      "description": "The qualifying event that caused the individual to lose group health coverage. The type of qualifying event determines who the qualified beneficiaries are and the period of time a plan must offer continuation coverage. ",
      "enum": [
        "Bankruptcy",
        "Civil Court Award",
        "Death",
        "Disability Extension - 11 Month",
        "Disability Extension - 13 Month",
        "Divorce",
        "Gross Misconduct",
        "Involuntary Termination of Employment",
        "Leave of Absence",
        "Legal Separation",
        "Loss of Dependent Status",
        "Medicare Entitlement",
        "Military Leave",
        "Reduction in Hours",
        "Reduction in Force",
        "Retirement",
        "Severance",
        "State Continuation",
        "Termination of Employment"
      ]
    },
    "BeneficiaryPriorityCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BeneficiaryPriorityCodeList",
      "description": "The beneficiary priority code.",
      "enum": [
        "Primary",
        "Contingent"
      ]
    },
    "RateUnitCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateUnitCodeList",
      "description": "The unit of the given rate.",
      "enum": [
        "Dollars",
        "DollarsPer1000CoveredVolume",
        "DollarsPer100MonthlyBenefit",
        "DollarsPer100MonthlyCoveredPayroll",
        "DollarsPer10WeeklyBenefit",
        "DollarsPer10WeeklyWeekly",
        "PercentageOfSalary"
      ]
    },
    "RateBasedProductSubTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateBasedProductSubTypeCodeList",
      "description": "The code classifying the type of product.",
      "enum": [
        "Basic",
        "Group",
        "Supplemental",
        "NotApplicable"
      ]
    },
    "RoundingRuleCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RoundingRuleCodeList",
      "description": "The method by which the benefit coverage should be rounded.",
      "enum": [
        "NoRounding",
        "Next1",
        "Next10",
        "Next100",
        "Next500",
        "Next1000",
        "Next5000",
        "Next10000",
        "Nearest1",
        "Nearest10",
        "Nearest100",
        "Nearest500",
        "Nearest1000",
        "Nearest5000",
        "Nearest10000"
      ]
    },
    "ContributorCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ContributorCodeList",
      "description": "A code identifying the source of the election.",
      "enum": [
        "Employee",
        "Employer",
        "Catchup"
      ]
    },
    "SalarySurveySubmissionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SalarySurveySubmissionType",
      "description": "A record of Salary Survey to capture details of related employment and organization",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "type": "object",
      "definitions": {
        "SalarySurveySubmissionItem": {
          "type": "object",
          "properties": {
            "match": {
              "description": "An indication by the participating organization that specifies the match accuracy (strength) of their job vs. the survey job. ",
              "$ref": "#/definitions/MatchType"
            },
            "hireDate": {
              "description": "The date the person was hired.",
              "$ref": "#/definitions/DateType"
            },
            "deployment": {
              "description": "The position a person currently holds. This may include details on the job, location, compensation, and other related information.",
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/DeploymentType"
                }
              ],
              "properties": {
                "employeeRecordIdentifier": {
                  "description": "Random number assigned by the participating company, that can not be connected to the system of record and is assigned exclusively for the salary survey.",
                  "$ref": "#/definitions/IdentifierType"
                },
                "shiftCompensation": {
                  "description": "Premium pay for working a 2nd or 3rd shift.",
                  "$ref": "#/definitions/ShiftCompensationType"
                }
              }
            },
            "reward": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RewardType"
              },
              "minItems": 1
            },
            "longTermIncentivePlan": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LongTermIncentivePlanType"
              }
            }
          },
          "required": [
            "deployment",
            "reward"
          ]
        }
      },
      "properties": {
        "salarySurveySubmissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalarySurveySubmissionItem"
          },
          "minItems": 1
        }
      },
      "required": [
        "salarySurveySubmissions"
      ]
    },
    "LongTermIncentivePlanType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LongTermIncentivePlanType",
      "description": "Details of long term incentive plans",
      "type": "object",
      "properties": {
        "planId": {
          "$ref": "#/definitions/NameType"
        },
        "planType": {
          "description": "A set of codes classifying the compensation stock grant types.",
          "enum": [
            "Non-Qualified Option",
            "Qualified Option",
            "Restricted Stock / RSUs",
            "Performance-Based Stock",
            "Unconditional Stock",
            "Phantom Stock / SARs"
          ]
        },
        "eligibleIndicator": {
          "description": "Is the Employee eligible for this reward or not",
          "$ref": "#/definitions/IndicatorType"
        },
        "grantType": {
          "description": "A set of codes classifying the compensation stock grant types.",
          "enum": [
            "Performance",
            "Annual",
            "Signon",
            "Retention"
          ]
        },
        "grantFrequency": {
          "description": "Expected frequency of the grant of reward in years",
          "$ref": "#/definitions/NumberType"
        },
        "grantDate": {
          "description": "The date a grant is awarded to a recipient",
          "$ref": "#/definitions/DateType"
        },
        "grantPrice": {
          "description": "The price of the stock unit that is granted to the recipient",
          "$ref": "#/definitions/AmountType"
        },
        "unitsGrantedQuantity": {
          "description": "The quantity or number of units granted to the recipient",
          "$ref": "#/definitions/NumberType"
        },
        "vestingSchedule": {
          "description": "Values that classify the various vesting schedules",
          "enum": [
            "Gradual",
            "Cliff"
          ]
        },
        "vestingPeriod": {
          "description": "A representation of the time periods by which the grant is deemed vested and available to the recipient",
          "$ref": "#/definitions/NumberType"
        },
        "accountingValue": {
          "description": "A representation of the valuation of the stock based award that is granted to the recipient",
          "$ref": "#/definitions/AmountType"
        }
      },
      "required": [
        "eligibleIndicator",
        "grantType",
        "grantPrice",
        "unitsGrantedQuantity"
      ]
    },
    "SalarySurveyReportType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SalarySurveyReportType",
      "description": "A salary survey report.",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "type": "object",
      "definitions": {
        "ResultType": {
          "description": "Results set from a survey publisher based on inputs from participants.",
          "type": "object",
          "properties": {
            "rewardCode": {
              "description": "ie. base salary, incentive, bonus",
              "$ref": "#/definitions/CodeType"
            },
            "dimensionType": {
              "description": "Primary data cut. e.g All Data, Industry, Geography, Specialty, Subset, Employer Size, etc.",
              "type": "string"
            },
            "dimensionSubType": {
              "description": "Secondary data cut. e.g Incumbent Filter.",
              "type": "string"
            },
            "dimensionName": {
              "description": "Name of industry, Geography, Specialty, Subset, Employer Size, etc.",
              "type": "string"
            },
            "statisticName": {
              "description": "Statistics done on each set of data. e.g. 25th percentile",
              "type": "string"
            },
            "statisticAmount": {
              "description": "The resulting amount of the statistic for the reward of this job",
              "$ref": "#/definitions/AmountType"
            },
            "statisticPercent": {
              "description": "The resulting percent of the statistic for the reward of this job",
              "$ref": "#/definitions/PercentType"
            },
            "numberOfOrganizations": {
              "description": "The number of organizations that have reported data for this job",
              "$ref": "#/definitions/NumberType"
            },
            "numberOfEmployees": {
              "description": "The number of employees that have reported data for this job",
              "$ref": "#/definitions/NumberType"
            }
          }
        }
      },
      "properties": {
        "match": {
          "$ref": "#/definitions/MatchType"
        },
        "source": {
          "description": "The origins of the survey result",
          "type": "object",
          "properties": {
            "publicationCompany": {
              "description": "Which company has published this survey result",
              "type": "string"
            },
            "publicationName": {
              "description": "What is the name of the survey being published for this survey result",
              "type": "string"
            },
            "publicationDate": {
              "description": "What is the date this survey was published for this survey result",
              "$ref": "#/definitions/DateType"
            },
            "publicationNotes": {
              "description": "Any additional notes for this survey publication",
              "type": "string"
            }
          }
        },
        "results": {
          "description": "Code classifying the survey job code levels e.g., 1, 2, 3, 4",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultType"
          }
        }
      }
    },
    "ShiftCompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ShiftCompensationType",
      "description": "Details of Shift Compensation",
      "type": "object",
      "properties": {
        "type": {
          "description": "A code that classifies ShiftCompensationType e.g., 'Base Pay','Variable Pay', 'Commission','Bonus','Short Term Incentive','Shift Pay','OnCall','Hazard','Allowance'",
          "$ref": "#/definitions/CodeType"
        },
        "differential": {
          "type": "object",
          "properties": {
            "flatPremiumAmount": {
              "description": "A fixed amount paid based on working a shift",
              "$ref": "#/definitions/AmountType"
            },
            "hourlyBaseRatePercent": {
              "description": "An amount paid based on the number of hours worked during a shift",
              "$ref": "#/definitions/PercentType"
            },
            "bonusSupplement": {
              "description": "An additional amount paid based in the form of a bonus for working a shift",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      }
    },
    "MatchType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "MatchType",
      "description": "Survey details to match jobs across organization",
      "type": "object",
      "properties": {
        "surveyJobCode": {
          "description": "The code which represents the survey job",
          "$ref": "#/definitions/CodeType"
        },
        "surveyJobTitle": {
          "description": "The title of the survey job",
          "type": "string"
        },
        "surveyJobDescription": {
          "description": "A description of the survey job",
          "type": "string"
        },
        "matchPercent": {
          "description": "A score provided by the person matching the employer job to the survey job for applicability: with 0% meaning no applicability and 100% meaning exact match",
          "$ref": "#/definitions/PercentType"
        },
        "surveyJobCodeLevel": {
          "description": "Code classifying the survey job code levels e.g., 1, 2, 3, 4",
          "type": "object",
          "properties": {
            "title": {
              "description": "A title that describes the level of a survey job",
              "type": "string"
            },
            "description": {
              "description": "A description of the level of a survey job",
              "type": "string"
            },
            "code": {
              "description": "A code representing the level of a survey job",
              "type": "string"
            }
          }
        },
        "surveyJobCodeSpeciality": {
          "description": "Code classifying the survey job code specialities e.g., 'Exec Comp', 'Cash Comp', 'Sales Comp', etc.",
          "type": "object",
          "properties": {
            "title": {
              "description": "A title representing the specialization of a survey job",
              "type": "string"
            },
            "description": {
              "description": "A description of the specialization of a survey job",
              "type": "string"
            },
            "code": {
              "description": "A code representing the specialization of a survey job",
              "type": "string"
            }
          }
        }
      },
      "required": [
        "surveyJobCode"
      ]
    },
    "CompensationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompensationType",
      "description": "Represents the Compensation Specification.",
      "type": "object",
      "properties": {
        "salarySurvey": {
          "$ref": "#/definitions/SalarySurveySubmissionType"
        },
        "salarySurveyResults": {
          "$ref": "#/definitions/SalarySurveyReportType"
        }
      }
    },
    "RewardType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RewardType",
      "description": "Details of the compensation reward",
      "type": "object",
      "properties": {
        "rewardCode": {
          "description": "A code that describes the type of remuneration being paid",
          "$ref": "#/definitions/PayTypeCodeList"
        },
        "effectiveDate": {
          "description": "The date that this piece of remuneration started",
          "$ref": "#/definitions/DateType"
        },
        "eligibleIndicator": {
          "description": "Is the Employee eligible for this reward or not",
          "$ref": "#/definitions/IndicatorType"
        },
        "clientProvidedValue": {
          "type": "object",
          "properties": {
            "name": {
              "description": "Total Reward name.",
              "$ref": "#/definitions/NameType"
            },
            "valueAmount": {
              "description": "Total Reward amount (including any additional payments)",
              "$ref": "#/definitions/AmountType"
            },
            "valuePercent": {
              "description": "Reward as a percentage of (applicable) Base in case reward is in percentage",
              "$ref": "#/definitions/PercentType"
            },
            "rateIntervalCode": {
              "description": "Frequency of reward payments",
              "$ref": "#/definitions/PayRateIntervalCodeList"
            },
            "numberOfAdditionalPayments": {
              "description": "Additional number of months/weeks included in the Annual pay",
              "$ref": "#/definitions/NumberType"
            },
            "taxableIndicator": {
              "description": "An indicator which describes if this remuneration is taxable",
              "$ref": "#/definitions/IndicatorType"
            },
            "cashIndicator": {
              "description": "An indicator of whether this remuneration is paid in cash",
              "$ref": "#/definitions/IndicatorType"
            },
            "fixedIndicator": {
              "description": "An indicator of whether this remuneration is fixed, if not then it is variable",
              "$ref": "#/definitions/IndicatorType"
            }
          },
          "required": [
            "rateIntervalCode",
            "cashIndicator"
          ]
        },
        "clientProvidedTarget": {
          "type": "object",
          "properties": {
            "targetAmount": {
              "description": "The value that is expected to be awarded for this remuneration award",
              "$ref": "#/definitions/AmountType"
            },
            "targetPercent": {
              "description": "The percent of a basis expected to be awarded for this remuneration award",
              "$ref": "#/definitions/PercentType"
            },
            "basisOfTarget": {
              "description": "Basis of Target e.g., Base Pay, Base Pay plus Mandatory Bonus, etc",
              "$ref": "#/definitions/PayTypeCodeList"
            }
          },
          "required": [
            "target",
            "basisOfTarget"
          ]
        }
      },
      "required": [
        "rewardCode",
        "eligibleIndicator"
      ]
    },
    "EstablishmentActivityType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EstablishmentActivityType",
      "description": "The business activities conducted at the establishment.",
      "type": "object",
      "properties": {
        "activityCode": {
          "description": "The code defining the activity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeType"
          }
        },
        "description": {
          "description": "A description of the establishment activities.",
          "$ref": "#/definitions/TextType"
        },
        "percentage": {
          "description": "The percentage the entity spends on the activity.",
          "$ref": "#/definitions/PercentType"
        }
      }
    },
    "OrganizationReferenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrganizationReferenceType",
      "description": "Basic information to reference a specific organization.",
      "definitions": {
        "ResponsibilityCodeList": {
          "title": "ResponsibilityCodeList",
          "description": "Values that classify the level or the responsibility at which the organization operates.",
          "enum": [
            "Unit",
            "Department",
            "Division",
            "Parent",
            "Group",
            "Plant",
            "Subsidiary",
            "Joint Venture",
            "Branch",
            "Holding Affiliate"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "type": "object",
      "properties": {
        "responsibilityCode": {
          "description": "The level or the responsibility at which the organization operates.",
          "$ref": "#/definitions/ResponsibilityCodeList"
        },
        "communication": {
          "description": "The methods of communication by which the organization can be contacted.",
          "$ref": "#/definitions/CommunicationType"
        }
      }
    },
    "OrganizationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrganizationType",
      "description": "Information to identify and reference a specific organization.",
      "definitions": {
        "GeographicResponsibilityCodeList": {
          "title": "GeographicResponsibilityCodeList",
          "description": "Values that classify the geographic level at which the organization operates.",
          "enum": [
            "Global",
            "National",
            "Regional",
            "Local"
          ]
        },
        "OwnershipTypeCodeList": {
          "title": "OwnershipTypeCodeList",
          "description": "Values that classify the ownership of the organization.",
          "enum": [
            "Public",
            "Private",
            "NonProfit",
            "Government",
            "Joint Venture",
            "Mutual"
          ]
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationReferenceType"
        }
      ],
      "type": "object",
      "properties": {
        "taxId": {
          "description": "A government assigned identifier to distinguish an organization. This typically is a country-level tax code. For example, Federal Employer Identification Number (FEIN) in the USA.",
          "$ref": "#/definitions/IdentifierType"
        },
        "formerTaxId": {
          "description": "The former government assigned identifier to distinguish organization. This typically is a country-level tax code. For example, Federal Employer Identification Number (FEIN) in the USA.",
          "$ref": "#/definitions/IdentifierType"
        },
        "legalId": {
          "description": "An identifier of the organization for legal purposes. This could be a company, state, or other kind of identifier. For example, Data Universal Numbering System, abbreviated as DUNS.",
          "$ref": "#/definitions/IdentifierType"
        },
        "industryCodes": {
          "description": "Deprecated. Use IndustryIdentifiers instead.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeType"
          }
        },
        "industryIdentifiers": {
          "description": "The types of industry to which the organization belongs. The Industry identifiers could be referenced to a standard taxonomy (such as NAICS) or a custom taxonomy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "headCount": {
          "description": "The number of employees in the organization. Depending on the organization, this could include full-time, part-time and contractors.",
          "$ref": "#/definitions/NumberType"
        },
        "revenue": {
          "description": "The amount of revenue of the organization, typically from the most recent fiscal year.",
          "$ref": "#/definitions/AmountType"
        },
        "description": {
          "description": "A description or quick summary of the organization.",
          "$ref": "#/definitions/TextType"
        },
        "geographicResponsibilityCode": {
          "description": "A code that classifies the geographic level at which the organization operates.",
          "$ref": "#/definitions/GeographicResponsibilityCodeList"
        },
        "ownershipType": {
          "description": "A code that classifies the ownership of the organization.",
          "$ref": "#/definitions/OwnershipTypeCodeList"
        },
        "organizationActivity": {
          "description": "A description of the business activities conducted at the organization, listed by approximate percentage of revenue or sales associated with each activity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EstablishmentActivityType"
          }
        },
        "stockSymbol": {
          "description": "The stock symbol for the organization. The stock exchange symbol should also be included. Example: NYSE:XOM representing Exxon Mobile on the New York Stock Exchange.",
          "$ref": "#/definitions/CodeType"
        },
        "workEnvironmentCode": {
          "description": "A code to represent the working environment of the organization. E.g., Office, Workshop, Factory, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "contacts": {
          "description": "Specific people at the organization who are contacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecifiedPersonType"
          }
        },
        "tradeName": {
          "description": "Trade name of the organizationor doing-business-as (DBA).",
          "type": "string"
        },
        "statusHistory": {
          "description": "A history of the organization statuses; e.g the date and code. e.g. sold, temporarily closed, permanently closed, merged, acquired, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusType"
          }
        },
        "domainName": {
          "description": "The internet domain to help identify the organization and a reference to find additional information.",
          "type": "string",
          "format": "uri"
        },
        "parentCompanyTaxId": {
          "description": "The tax ID of the parent company if this company is a wholly owned subsidiary of another company.",
          "$ref": "#/definitions/IdentifierType"
        },
        "parentCompanyName": {
          "description": "The legal name of the parent company if this company is a wholly owned subsidiary of another company.",
          "type": "string"
        }
      }
    },
    "WorkLocationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkLocationType",
      "description": "Work location schema.",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "type": "object",
      "properties": {
        "typeCode": {
          "description": "A code classifying the work location type e.g., Distribution center, Headquarters, Plant, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "virtualWorkerIndicator": {
          "$ref": "#/definitions/IndicatorType"
        },
        "fieldRemoteWorkerIndicator": {
          "$ref": "#/definitions/IndicatorType"
        },
        "address": {
          "$ref": "#/definitions/AddressType"
        },
        "description": {
          "$ref": "#/definitions/TextType"
        }
      }
    },
    "EmployerEstablishmentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmployerEstablishmentType",
      "description": "Information to identify and reference a specific establishment within an organization.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationReferenceType"
        }
      ],
      "properties": {
        "taxIdentifiers": {
          "description": "A government assigned identifier to distinguish the establishment. This may be assigned by a country, state, province, etc. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "industryIdentifiers": {
          "description": "The types of industry to which the establishment belongs. The Industry identifiers could be referenced to a standard taxonomy (such as NAICS) or a custom taxonomy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "businessFunction": {
          "description": "Describe the business functions performed at the location, e.g., administrative, warehouse, retail, professional services, information technology, engineering, R&D, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeType"
          }
        },
        "establishmentActivity": {
          "description": "A description of the business activities conducted at the establishment, listed by approximate percentage of revenue or sales associated with each activity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EstablishmentActivityType"
          }
        },
        "tradeName": {
          "description": "Trade name of the establishment or doing-business-as (DBA).",
          "type": "string"
        },
        "statusHistory": {
          "description": "Specifies the current status of the establishment, e.g. sold, temporarily closed, permanently closed, merged, acquired, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusType"
          }
        }
      }
    },
    "PartyInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PartyInclusion",
      "description": "Supplier/Customer/Requester/etc. information for an entity.",
      "type": "object",
      "properties": {
        "party": {
          "type": "object",
          "properties": {
            "supplier": {
              "$ref": "#/definitions/PartyType"
            },
            "customer": {
              "$ref": "#/definitions/PartyType"
            },
            "requester": {
              "$ref": "#/definitions/PartyType"
            }
          },
          "minProperties": 1,
          "additionalProperties": {
            "$ref": "#/definitions/PartyType"
          }
        }
      }
    },
    "PartyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PartyType",
      "description": "A collection of information about the party who is the supplier/customer/requester of the associated entity.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "properties": {
        "legalId": {
          "description": "A government assigned identifier to distinguish the party (organization, person, or legal entity) to a transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "taxId": {
          "description": "An identifier assigned by a government tax authority to distinguish the party (organization, person, or legal entity) to a transaction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "communication": {
          "description": "The methods of communication by which the party can be contacted.",
          "$ref": "#/definitions/CommunicationType"
        },
        "personContacts": {
          "description": "Specific people at the party who are contacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecifiedPersonType"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "CompetencyDimensionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompetencyDimensionType",
      "description": "A measurable characteristic of a competency. Examples might include 'frequency of use,' 'level of interest,' etc.",
      "type": "object",
      "properties": {
        "dimensionType": {
          "description": "A code classifying the type of competency dimension.",
          "$ref": "#/definitions/CodeType"
        },
        "score": {
          "$ref": "#/definitions/ScoreType"
        }
      }
    },
    "CompetencyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompetencyType",
      "description": "Represents competency types in HR Open Standards.",
      "type": "object",
      "properties": {
        "personCompetency": {
          "$ref": "#/definitions/PersonCompetencyType"
        },
        "positionCompetency": {
          "$ref": "#/definitions/PositionCompetencyType"
        },
        "specifiedCompetency": {
          "$ref": "#/definitions/SpecifiedCompetencyType"
        }
      }
    },
    "SpecifiedCompetencyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SpecifiedCompetencyType",
      "description": "A specified competency is a reference to a particular competency at a specified level of proficiency.",
      "type": "object",
      "properties": {
        "competencyIds": {
          "description": "Array of competency identifiers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "name": {
          "description": "Competency name.",
          "type": "string"
        },
        "proficiencyLevel": {
          "$ref": "#/definitions/BaseScoreType"
        }
      }
    },
    "PersonCompetencyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonCompetencyType",
      "description": "A specified person competency is a competency within the context of a personal record (profile, appraisal, assessment) assessed or asserted at specified level of proficiency.",
      "type": "object",
      "properties": {
        "competencyIds": {
          "description": "A unique identifier for a competency definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "taxonomyIds": {
          "description": "The identifier for categorization of competencies in an HR context.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "competencyName": {
          "description": "A human readable, descriptive name for the given competency.",
          "type": "string"
        },
        "description": {
          "description": "Brief description of the named competency.",
          "type": "string"
        },
        "proficiencyLevel": {
          "description": "A minimum level of proficiency for a competency associated with a position, role, course, or other item. The proficiency level is expressed as a score, a point scale, or a mark among range of values.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "lastUsedDate": {
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "experienceMeasure": {
          "description": "The duration of experience associated with the given entity. For example, this may be experience asserted or claimed by a candidate as evidence of a competency. Or it may be the assertion of a competency evidence policy or requirement for the duration of experience associated with a position or role.",
          "$ref": "#/definitions/MeasureType"
        },
        "interestLevel": {
          "description": "A rating of a person's interest associated with a competency.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "competencyDimensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompetencyDimensionType"
          }
        },
        "competencyEvidence": {
          "$ref": "#/definitions/CompetencyEvidenceType"
        },
        "attachmentReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        }
      }
    },
    "CompetencyWeightType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompetencyWeightType",
      "description": "A number expressing the relative importance of a particular component (e.g., a position competency) among sibling components. Weights are most frequently expressed a percentage (where the weights assigned to individual sibling competencies would total 100 percent when totaled), but they may be expressed using another numeric scale.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value for the weightType.",
          "type": "number"
        },
        "schemeId": {
          "description": "An identifier used to distinguish the relevant scoring scheme to which the weight belongs.",
          "type": "string"
        },
        "schemeName": {
          "description": "A name for scheme in which the score is expressed.",
          "type": "string"
        },
        "interval": {
          "description": "The stop points between minimum and maximum.",
          "type": "number"
        },
        "maximumScore": {
          "description": "Highest score in the weight range.",
          "type": "number"
        },
        "minimumScore": {
          "description": "Lowest score in the weight range.",
          "type": "number"
        }
      }
    },
    "CompetencyEvidenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompetencyEvidenceType",
      "description": "A document or other record providing evidence of a competency or that is treated as a proxy for the existence of the competency. Examples include: an assessment result; a performance appraisal; an educational degree; a supervisor's observation; etc.",
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "evidenceTypeCode": {
          "description": "A code categorizing the type of evidence that substantiates a related competency. For example, 'assessment', 'degree', 'performance appraisal', etc.",
          "$ref": "#/definitions/CodeType"
        },
        "evidenceName": {
          "description": "A name or label for the evidence.",
          "type": "string"
        },
        "descriptions": {
          "description": "Description of the evidence requirement.",
          "$ref": "#/definitions/StringTypeArray",
          "items": {
            "type": "string"
          }
        },
        "evidenceRequirementsId": {
          "description": "An identifier for a policy associated with or governing the type of evidence. For example, a policy setting a confidence level or minimum requirement for the associated evidence.",
          "$ref": "#/definitions/IdentifierType"
        },
        "scores": {
          "description": "Scores supporting the competency evidence.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScoreType"
          }
        },
        "effectivePeriod": {
          "$ref": "#/definitions/OpenEndPeriodType"
        },
        "verificationDate": {
          "description": "The date on which the associated information or fact was verified.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "verificationSourceName": {
          "description": "The name of the service, person, or agent from which the verification was obtained.",
          "type": "string"
        },
        "attachmentReference": {
          "$ref": "#/definitions/AttachmentReferenceType"
        }
      }
    },
    "PositionCompetencyType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionCompetencyType",
      "description": "A qualified position competency has a specified required and/or desired level of proficiency and has an explicit or implicit level of importance (weight) among sibling competencies associated with a position.",
      "definitions": {
        "RelatedCompetencyType": {
          "title": "RelatedCompetencyType",
          "description": "",
          "type": "object",
          "properties": {
            "competencyId": {
              "description": "A unique identifier for a competency definition.",
              "$ref": "#/definitions/IdentifierType"
            },
            "competencyName": {
              "description": "A human readable, descriptive name for the given competency.",
              "type": "string"
            },
            "competencyRelationshipCodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "competencyIds": {
          "description": "A unique identifier for a competency definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "taxonomyIds": {
          "description": "The identifier for categorization of competencies in an HR context.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "competencyName": {
          "description": "A human readable, descriptive name for the given competency.",
          "type": "string"
        },
        "weight": {
          "description": "A number expressing the relative importance of a particular component (e.g., a position competency) among sibling components. Weights are most frequently expressed a percentage (where the weights assigned to individual sibling competencies would total 100 percent when totaled), but they may be expressed using another numeric scale.",
          "$ref": "#/definitions/CompetencyWeightType"
        },
        "requiredProficiencyLevel": {
          "description": "A minimum level of proficiency for a competency  associated with a position, role, course, or other item. The proficiency level is expressed as a score, a point scale, or a mark among range of values.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "desiredProficiencyLevel": {
          "description": "DefinitionText>An optimum or ideal level of proficiency for a competency with respect to an associated position, role, course, or other item. The proficiency level is expressed as a score, a point scale, or a mark among range of values.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "proficiencyAcquistionDifficulty": {
          "description": "A rating or score representing the difficulty of the particular competency to acquire.",
          "$ref": "#/definitions/BaseScoreType"
        },
        "competencyClassificationCode": {
          "description": "A code that categorizes a competency according to a classification system. This classification system usually would be set within a source competency model or taxonomy.",
          "$ref": "#/definitions/CodeType"
        },
        "competencyDimension": {
          "$ref": "#/definitions/CompetencyDimensionType"
        },
        "relatedCompetencies": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedCompetencyType"
          }
        },
        "competencyEvidenceRequirement": {
          "$ref": "#/definitions/CompetencyEvidenceType"
        },
        "attachmentReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        }
      }
    },
    "MessageInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "MessageInclusion",
      "description": "Human readable description of the response message.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The purpose of the message.",
          "enum": [
            "Warning",
            "Error",
            "Success",
            "Info"
          ]
        },
        "code": {
          "description": "The code that classifies the message.",
          "$ref": "#/definitions/CodeType"
        },
        "text": {
          "description": "Human readable text of the message.",
          "type": "string"
        }
      }
    },
    "ResourceMessageInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResourceMessageInclusion",
      "description": "A response type for communicating processing results of a single resource.",
      "type": "object",
      "properties": {
        "resourceId": {
          "description": "Identifier for the resource identifier if one is available.",
          "$ref": "#/definitions/IdentifierType"
        },
        "resourceResultStatusCode": {
          "description": "A code classifying the event associated with the waiting rule.",
          "$ref": "#/definitions/ResultStatusCodeList"
        },
        "messages": {
          "description": "A list of messages concerning the processing of the resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageInclusion"
          }
        }
      }
    },
    "ResponseMessageBaseInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResponseMessageBaseInclusion",
      "description": "A response to a request to process a list of items.",
      "type": "object",
      "properties": {
        "messageId": {
          "description": "An identifier for the instance of the response message.",
          "$ref": "#/definitions/IdentifierType"
        },
        "messageDateTime": {
          "description": "The date & time that the response message instance was created.",
          "$ref": "#/definitions/DateTimeType"
        },
        "requestId": {
          "description": "The identifier for the request to which a confirm message is related. In the asynchronous processing case, this identifier may be used to refer to the processing job that is servicing a request.",
          "$ref": "#/definitions/IdentifierType"
        },
        "requestProcessingStatusCode": {
          "description": "The processing status code for the request.",
          "enum": [
            "Received",
            "Validated",
            "Started",
            "Completed"
          ]
        }
      }
    },
    "BulkResponseMessageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BulkResponseMessageType",
      "description": "A response message for communicating processing results of a request to process a set of resources, a bulk request.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResponseMessageBaseInclusion"
        }
      ],
      "properties": {
        "requestResultStatusCode": {
          "description": "The result status code for the request.",
          "enum": [
            "Succeeded",
            "Failed",
            "PartiallyFailed"
          ]
        },
        "messages": {
          "description": "A list of messages concerning the processing of the bulk request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageInclusion"
          }
        },
        "resourceMessages": {
          "description": "A list of messages concerning the processing of the individual resources of the bulk request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMessageInclusion"
          }
        }
      }
    },
    "ResultStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResultStatusCodeList",
      "description": "Result status values code list.",
      "enum": [
        "Succeeded",
        "Failed"
      ]
    },
    "AtomicResponseMessageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AtomicResponseMessageType",
      "description": "A response message for communicating processing results of a request to process a single resource, an atomic request.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResponseMessageBaseInclusion"
        }
      ],
      "properties": {
        "requestResultStatusCode": {
          "description": "The result status code for the request.",
          "$ref": "#/definitions/ResultStatusCodeList"
        },
        "messages": {
          "description": "A list of messages concerning the processing of an atomic request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageInclusion"
          }
        }
      }
    },
    "PersonPhysicalInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonPhysicalInclusion",
      "description": "Person physical information.",
      "type": "object",
      "properties": {
        "height": {
          "description": "The height of the person.",
          "$ref": "#/definitions/MeasureType"
        },
        "weight": {
          "description": "The weight of the person.",
          "$ref": "#/definitions/MeasureType"
        },
        "disability": {
          "description": "A type of disability that a person has.",
          "$ref": "#/definitions/DisabilityType"
        },
        "tobaccoUserIndicator": {
          "description": "An indicator that a person is a tobacco user.",
          "$ref": "#/definitions/IndicatorType"
        },
        "hairColor": {
          "description": "The color of the hair of a person.",
          "type": "string"
        },
        "eyeColor": {
          "description": "The color of the eyes of a person.",
          "type": "string"
        },
        "identifyingMarks": {
          "description": "A list of identifying marks of a person.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "age": {
          "description": "The age of a person (in years).",
          "type": "integer"
        },
        "bloodType": {
          "description": "The blood type of a person.",
          "$ref": "#/definitions/CodeType"
        }
      }
    },
    "PersonBaseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonBaseType",
      "description": "Represents common data about a person.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonReferenceType"
        }
      ],
      "properties": {
        "legalId": {
          "description": "The legal identifier of a person. The issuer is most likely a country or state.",
          "$ref": "#/definitions/IdentifierType"
        },
        "previousLegalId": {
          "description": "The previous legal identifier of a person. The issuer is most likely a country or state.",
          "$ref": "#/definitions/IdentifierType"
        },
        "birthDate": {
          "description": "The birth date of a person.",
          "$ref": "#/definitions/DateType"
        },
        "gender": {
          "description": "The gender of a person.",
          "$ref": "#/definitions/GenderCodeList"
        },
        "citizenship": {
          "description": "The citizenships that a person holds. This is a legal citizenship in a country (as opposed to nationality which may or may not be a country).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCodeList"
          }
        },
        "residenceCountry": {
          "description": "The country (or countries) where a person currently resides.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCodeList"
          }
        },
        "militaryStatus": {
          "description": "The military status of a person.",
          "type": "string"
        },
        "ethnicity": {
          "description": "The ethnicity (or ethnicities) of a person. A country may define which of these terms (race, nationality, ethnicity) be used and how they are defined. One or more properties may be used by a country. A predefined country list allows a person to specify their ethnicity.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "PersonLegalType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonLegalType",
      "description": "Represents person along with legal data.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        },
        {
          "$ref": "#/definitions/PersonLegalInclusion"
        }
      ],
      "properties": {
        "disabilityIndicator": {
          "description": "Legal details about a person, e.g. passport, parents names, marital status.",
          "$ref": "#/definitions/IndicatorType"
        }
      }
    },
    "PersonNameTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonNameTypeArray",
      "type": "array",
      "items": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/PersonNameType"
          }
        ],
        "properties": {
          "nameType": {
            "type": "string"
          }
        },
        "required": [
          "nameType"
        ]
      }
    },
    "PersonNameType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonNameType",
      "description": "A component for capturing summary or fine-grain data comprising a person's name.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationInclusion"
        }
      ],
      "properties": {
        "formattedName": {
          "description": "The formatted name of a person, as it would be written out together (for example, on a mailing label).",
          "type": "string"
        },
        "legal": {
          "description": "The legal name of a person (typically used if it differs from family name).",
          "type": "string"
        },
        "given": {
          "description": "The given name of a person.",
          "type": "string"
        },
        "preferred": {
          "description": "The preferred name of a person (if it differs from given name).",
          "type": "string"
        },
        "middle": {
          "description": "The middle names or initials of a person.",
          "type": "string"
        },
        "family": {
          "description": "The family name (or surname) of a person.",
          "type": "string"
        },
        "familyPrefix": {
          "description": "The prefix of a family name, e.g. van der, de jong.",
          "type": "string"
        },
        "alias": {
          "description": "An alias or (or also known as) name of a person.",
          "type": "string"
        },
        "formerFamily": {
          "description": "The former family name of a person (used if the person's name was changed).",
          "type": "string"
        },
        "formerFamilyPrefix": {
          "description": "The prefix of the former family name, e.g. van der, de jong.",
          "type": "string"
        },
        "preferredSalutationCode": {
          "description": "The salutation used to address a person (such as Dr., Mr., Mrs.).",
          "$ref": "#/definitions/CodeType"
        },
        "generationAffixCode": {
          "description": "The generational designation attached to the end of a person's name (such as Jr., Sr., II, III).",
          "$ref": "#/definitions/CodeType"
        },
        "qualificationAffixCode": {
          "description": "The professional designation attached to the end of a person's name (such as M.Sc., Ph.D).",
          "$ref": "#/definitions/CodeType"
        },
        "titleAffixCode": {
          "description": "The title designation attached to the end of a person's name (such as Esq., K.B.E.).",
          "$ref": "#/definitions/CodeType"
        },
        "initials": {
          "description": "The initials of a person.",
          "type": "string"
        },
        "script": {
          "description": "Script used to represent the name.",
          "type": "string"
        }
      }
    },
    "PersonLegalInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonLegalInclusion",
      "description": "A collection of demographic and personal data about a person.",
      "type": "object",
      "properties": {
        "passportId": {
          "description": "DEPRECATED - Use Legal Documents Property",
          "$ref": "#/definitions/IdentifierType"
        },
        "fatherName": {
          "description": "The surname of the father of the person.",
          "type": "string"
        },
        "motherName": {
          "description": "The surname of the mother of the person.",
          "type": "string"
        },
        "race": {
          "description": "The identified race(s) of the person. A country may define which of these terms (race, nationality, ethnicity) will be used and how they are defined. One or more properties may be used by a country. A predefined country list allows a person to specify their race.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "birthPlace": {
          "description": "The birth place of the person.",
          "type": "string"
        },
        "deathDate": {
          "description": "If the person is deceased, the legal date that the person died.",
          "$ref": "#/definitions/DateTimeType"
        },
        "nationality": {
          "description": "The nationality (or nationalities) of the person. A country may define which of these terms (race, nationality, ethnicity) be used and how they are defined. One or more properties may be used by a country. A predefined country list allows a person to specify their nationality.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maritalStatus": {
          "description": "The marital status of the person.",
          "type": "string"
        },
        "maritalStatusDate": {
          "description": "The date for the marital status of the person.",
          "$ref": "#/definitions/DateType"
        },
        "visa": {
          "description": "DEPRECATED - Use Legal Documents Property",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "religion": {
          "description": "The religions of the person of the person.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "studentType": {
          "description": "The type of student (if the person is a student). Typically used to indicate 'full-time' or 'part-time' status.",
          "$ref": "#/definitions/CodeType"
        },
        "studentIndicator": {
          "description": "An indicator as to whether the individual currently is enrolled as a student within a specific class of educational institution. This is component is attributed with effective dating.",
          "$ref": "#/definitions/IndicatorType"
        },
        "studentStatus": {
          "description": "The status of the student (if the person is a student). Typically used to indicate special states such as 'Suspended'.",
          "$ref": "#/definitions/CodeType"
        },
        "legalDocuments": {
          "description": "Legal Documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalDocumentType"
          }
        },
        "employmentPermits": {
          "description": "The permissions of a person to work (within an administrative unit).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentPermitType"
          }
        }
      }
    },
    "PersonType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonType",
      "description": "A schema that represents all of the information of a person.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        },
        {
          "$ref": "#/definitions/PersonPhysicalInclusion"
        },
        {
          "$ref": "#/definitions/PersonProfileInclusion"
        },
        {
          "$ref": "#/definitions/PersonLegalInclusion"
        }
      ]
    },
    "SpecifiedPersonType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SpecifiedPersonType",
      "description": "Contains information to identify a person associated with the interaction or entity.",
      "allOf": [
        {
          "$ref": "#/definitions/PersonReferenceType"
        }
      ],
      "type": "object",
      "properties": {
        "roleCode": {
          "$ref": "#/definitions/CodeType"
        }
      }
    },
    "LegalDocumentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LegalDocumentType",
      "description": "Identifying information for a legal document, e.g. Passport, Visa, etc.",
      "type": "object",
      "allOf": [
        {
          "description": "The identifier of the legal document, e.g. Passport number, Visa number.",
          "$ref": "#/definitions/IdentifierType"
        }
      ],
      "properties": {
        "documentType": {
          "description": "The type of document, e.g. Passport, Visa, National Registration Card.",
          "$ref": "#/definitions/CodeType"
        },
        "issuingAuthority": {
          "description": "The name of the organization that issued the document. E.g. American Consulate, UK Passport Authority.",
          "type": "string"
        },
        "issueDate": {
          "description": "The date the document was issued.",
          "$ref": "#/definitions/DateType"
        },
        "expirationDate": {
          "description": "The date the document expires.",
          "$ref": "#/definitions/DateType"
        }
      }
    },
    "PersonReferenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonReferenceType",
      "description": "A schema to reference to a person.",
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/IdentifierType"
        },
        "name": {
          "$ref": "#/definitions/PersonNameType"
        },
        "communication": {
          "$ref": "#/definitions/CommunicationType"
        },
        "primaryLanguage": {
          "$ref": "#/definitions/LanguageCodeList"
        }
      },
      "minProperties": 1
    },
    "ResponsibleType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResponsibleType",
      "description": "A collection of information about the person who is the submitter/approver of the associated document.",
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "person": {
          "description": "Contains information identifying the person who has the role of submitter/approver.",
          "$ref": "#/definitions/SpecifiedPersonType"
        },
        "datetime": {
          "description": "The date the related document, report, or related entity was communicated to a receiving or approving entity.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "comment": {
          "$ref": "#/definitions/CommentType"
        }
      }
    },
    "PersonPhysicalType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonPhysicalType",
      "description": "A schema that represents a person along with their physical data.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        },
        {
          "$ref": "#/definitions/PersonPhysicalInclusion"
        }
      ]
    },
    "ResponsibleInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResponsibleInclusion",
      "description": "The people who are submitters and/or approvers information for an entity.",
      "type": "object",
      "properties": {
        "submitters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponsibleType"
          }
        },
        "approvers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponsibleType"
          }
        }
      }
    },
    "PayRateType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayRateType",
      "description": "Associates billing and/or pay rate information with time worked information reported on an entity.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/AmountType"
        },
        "intervalCode": {
          "$ref": "#/definitions/PayRateIntervalCodeList"
        }
      },
      "required": [
        "amount"
      ]
    },
    "CostAllocationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CostAllocationType",
      "description": "Contains percentage table per identifier of an account, department, or other entity to which an item should be allocated.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "percentage": {
            "$ref": "#/definitions/PercentType"
          },
          "department": {
            "$ref": "#/definitions/EntityType"
          },
          "location": {
            "$ref": "#/definitions/EntityType"
          },
          "costCenter": {
            "$ref": "#/definitions/EntityType"
          },
          "job": {
            "$ref": "#/definitions/EntityType"
          },
          "account": {
            "$ref": "#/definitions/EntityType"
          },
          "project": {
            "$ref": "#/definitions/EntityType"
          },
          "shift": {
            "$ref": "#/definitions/EntityType"
          }
        },
        "minProperties": 2,
        "required": [
          "percentage"
        ]
      }
    },
    "RemunerationOrDeductionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RemunerationOrDeductionType",
      "description": "Instruction for benefits and other deductions.",
      "type": "object",
      "properties": {
        "validFrom": {
          "description": "Valid from/to dates for one time deductions are the dates when the deduction was incurred, not when it was to be deducted. For recurring deductions, the valid from/to dates are the processing dates.",
          "$ref": "#/definitions/DateTimeType"
        },
        "validTo": {
          "description": "Valid from/to dates for one time deductions are the dates when the deduction was incurred, not when it was to be deducted. For recurring deductions, the valid from/to dates are the processing dates.",
          "$ref": "#/definitions/DateTimeType"
        },
        "id": {
          "description": "The identifier of the deduction.",
          "$ref": "#/definitions/IdentifierType"
        },
        "deploymentId": {
          "description": "Provides a unique identifier to a specific deployment. This may be used when a person has multiple deployments within an organization. For example, a coach and math teacher at a school.",
          "$ref": "#/definitions/IdentifierType"
        },
        "statusCode": {
          "description": "The action to be performed, Default is Create. Create - Add a new entry, Update is to add the current values to any existing values.",
          "$ref": "#/definitions/ActionCodeList"
        },
        "intervalCode": {
          "description": "The frequency at which an earning is 'earned'. E.g. how often the worker is paid the associated earning.",
          "$ref": "#/definitions/PayRateIntervalCodeList"
        },
        "oneTimeIndicator": {
          "description": "True for a one time deduction and False for a recurring deduction.",
          "$ref": "#/definitions/IndicatorType"
        },
        "totalTransactions": {
          "description": "The total number of deductions within the transaction.",
          "type": "number"
        },
        "sequence": {
          "description": "The order of this deduction within the deductions of this transaction.",
          "type": "number"
        },
        "typeCode": {
          "description": "The type of payment or deduction. E.g. salary, overtime, benefit, court order, garnishment, etc. This provides for a grouping of similar items, e.g. there may be many different Pension Deductions each with its own ID but they all have a Type of Pensions.",
          "$ref": "#/definitions/CodeType"
        },
        "subTypeCode": {
          "description": "The category within the deduction type. E.g. for garnishments this could be creditor, child support, etc. For benefits, this could be medical, car, voluntary insurance.",
          "$ref": "#/definitions/CodeType"
        },
        "referenceId": {
          "description": "The third party reference for the deduction. I.e. court order number, union membership number, etc.",
          "$ref": "#/definitions/IdentifierType"
        },
        "requestedAmount": {
          "description": "The amount to be deducted, if available.",
          "$ref": "#/definitions/AmountType"
        },
        "requestedPercentage": {
          "description": "The percent to be withheld. For example, an elected 3% retirement deduction.",
          "$ref": "#/definitions/PercentType"
        },
        "basis": {
          "description": "Used in conjunction with the requestedPercentage to calculate the remuneration or deduction amount in cases where the basisAmount is not known to the receiving system.",
          "type": "array",
          "items": {
            "description": "Basis Item",
            "type": "object",
            "properties": {
              "basisId": {
                "description": "An identifier for the basis instance.",
                "$ref": "#/definitions/IdentifierType"
              },
              "basisAmount": {
                "description": "The monetary amount on which the remuneration or deduction amount is calculated.",
                "$ref": "#/definitions/AmountType"
              }
            }
          }
        },
        "requestedRate": {
          "description": "The rate to be used for the number of units being processed, if available.",
          "$ref": "#/definitions/AmountType"
        },
        "requestedUnitType": {
          "description": "The Type of the Units, for example, Hours, Days, Pieces made, etc.",
          "$ref": "#/definitions/UnitCodeList"
        },
        "requestedUnits": {
          "description": "The number of units to be processed.",
          "type": "number"
        },
        "actualAmount": {
          "description": "The amount actually deducted after processing payroll.",
          "$ref": "#/definitions/AmountType"
        },
        "actualPaymentDate": {
          "description": "The date on which the actual amount was taken after processing payroll.",
          "$ref": "#/definitions/DateTimeType"
        },
        "originalBalanceAmount": {
          "description": "The total amount to be withheld over the life of this deduction.",
          "$ref": "#/definitions/AmountType"
        },
        "remainingBalanceAmount": {
          "description": "The current amount of the deduction after processing payroll.",
          "$ref": "#/definitions/AmountType"
        },
        "receivingParty": {
          "description": "Information about the person or organization receiving the payment.",
          "type": "object",
          "properties": {
            "personName": {
              "description": "The name of the person receiving the payment.",
              "$ref": "#/definitions/PersonNameType"
            },
            "personCommunication": {
              "description": "The phone, address, and/or email of the person receiving the payment.",
              "$ref": "#/definitions/CommunicationType"
            },
            "organizationName": {
              "description": "The name of the organization receiving payment.",
              "type": "string"
            },
            "paymentMethod": {
              "$ref": "#/definitions/PaymentMethodType"
            }
          }
        },
        "employerAmount": {
          "description": "The amount the employer contributes to the deduction type. For example, $10 for certification dues.",
          "$ref": "#/definitions/AmountType"
        },
        "employerPercentage": {
          "description": "The percent the employer contributes to the deduction type. For example 4% for retirement.",
          "$ref": "#/definitions/PercentType"
        }
      }
    },
    "RemunerationPackageType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RemunerationPackageType",
      "description": "Terms offered or agreed regarding remuneration for a position. May include pay as well as benefits in-kind.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EffectiveTimePeriodType"
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/EntityType"
        },
        "basisCode": {
          "description": "A code classifying the primary method of payment for the associated position or employment. This classifies the method by which remuneration for a position is provided or calculated.",
          "$ref": "#/definitions/RemunerationBasisCodeList"
        },
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationRangeType"
          }
        },
        "benefitsSummary": {
          "description": "A summary of the offered benefits.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "descriptions": {
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "WorkAllocationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkAllocationType",
      "description": "The payrate for a block of items completed.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string"
          },
          "quantityLimit": {
            "type": "number"
          },
          "payRate": {
            "$ref": "#/definitions/PayRateType"
          }
        },
        "minProperties": 2,
        "required": [
          "payRate"
        ]
      }
    },
    "PaymentMethodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PaymentMethodType",
      "description": "Defines how a payment is paid.",
      "type": "object",
      "properties": {
        "methodType": {
          "description": "The manner is which a payment is made. E.g. Direct Deposit, Check, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "accountId": {
          "description": "An account ID within a bank into which a payroll payment is deposited. The schemeID would include the word 'IBAN' or 'SWIFT' to reference the ID Type.",
          "$ref": "#/definitions/IdentifierType"
        },
        "accountType": {
          "description": "A bank account into which a payment is deposited.",
          "$ref": "#/definitions/CodeType"
        },
        "nameOnAccount": {
          "description": "The name of the person on the bank account",
          "type": "string"
        },
        "bankId": {
          "description": "This is a number or identifier for a bank used in the context of electronic funds transfer. Usually, only a single BankID needs to be specified in the context of a given transaction. The bankId may have different names in different parts of the world. E.g. BIC in Europe, Routing Number in the US, and Sort Code in UK.",
          "$ref": "#/definitions/IdentifierType"
        },
        "countryCode": {
          "description": "The country code where the bank is located.",
          "$ref": "#/definitions/CountryCodeList"
        },
        "currencyCode": {
          "description": "The currency of the payment to be made.",
          "$ref": "#/definitions/CurrencyCodeList"
        }
      }
    },
    "RemunerationRangeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RemunerationRangeType",
      "description": "The minimum and maximum range of work compensation.",
      "type": "object",
      "properties": {
        "typeCode": {
          "description": "The type of remuneration (e.g. BasePay, Bonus).",
          "$ref": "#/definitions/PayTypeCodeList"
        },
        "referenceAmount": {
          "description": "A reference to an associated monetary amount. A monetary quantity. An attribute is available to express the currency in which the amount is expressed.",
          "$ref": "#/definitions/AmountType"
        },
        "minimumAmount": {
          "description": "The minimum amount a person is willing to accept or an organization is willing to pay for a position.",
          "$ref": "#/definitions/AmountType"
        },
        "maximumAmount": {
          "description": "The maximum amount a person is willing to accept or an organization is willing to pay for a position.",
          "$ref": "#/definitions/AmountType"
        },
        "intervalCode": {
          "description": "An interval of time or other basis used to express a rate of pay or remuneration.",
          "$ref": "#/definitions/PayRateIntervalCodeList"
        }
      }
    },
    "DirectCompensationType_1": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DirectCompensationType",
      "description": "The monetary compensation paid to a worker.",
      "definitions": {
        "WorkedCompensationAmountType": {
          "title": "WorkedCompensationAmountType",
          "description": "Type and monetary value for time worked.",
          "type": "object",
          "properties": {
            "workedPayTypeCode": {
              "description": "Type of compensation, e.g. holiday, overtime, shift differential, etc.",
              "$ref": "#/definitions/PayTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the pay type.",
              "type": "string"
            },
            "workedPayAmount": {
              "description": "The monetary value paid to the worker.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "TimeOffCompensationAmountType": {
          "title": "TimeOffCompensationAmountType",
          "description": "Type and monetary value of the time off.",
          "type": "object",
          "properties": {
            "timeOffPayType": {
              "description": "Type of compensation, e.g. bereavement, jury duty, sick, etc.",
              "$ref": "#/definitions/TimeOffTypeCodeList"
            },
            "description": {
              "description": "A short phrase further describing the time off type.",
              "type": "string"
            },
            "timeOffPayAmount": {
              "description": "The monetary value paid to the worker.",
              "$ref": "#/definitions/AmountType"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "salaryAmount": {
          "description": "The agreed upon fixed or set monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services, that was not based on hours worked or production level. Salary is commonly paid in fixed intervals, for example, monthly payments of one-twelfth of the annual salary.",
          "$ref": "#/definitions/AmountType"
        },
        "totalHourlyWageAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services based on hourly rates of pay and the number of hours worked. Includes pay for both regular hours (straight-time) and premium hours (overtime, shift differentials) worked.",
          "$ref": "#/definitions/AmountType"
        },
        "totalPremiumHourlyWageAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker based on a premium hourly rate of pay and the number of premium hours worked. ",
          "$ref": "#/definitions/AmountType"
        },
        "totalPaidTimeoffAmount": {
          "description": "The total monetary amount the employer paid to a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, military duty, administrative time off, sabbatical, or other personal leave. Includes compensatory time off (CTO) when used.",
          "$ref": "#/definitions/AmountType"
        },
        "totalHolidayPaidTimeOffAmount": {
          "description": "The total monetary amount a worker was paid for absence from work on days of special religious, cultural, social, or patriotic significance, on which work and business ordinarily cease.",
          "$ref": "#/definitions/AmountType"
        },
        "totalOtherCompensationAmount": {
          "description": "The total monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker other than salary, hourly wages, and paid leave. Includes, but is not limited to bonuses, commissions, lump-sum, residuals, severance, tips, and incentive, piecework, production-based payments, and buy back of accrued leave. ",
          "$ref": "#/definitions/AmountType"
        },
        "regularHourlyWagesAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services.",
          "$ref": "#/definitions/WorkedCompensationAmountType"
        },
        "premiumHourlyWagesAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid by the employer to a worker for her or his services.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkedCompensationAmountType"
          }
        },
        "paidTimeOffAmount": {
          "description": "The monetary amount the employer paid to a worker for any type of absence from work including vacation, sickness, bereavement, maternity, family care, jury duty, education, military duty, administrative time off, sabbatical, or other personal leave. Includes compensatory time off (CTO) when used.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeOffCompensationAmountType"
          }
        },
        "otherCompensationAmount": {
          "description": "The monetary amount of cash or cash-equivalent (currency, coin, check, or direct deposit) compensation paid to a worker other than salary, hourly wages, and paid leave. Includes, but is not limited to bonuses, commissions, lump-sum, residuals, severance, tips, and incentive, piecework, production-based payments, and buy back of accrued leave. ",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkedCompensationAmountType"
          }
        }
      }
    },
    "v4": {
      "description": "Core schema meta-schema",
      "definitions": {
        "schemaArray": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#"
          }
        },
        "positiveInteger": {
          "type": "integer",
          "minimum": 0
        },
        "positiveIntegerDefault0": {
          "allOf": [
            {
              "$ref": "#/definitions/positiveInteger"
            },
            {
              "default": 0
            }
          ]
        },
        "simpleTypes": {
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "stringArray": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uri"
        },
        "$schema": {
          "type": "string",
          "format": "uri"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default": {},
        "multipleOf": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "default": false
        },
        "minimum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "default": false
        },
        "maxLength": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minLength": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "pattern": {
          "type": "string",
          "format": "regex"
        },
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ],
          "default": {}
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#"
            },
            {
              "$ref": "#/definitions/schemaArray"
            }
          ],
          "default": {}
        },
        "maxItems": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minItems": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "uniqueItems": {
          "type": "boolean",
          "default": false
        },
        "maxProperties": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minProperties": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "required": {
          "$ref": "#/definitions/stringArray"
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ],
          "default": {}
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#"
              },
              {
                "$ref": "#/definitions/stringArray"
              }
            ]
          }
        },
        "enum": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/simpleTypes"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/simpleTypes"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          ]
        },
        "allOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "not": {
          "$ref": "#"
        }
      },
      "dependencies": {
        "exclusiveMaximum": [
          "maximum"
        ],
        "exclusiveMinimum": [
          "minimum"
        ]
      },
      "default": {}
    },
    "JSON_Hyper_Schema": {
      "title": "JSON Hyper-Schema",
      "allOf": [
        {
          "$ref": "#/definitions/v4"
        }
      ],
      "properties": {
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ]
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ]
        },
        "dependencies": {
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#"
              },
              {
                "type": "array"
              }
            ]
          }
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#"
            },
            {
              "$ref": "#/definitions/schemaArray"
            }
          ]
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#"
          }
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#"
          }
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#"
          }
        },
        "allOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "not": {
          "$ref": "#"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkDescription"
          }
        },
        "fragmentResolution": {
          "type": "string"
        },
        "media": {
          "type": "object",
          "properties": {
            "type": {
              "description": "A media type, as described in RFC 2046",
              "type": "string"
            },
            "binaryEncoding": {
              "description": "A content encoding scheme, as described in RFC 2045",
              "type": "string"
            }
          }
        },
        "pathStart": {
          "description": "Instances' URIs must start with this value for this schema to apply to them",
          "type": "string",
          "format": "uri"
        }
      },
      "definitions": {
        "schemaArray": {
          "type": "array",
          "items": {
            "$ref": "#"
          }
        },
        "linkDescription": {
          "title": "Link Description Object",
          "type": "object",
          "required": [
            "href",
            "rel"
          ],
          "properties": {
            "href": {
              "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",
              "type": "string"
            },
            "rel": {
              "description": "relation to the target resource of the link",
              "type": "string"
            },
            "title": {
              "description": "a title for the link",
              "type": "string"
            },
            "targetSchema": {
              "description": "JSON Schema describing the link target",
              "$ref": "#"
            },
            "mediaType": {
              "description": "media type (as defined by RFC 2046) describing the link target",
              "type": "string"
            },
            "method": {
              "description": "method for requesting the target of the link (e.g. for HTTP this might be \"GET\" or \"DELETE\")",
              "type": "string"
            },
            "encType": {
              "description": "The media type in which to submit data along with the request",
              "type": "string",
              "default": "application/json"
            },
            "schema": {
              "description": "Schema describing the data to submit along with the request",
              "$ref": "#"
            }
          }
        }
      },
      "links": [
        {
          "rel": "self",
          "href": "{+id}"
        },
        {
          "rel": "full",
          "href": "{+($ref)}"
        }
      ]
    },
    "HR_Open_Standards": {
      "title": "HR Open Standards",
      "description": "HROS Core schema meta-schema",
      "definitions": {
        "schemaArray": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#"
          }
        },
        "positiveInteger": {
          "type": "integer",
          "minimum": 0
        },
        "positiveIntegerDefault0": {
          "allOf": [
            {
              "$ref": "#/definitions/positiveInteger"
            },
            {
              "default": 0
            }
          ]
        },
        "simpleTypes": {
          "enum": [
            "array",
            "boolean",
            "integer",
            "null",
            "number",
            "object",
            "string"
          ]
        },
        "stringArray": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uri"
        },
        "$schema": {
          "type": "string",
          "format": "uri"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default": {},
        "multipleOf": {
          "type": "number",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "boolean",
          "default": false
        },
        "minimum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "boolean",
          "default": false
        },
        "maxLength": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minLength": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "pattern": {
          "type": "string",
          "format": "regex"
        },
        "additionalItems": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ],
          "default": {}
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#"
            },
            {
              "$ref": "#/definitions/schemaArray"
            }
          ],
          "default": {}
        },
        "maxItems": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minItems": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "uniqueItems": {
          "type": "boolean",
          "default": false
        },
        "maxProperties": {
          "$ref": "#/definitions/positiveInteger"
        },
        "minProperties": {
          "$ref": "#/definitions/positiveIntegerDefault0"
        },
        "required": {
          "$ref": "#/definitions/stringArray"
        },
        "additionalProperties": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#"
            }
          ],
          "default": {}
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "patternProperties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          },
          "default": {}
        },
        "dependencies": {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#"
              },
              {
                "$ref": "#/definitions/stringArray"
              }
            ]
          }
        },
        "enum": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/simpleTypes"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/simpleTypes"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          ]
        },
        "allOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
          "$ref": "#/definitions/schemaArray"
        },
        "not": {
          "$ref": "#"
        },
        "enumNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+(\\.\\d+){1,3}$"
        }
      },
      "dependencies": {
        "exclusiveMaximum": [
          "maximum"
        ],
        "exclusiveMinimum": [
          "minimum"
        ]
      },
      "default": {}
    },
    "JSON_Patch": {
      "title": "JSON Patch",
      "description": "A JSON Schema describing a JSON Patch",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "source": {
          "description": "Source schema to be modified",
          "type": "string",
          "format": "uri"
        },
        "patch": {
          "description": "List of patch operations to perform",
          "type": "array",
          "items": {
            "$ref": "#/definitions/operation"
          }
        }
      },
      "required": [
        "schema",
        "patch"
      ],
      "definitions": {
        "operation": {
          "type": "object",
          "properties": {
            "path": {
              "$ref": "#/definitions/jsonPointer"
            }
          },
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "add",
                    "replace",
                    "test"
                  ]
                },
                "value": {
                  "description": "The value to add, replace or test."
                }
              },
              "required": [
                "value"
              ]
            },
            {
              "type": "object",
              "properties": {
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "remove"
                  ]
                }
              }
            },
            {
              "type": "object",
              "properties": {
                "op": {
                  "description": "The operation to perform.",
                  "type": "string",
                  "enum": [
                    "move",
                    "copy"
                  ]
                },
                "from": {
                  "$ref": "#/definitions/jsonPointer"
                }
              },
              "required": [
                "from"
              ]
            }
          ],
          "required": [
            "op",
            "path"
          ]
        },
        "jsonPointer": {
          "description": "A JSON Pointer path.",
          "type": "string",
          "pattern": "^(/[^/~]*(~[01][^/~]*)*)*$"
        }
      }
    },
    "SearchOrderType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchOrderType",
      "description": "Specifying order information of search results.",
      "type": "object",
      "properties": {
        "criterion": {
          "$ref": "#/definitions/OrderCriterionType"
        },
        "direction": {
          "enum": [
            "Asc",
            "Desc"
          ]
        },
        "sequence": {
          "type": "integer"
        }
      },
      "required": [
        "criterion"
      ]
    },
    "GeoDistanceQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GeoDistanceQueryType",
      "description": "Type for geo distance queries - radial distance around center geo point.",
      "type": "object",
      "properties": {
        "geoDistance": {
          "type": "object",
          "properties": {
            "propertyPath": {
              "description": "Path of the property to which the condition applies.",
              "type": "string"
            },
            "geoPoint": {
              "description": "Requested center (geo point) for the distance calculation.",
              "$ref": "#/definitions/GeoType"
            },
            "distance": {
              "description": "Requested distance condition.",
              "type": "object",
              "properties": {
                "lessThan": {
                  "type": "number"
                },
                "lessThanOrEqualTo": {
                  "type": "number"
                },
                "equalTo": {
                  "type": "number"
                },
                "greaterThanOrEqualTo": {
                  "type": "number"
                },
                "greaterThan": {
                  "type": "number"
                },
                "unitCode": {
                  "$ref": "#/definitions/CodeType"
                }
              }
            }
          },
          "required": [
            "geoPoint",
            "distance"
          ]
        }
      }
    },
    "SearchCriterionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchCriterionType",
      "description": "A search criterion.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AllQueryType"
        }
      ],
      "properties": {
        "weight": {
          "description": "Criterion importance. Criterion can be set as required, or a numerical weight may be assigned.",
          "$ref": "#/definitions/WeightType"
        },
        "id": {
          "description": "Criterion identifier. Can be used to refer to the criterion later, e.g. in search result details explanation.",
          "$ref": "#/definitions/IdentifierType"
        }
      }
    },
    "ScoreThresholdType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScoreThresholdType",
      "description": "(Lower/upper) threshold of score.",
      "type": "object",
      "properties": {
        "minimumThreshold": {
          "description": "Lower/minimum threshold for score.",
          "type": "number"
        },
        "maximumThreshold": {
          "description": "Upper/maximum threshold for score.",
          "type": "number"
        }
      },
      "minProperties": 1
    },
    "NestedQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NestedQueryType",
      "description": "Type to implement nested queries.",
      "type": "object",
      "properties": {
        "nested": {
          "type": "object",
          "properties": {
            "commonPropertyPath": {
              "description": "Common property path that refers to the nested structure instance.",
              "type": "string"
            },
            "query": {
              "description": "Actual query conditions.",
              "$ref": "#/definitions/AllQueryType"
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    "RangeNumberQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RangeNumberQueryType",
      "description": "Range query type based on numerical data.",
      "type": "object",
      "properties": {
        "rangeNumber": {
          "type": "object",
          "properties": {
            "propertyPath": {
              "description": "Path of the property to which the condition applies.",
              "type": "string"
            },
            "lessThan": {
              "description": "Value used for a 'less-than' condition.",
              "type": "number"
            },
            "lessThanOrEqualTo": {
              "description": "Value used for a 'less-than-or-equal-to' condition.",
              "type": "number"
            },
            "equalTo": {
              "description": "Value used for an 'equal-to' condition.",
              "type": "number"
            },
            "greaterThanOrEqualTo": {
              "description": "Value used for a 'greater-than-or-equal-to' condition.",
              "type": "number"
            },
            "greaterThan": {
              "description": "Value used for a 'greater-than' condition.",
              "type": "number"
            },
            "unitCode": {
              "description": "Optional unit code to specify the numerical values.",
              "$ref": "#/definitions/CodeType"
            }
          }
        }
      }
    },
    "WeightType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WeightType",
      "description": "Weight that describes the importance of the search criteria.",
      "type": "object",
      "properties": {
        "value": {
          "type": "number"
        },
        "maximumValue": {
          "description": "Highest score in the weight range for the search criteria to be considered matched.",
          "type": "number"
        },
        "minimumValue": {
          "description": "Lowest score in the weight range for the search criteria to be considered matched.",
          "type": "number"
        },
        "isRequired": {
          "description": "The search criterion is required to be in the matching items.",
          "$ref": "#/definitions/IndicatorType"
        },
        "minimumScoreToFulfillRequired": {
          "description": "Lowest score in order to fulfill a required criterion. Only relevant for cases of partial match, e.g. by affinities.",
          "type": "number"
        }
      }
    },
    "ReferencedPropertyValueType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ReferencedPropertyValueType",
      "description": "Type for representing a property referenced by its path with its value(s).",
      "type": "object",
      "properties": {
        "propertyPath": {
          "description": "Identifier / path of the property.",
          "type": "string"
        },
        "values": {
          "description": "Related values.",
          "$ref": "#/definitions/StringTypeArray"
        }
      },
      "required": [
        "propertyPath"
      ]
    },
    "BooleanAndQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BooleanAndQueryType",
      "description": "Type to implement a 'boolean AND' query.",
      "type": "object",
      "properties": {
        "booleanAnd": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllQueryType"
          },
          "minItems": 2
        }
      }
    },
    "BooleanQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BooleanQueryType",
      "description": "Set of all boolean query types.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BooleanAndQueryType"
        },
        {
          "$ref": "#/definitions/BooleanOrQueryType"
        },
        {
          "$ref": "#/definitions/BooleanNotQueryType"
        }
      ]
    },
    "TermsQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TermsQueryType",
      "description": "Type for fixed term / keyword queries.",
      "type": "object",
      "properties": {
        "terms": {
          "type": "object",
          "properties": {
            "propertyPath": {
              "description": "Path of the property to which the condition applies.",
              "type": "string"
            },
            "values": {
              "description": "Terms to be searched.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "matchMode": {
              "description": "Mode for matching - to fulfill the condition: 'allOf': all search values have to be found, 'anyOf': at least one search value has to be found, 'oneOf': exactly one search value has to be found, 'noneOf': none search value is found.",
              "enum": [
                "allOf",
                "anyOf",
                "oneOf",
                "noneOf"
              ]
            }
          },
          "required": [
            "values"
          ]
        }
      }
    },
    "FulltextQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "FulltextQueryType",
      "description": "Type for fulltext queries.",
      "type": "object",
      "properties": {
        "fulltext": {
          "type": "object",
          "properties": {
            "propertyPaths": {
              "description": "Path of the properties to which the condition applies.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "values": {
              "description": "Fulltext search string(s).",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "options": {
              "description": "Further parameters to specify the behavior of the fulltext search.",
              "$ref": "#/definitions/ParameterTypeArray"
            }
          },
          "required": [
            "values"
          ]
        }
      }
    },
    "RangeDateTimeQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RangeDateTimeQueryType",
      "description": "Range query type based on date and time data.",
      "type": "object",
      "properties": {
        "rangeDateTime": {
          "type": "object",
          "properties": {
            "propertyPath": {
              "description": "Path of the property to which the condition applies.",
              "type": "string"
            },
            "lessThan": {
              "description": "Value used for a 'less-than' condition.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "lessThanOrEqualTo": {
              "description": "Value used for a 'less-than-or-equal-to' condition.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "equalTo": {
              "description": "Value used for an 'equal-to' condition.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "greaterThanOrEqualTo": {
              "description": "Value used for a 'greater-than-or-equal-to' condition.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "greaterThan": {
              "description": "Value used for a 'greater-than' condition.",
              "$ref": "#/definitions/FormattedDateTimeType"
            }
          }
        }
      }
    },
    "RequestedMatchedObjectDescriptorType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RequestedMatchedObjectDescriptorType",
      "description": "Type to define a matched object descriptor, which is used to define the fields from the matching results to be returned.",
      "type": "object",
      "properties": {
        "propertyPath": {
          "description": "Path of the property that should be returned.",
          "type": "string"
        },
        "options": {
          "description": "Further parameters. May include other information relevant for property data.",
          "$ref": "#/definitions/ParameterTypeArray"
        }
      }
    },
    "ParameterTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ParameterTypeArray",
      "description": "Array of generic parameter type (key/value).",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ParameterType"
      }
    },
    "LeafQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LeafQueryType",
      "description": "Set of all leaf query types, i.e. without any substructure, which look for a particular value in a particular field, such as the fulltext match, terms, geo distance, or range queries.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RangeQueryType"
        },
        {
          "$ref": "#/definitions/TermsQueryType"
        },
        {
          "$ref": "#/definitions/FulltextQueryType"
        },
        {
          "$ref": "#/definitions/GeoDistanceQueryType"
        },
        {
          "$ref": "#/definitions/GeoPolygonQueryType"
        }
      ]
    },
    "RangeQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RangeQueryType",
      "description": "Set of all range query types.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RangeNumberQueryType"
        },
        {
          "$ref": "#/definitions/RangeDateTimeQueryType"
        }
      ]
    },
    "SearchDocumentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchDocumentType",
      "description": "A general search type.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "searchQuery": {
          "$ref": "#/definitions/SearchQueryType"
        },
        "searchResult": {
          "$ref": "#/definitions/SearchResultType"
        }
      }
    },
    "GeoPolygonQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GeoPolygonQueryType",
      "description": "Type for geographical polygon queries.",
      "type": "object",
      "properties": {
        "geoPolygon": {
          "type": "object",
          "properties": {
            "propertyPath": {
              "description": "Path of the property to which the condition applies.",
              "type": "string"
            },
            "geoPolygon": {
              "description": "The geographical polygon of geographical points. In order to fulfill the query/criterion, the location geo points must fall inside the polygon.",
              "$ref": "#/definitions/GeoPolygonType"
            }
          },
          "required": [
            "geoPolygon"
          ]
        }
      }
    },
    "GeoPolygonType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GeoPolygonType",
      "description": "A geographical polygon - consisting of an ordered set of geographical points. A minimum of 4 points is required. The first and the last position should be identical to be a valid polygon.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/GeoType"
      },
      "minItems": 4
    },
    "BooleanOrQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BooleanOrQueryType",
      "description": "Type to implement a 'boolean OR' query.",
      "type": "object",
      "properties": {
        "booleanOr": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllQueryType"
          },
          "minItems": 2
        }
      }
    },
    "ParameterType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ParameterType",
      "description": "Generic parameter type (key/value) used to further qualify the search and/or result behavior.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "BooleanNotQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BooleanNotQueryType",
      "description": "Type to implement a 'boolean NOT' query.",
      "type": "object",
      "properties": {
        "booleanNot": {
          "$ref": "#/definitions/AllQueryType"
        }
      }
    },
    "SearchResultType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchResultType",
      "description": "The actual search result (set/list).",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of items in this result set.",
          "type": "integer"
        },
        "countAll": {
          "description": "Number of all items that match the search criteria.",
          "type": "integer"
        },
        "executionCode": {
          "description": "A result code from the execution of the search.",
          "type": "string"
        },
        "executionTime": {
          "description": "Execution duration of the search.",
          "$ref": "#/definitions/MeasureType"
        },
        "items": {
          "description": "Search result items (of this set).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResultItemType"
          }
        }
      },
      "definitions": {
        "SearchResultItemType": {
          "title": "SearchResultItemType",
          "description": "Search result item.",
          "type": "object",
          "properties": {
            "matchedObjectId": {
              "description": "Identifier of the matched object/item.",
              "$ref": "#/definitions/IdentifierType"
            },
            "matchedObjectDescriptors": {
              "description": "Descriptors of the matched object/item. Remark: usually correspond to the requested descriptors as given in the search query.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReferencedPropertyValueType"
              }
            },
            "relevanceRank": {
              "description": "Rank according to relevance of the search.",
              "type": "integer"
            },
            "relevanceScore": {
              "description": "Relevance score - usually in numerical values from 0.0 (no overestimation) to 1.0 (full overestimation with search criteria).",
              "type": "number"
            },
            "relevanceScoreIsRequiredMissedIndicator": {
              "description": "Relevance score indicator that at least one required criterion is missed in the item. Remark: Only needed if such search results are forced to be considered.",
              "$ref": "#/definitions/IndicatorType"
            },
            "relevanceScoreDetails": {
              "description": "Details about the score or evaluation of the item to help explain its relevance to the search criteria.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelevanceScoreDetailsItemType"
              }
            }
          }
        },
        "RelevanceScoreDetailsItemType": {
          "title": "RelevanceScoreDetailsItemType",
          "description": "Detailed information about the relevance score evaluation.",
          "type": "object",
          "properties": {
            "searchCriterion": {
              "description": "Related search criterion data.",
              "$ref": "#/definitions/SearchCriterionType"
            },
            "searchCriterionReference": {
              "description": "Reference to related search criterion. Remark: refers to 'searchCriterion.id.value'.",
              "type": "string"
            },
            "fulfillmentScore": {
              "description": "Fulfillment score - usually in values from 0.0 (no relevance or fulfillment) to 1.0 (full relevance or complete fulfillment with search criterion).",
              "type": "number"
            },
            "fulfillmentScoreIsRequiredMissedIndicator": {
              "description": "Fulfillment score indicator that a required criterion is missed.",
              "$ref": "#/definitions/IndicatorType"
            },
            "fulfillmentData": {
              "description": "Further information about fulfillment evaluation for this criterion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReferencedPropertyValueType"
              }
            }
          }
        }
      }
    },
    "AllQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AllQueryType",
      "description": "Set of all query types.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/LeafQueryType"
        },
        {
          "$ref": "#/definitions/BooleanQueryType"
        },
        {
          "$ref": "#/definitions/NestedQueryType"
        }
      ]
    },
    "OrderCriterionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrderCriterionType",
      "description": "Type to define a single order criterion.",
      "type": "object",
      "properties": {
        "propertyPath": {
          "description": "Path of the property to be ordered by.",
          "type": "string"
        },
        "options": {
          "description": "Further parameters. May include additional information relevant for ordering.",
          "$ref": "#/definitions/ParameterTypeArray"
        }
      }
    },
    "SearchLimitType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchLimitType",
      "description": "Specifying limit information of a search result.",
      "type": "object",
      "properties": {
        "from": {
          "description": "(Index of) first item to be returned. A minimum value of 0 should be used.",
          "type": "integer"
        },
        "size": {
          "description": "Number of items to be returned.",
          "type": "integer"
        }
      }
    },
    "SearchQueryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SearchQueryType",
      "description": "A general search query type.",
      "type": "object",
      "properties": {
        "limit": {
          "description": "The limit of the number of items to return in the search result.",
          "$ref": "#/definitions/SearchLimitType"
        },
        "orders": {
          "description": "The order of the items in the search result.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchOrderType"
          }
        },
        "searchCriteria": {
          "description": "The search criteria to use when executing the search.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchCriterionType"
          }
        },
        "scoreThreshold": {
          "description": "The score threshold (minimum and/or maximum) of the items in the search result.",
          "$ref": "#/definitions/ScoreThresholdType"
        },
        "requestedMatchedObjectDescriptors": {
          "description": "Requested descriptors (attributes) of the search result items. Elements should be selected using the JSONPath notation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestedMatchedObjectDescriptorType"
          }
        }
      }
    },
    "OrganizationAffiliationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrganizationAffiliationType",
      "description": "Contains information about a person's affiliation with a trade, professional, or similar organization or group formed around a common purpose or cause.",
      "type": "object",
      "properties": {
        "organization": {
          "description": "The specific organization to which the person is affiliated.",
          "$ref": "#/definitions/OrganizationType"
        },
        "affiliationTypeCode": {
          "description": "The type of association or organization with which a person is affiliated. In most contexts, this would be an organizational affiliation other than that with an employer. Typically, would be an affiliation with an association, trade organization, or union.",
          "$ref": "#/definitions/AffiliatedOrganizationTypeCodeList"
        },
        "memberId": {
          "description": "The membership identifier of the person at the affiliated organization.",
          "$ref": "#/definitions/IdentifierType"
        },
        "role": {
          "description": "The role of the person at the affiliated organization.",
          "type": "string"
        },
        "startDate": {
          "description": "The start date of the person at the affiliated organization.",
          "$ref": "#/definitions/DateType"
        },
        "endDate": {
          "description": "The end date of the person at the affiliated organization.",
          "$ref": "#/definitions/DateType"
        },
        "descriptions": {
          "description": "Other descriptions of the affiliated organization.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "attachmentReferences": {
          "description": "Related attachment references for the affiliated organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        }
      }
    },
    "PublicationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PublicationType",
      "description": "Basic type that contains all properties common to publication, which could be print or electronic.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An identifier of the publication.",
          "$ref": "#/definitions/IdentifierType"
        },
        "type": {
          "description": "Type of publication, such as a book or article.",
          "$ref": "#/definitions/PublicationTypeCodeList"
        },
        "date": {
          "description": "The date that the publication was published.",
          "$ref": "#/definitions/DateType"
        },
        "title": {
          "description": "The title of the publication.",
          "type": "string"
        },
        "abstract": {
          "description": "A summary or abstract of the publication.",
          "type": "string"
        },
        "contributors": {
          "description": "A list of contributors to the publication.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the contributor.",
                "type": "string"
              },
              "role": {
                "description": "The role of the contributor.",
                "type": "string"
              }
            }
          }
        },
        "copyrights": {
          "description": "A list of copyright holders and year when the copyright was issued.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "owner": {
                "description": "The owner(s) of the copyright.",
                "type": "string"
              },
              "year": {
                "description": "The year when the copyright was issued to the owner.",
                "$ref": "#/definitions/YearType"
              }
            }
          }
        },
        "attachmentReferences": {
          "description": "A reference to an attachment related to the publication.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        },
        "languageCode": {
          "description": "The language of the publication.",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "comments": {
          "description": "Comments related to the publication.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        },
        "journal": {
          "description": "The journal where the publication was published.",
          "type": "string"
        },
        "issn": {
          "description": "The ISSN (International Standard Serial Number) issued for the publication.",
          "type": "string"
        },
        "volume": {
          "description": "The volume of the publication if the publication is part of a series.",
          "type": "string"
        },
        "issue": {
          "description": "The issue of the publication if the publication is part of a series.",
          "type": "string"
        },
        "pages": {
          "description": "The pages related to the publication if the published material is only part of a larger work.",
          "type": "string"
        },
        "edition": {
          "description": "The edition or version number of the publication.",
          "type": "string"
        },
        "chapters": {
          "description": "The chapters related to the publication if the published material is only part of a larger work.",
          "type": "string"
        },
        "isbn": {
          "description": "The ISBN representing the publication. ISBN is an International Standard Book Number, which is typically 13 digits.",
          "type": "string"
        },
        "publisher": {
          "description": "The publisher of the publication.",
          "type": "string"
        },
        "publisherLocation": {
          "description": "The location of the publisher of the publication.",
          "$ref": "#/definitions/LocationType"
        },
        "event": {
          "description": "The event that is related to a publication (i.e. a book launch or a conference).",
          "$ref": "#/definitions/EventType"
        }
      },
      "required": [
        "title",
        "type"
      ]
    },
    "EventType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EventType",
      "description": "Basic type that contains all properties common to an event, conference, or some other type of function.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "properties": {
        "venue": {
          "description": "The name of the venue where the event occurred.",
          "type": "string"
        },
        "location": {
          "description": "The location of the venue.",
          "$ref": "#/definitions/LocationType"
        },
        "when": {
          "description": "The start and end date when the event occurred.",
          "$ref": "#/definitions/DateOpenEndPeriodType"
        }
      }
    },
    "LicenseType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LicenseType",
      "description": "Authoritative permission to hold a certain status or to do certain things, e.g. to practise some trade or profession. (OED license, n. a. A formal, usually a printed or written permission from a constituted authority to do something. b. The document embodying such a permission.)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CertificationType"
        }
      ],
      "properties": {
        "endorsements": {
          "description": "The modifications to the base license as authorized by the issuing authority that allow for additional access or grant additional qualifications. Examples include different variations of drivers or pilot licenses that allow for additional vehicles to be operated.",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/EffectiveTimePeriodType"
              }
            ],
            "properties": {
              "value": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ]
          },
          "minItems": 1
        },
        "restrictions": {
          "description": "The modifications to the base license as authorized by the issuing authority that restrict access or remove permissions or authority. Examples include requiring vision ware while operating a motor vehicle, or requiring an additional licensed operator to accompany the licensee while operating a vehicle.",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/EffectiveTimePeriodType"
              }
            ],
            "properties": {
              "value": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ]
          },
          "minItems": 1
        },
        "violations": {
          "description": "The violations or transgressions against the license as per the licensing authority or other authorities. Examples include points violations on a drivers license due to speeding.",
          "type": "array",
          "items": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/definitions/EffectiveTimePeriodType"
              }
            ],
            "properties": {
              "value": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ]
          },
          "minItems": 1
        }
      }
    },
    "PatentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PatentType",
      "description": "Basic type that contains all properties common to represent a patent.",
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "title": {
          "description": "The patent title as registered with the government organization.",
          "type": "string"
        },
        "inventorNames": {
          "description": "The list of inventors who are registered on the patent.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "assigneeNames": {
          "description": "The list of assignees who are registered on the patent.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "issuingAuthority": {
          "description": "The agency under which the patent is registered.",
          "$ref": "#/definitions/OrganizationType"
        },
        "status": {
          "description": "The current status of the patent. Statuses include filed, pending, issued.",
          "$ref": "#/definitions/PatentStatusCodeList"
        },
        "attachmentReferences": {
          "description": "References to the patent.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        },
        "descriptions": {
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "BaseHistoryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BaseHistoryType",
      "description": "Basic type that contains all properties common to a person's profile history entry - intended for use in education history, employment history or military history.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier for the history.",
          "$ref": "#/definitions/IdentifierType"
        },
        "start": {
          "description": "The start date of the history if known.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "end": {
          "description": "The end date of the history if known.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "current": {
          "description": "Indicator that the person's history entry is currently active (i.e. if education, still at the school. If work history, still working at the organization)",
          "$ref": "#/definitions/IndicatorType"
        },
        "attachmentReferences": {
          "description": "Attachment references supporting the history entry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        },
        "descriptions": {
          "description": "Additional details or descriptions about the history entry.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "PersonProfileType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonProfileType",
      "description": "Represents person along with profile data.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        },
        {
          "$ref": "#/definitions/PersonProfileInclusion"
        }
      ]
    },
    "CertificationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CertificationType",
      "description": "A document or confirmation certifying the status or acquirements of the bearer, or his fulfillment of conditions which authorize him to act or practise in a specified way; hence, often equal to a certificate.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier to the certificate as defined by the issuing authority.",
          "$ref": "#/definitions/IdentifierType"
        },
        "name": {
          "description": "The common name of the certificate.",
          "type": "string"
        },
        "type": {
          "description": "The type of the certificate.",
          "$ref": "#/definitions/EntityType"
        },
        "status": {
          "description": "The status of the certificate. While this is an open string, common status include active, expired, pending, suspended.",
          "type": "string"
        },
        "effectiveTimePeriod": {
          "description": "The time period for which the certificate is valid and considered active.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "issued": {
          "description": "The most recent issue date of the certificate. This might be of relevance if it differs from the start date of the valid time period or is a renewal of a previous certificate.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "firstIssued": {
          "description": "The original issue date of the certificate. Often this is useful when the certificates need to be renewed often, and it is important to know how long the certificate has been held.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "issuingAuthority": {
          "description": "The organization that issued the certificate.",
          "$ref": "#/definitions/OrganizationType"
        },
        "attachmentReferences": {
          "description": "References to attachments in the message that provide evidence of the issue or the validity of the license.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        },
        "descriptions": {
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "RefereeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RefereeType",
      "description": "A person who may be referred to for information or guidance on the character or other qualities of someone e.g. an applicant for employment or for an academic or other award.",
      "type": "object",
      "properties": {
        "refereeId": {
          "description": "An identifier for the Referee.",
          "$ref": "#/definitions/IdentifierType"
        },
        "personName": {
          "description": "The name of the Referee.",
          "$ref": "#/definitions/PersonNameType"
        },
        "positionTitle": {
          "description": "The job title of the Referee.",
          "type": "string"
        },
        "organizationName": {
          "description": "The associated company or organization of the Referee.",
          "type": "string"
        },
        "communication": {
          "description": "The communication to be used to reach the Referee.",
          "$ref": "#/definitions/CommunicationType"
        },
        "yearsKnown": {
          "description": "The number of years to which the Referee has been known to the person.",
          "type": "number"
        },
        "relationship": {
          "description": "The relationship of the Referee to the person.",
          "$ref": "#/definitions/RelationshipTypeCodeList"
        },
        "attachmentReferences": {
          "description": "A reference to an attachment related to the Referee and the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentReferenceType"
          }
        },
        "comments": {
          "description": "Comments related to the Referee and the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      },
      "required": [
        "personName"
      ]
    },
    "MilitaryServiceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "MilitaryServiceType",
      "description": "History of military service. Service or employment in a military branch.",
      "allOf": [
        {
          "$ref": "#/definitions/BaseHistoryType"
        }
      ],
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "The country to which this military service was performed.",
          "$ref": "#/definitions/CountryCodeList"
        },
        "serviceNumber": {
          "description": "The military service number or identifier of the person as defined by the country, branch, and/or division.",
          "type": "string"
        },
        "branch": {
          "description": "The military office or department in which the person served; e.g. army, navy.",
          "type": "string"
        },
        "division": {
          "description": "The military division as defined in the military branch and country. It could be a portion of an army or fleet, consisting of a definite number of troops or vessels, under one commanding officer; also applied to a definite portion of a squadron or battalion.",
          "type": "string"
        },
        "startingRank": {
          "description": "The rank which the person held in the military service at the beginning of the service period.",
          "type": "string"
        },
        "endingRank": {
          "description": "The rank which the person held at the end of the military service period.",
          "type": "string"
        },
        "currentRankIndicator": {
          "description": "An indicator that the rank is currently held as part of active service. Do not use this indicator if the person is no longer holding this rank.",
          "$ref": "#/definitions/IndicatorType"
        },
        "campaigns": {
          "description": "A list of campaigns to which the person was involved during the service period.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "expertises": {
          "description": "A list of expertise that the person developed during the service period.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecifiedCompetencyType"
          }
        },
        "honors": {
          "description": "A list of honors that the person received during the service period.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "disciplinaryActions": {
          "description": "A list of disciplinary actions taken during the service period.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "dischargeStatus": {
          "description": "If this is not a currently held service, the discharge status for the service period. E.g. honorable, dishonorable, general.",
          "type": "string"
        },
        "dischargeDate": {
          "description": "If this is not a currently held service, the date of discharge.",
          "$ref": "#/definitions/DateType"
        },
        "comments": {
          "type": "array",
          "description": "Additional comments about the military service history.",
          "items": {
            "$ref": "#/definitions/CommentType"
          }
        }
      }
    },
    "EmployerHistoryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmployerHistoryType",
      "description": "The prior and current details of a person's employment, work, or relevant experience such as might be reported within a professional profile, CV, resume, employment application, or similar document. Details of a particular tenure of employment or work with an organization.",
      "definitions": {
        "PositionHistoryType": {
          "title": "PositionHistoryType",
          "description": "The details about a persons tenure within position.",
          "allOf": [
            {
              "$ref": "#/definitions/BaseHistoryType"
            }
          ],
          "type": "object",
          "properties": {
            "title": {
              "description": "The title that the person held for this position.",
              "type": "string"
            },
            "resourceRelationshipCode": {
              "description": "The relationship of the person to the organization - an employee or an employee of another company (contract or temporary staffing).",
              "$ref": "#/definitions/ResourceRelationshipCodeList"
            },
            "organization": {
              "description": "The department, sub-company, office, or other sub-organization to which the person was employed.",
              "$ref": "#/definitions/OrganizationType"
            },
            "location": {
              "description": "The location of the position to which the person was employed.",
              "$ref": "#/definitions/LocationType"
            },
            "jobCategories": {
              "description": "The job categories under which the position is classified. These may be international, national, industry, or company categories as defined by the entity owner.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityType"
              }
            },
            "jobLevels": {
              "description": "The job levels under which this position is classified. These may be international, national, industry or company levels as defined by the entity owner.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityType"
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseHistoryType"
        }
      ],
      "type": "object",
      "properties": {
        "organization": {
          "description": "The specific organization to which the person held positions or performed work.",
          "$ref": "#/definitions/OrganizationType"
        },
        "positionHistories": {
          "description": "The set of positions that the person held at the organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PositionHistoryType"
          }
        }
      }
    },
    "EducationAttendanceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EducationAttendanceType",
      "description": "Contains details documenting a person's attendance at an educational institution. (OED Institution, n. An establishment, organization, or association, instituted for the promotion of education.)",
      "definitions": {
        "EducationSpecializationType": {
          "title": "EducationSpecializationType",
          "allOf": [
            {
              "$ref": "#/definitions/EntityType"
            }
          ],
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of specialization, e.g. 'major', 'minor'.",
              "type": "string"
            }
          }
        },
        "EducationDegreeType": {
          "title": "EducationDegreeType",
          "description": "Contains details about the student's degree. A degree is a recognized completion of studies at a school (such as a college or university). A certificate, which may be a diploma or degree, is generally issued in recognition of having completed the course of study.",
          "type": "object",
          "properties": {
            "id": {
              "description": "Identifier for the degree.",
              "$ref": "#/definitions/IdentifierType"
            },
            "name": {
              "description": "Name for the degree.",
              "type": "string"
            },
            "codes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            },
            "date": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "specializations": {
              "description": "The focus of study for the student's degree. This may include majors, minors, emphasis or other foci.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EducationSpecializationType"
              }
            },
            "score": {
              "$ref": "#/definitions/ScoreType"
            },
            "academicHonors": {
              "$ref": "#/definitions/StringTypeArray"
            },
            "degreeGrantedStatus": {
              "description": "Current education degree granted status.",
              "$ref": "#/definitions/EducationDegreeGrantedStatusCodeList"
            },
            "iscedEducationLevelCode": {
              "description": "ISCED: International Standard Classification of Education - is the standard classification of the education level of this attendance.",
              "$ref": "#/definitions/IscedCodeList"
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseHistoryType"
        }
      ],
      "type": "object",
      "properties": {
        "institution": {
          "description": "The institution to which the person attended.",
          "$ref": "#/definitions/OrganizationType"
        },
        "department": {
          "description": "The department at the institution to which the person attended.",
          "$ref": "#/definitions/OrganizationType"
        },
        "programs": {
          "description": "The list of programs to which the person attended.",
          "$ref": "#/definitions/StringTypeArray"
        },
        "educationLevelCodes": {
          "description": "The identifier to the level of the education attendance. This could be country-specific or industry-specific classifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntityType"
          }
        },
        "currentlyAttendingIndicator": {
          "description": "Indicator that the person is still attending.",
          "$ref": "#/definitions/IndicatorType"
        },
        "goodStandingIndicator": {
          "description": "Indicator that the person is currently in good standing according to the rules of the educational institution.",
          "$ref": "#/definitions/IndicatorType"
        },
        "educationDegrees": {
          "description": "The degrees which were awarded or in process at the institution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EducationDegreeType"
          }
        },
        "otherAttendancePeriods": {
          "description": "Additional periods of attendance.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "start": {
                "description": "The start date of the additional attendance period if known.",
                "$ref": "#/definitions/FormattedDateTimeType"
              },
              "end": {
                "description": "The end date of the additional attendance period if known.",
                "$ref": "#/definitions/FormattedDateTimeType"
              }
            }
          }
        }
      }
    },
    "PersonProfileInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PersonProfileInclusion",
      "description": "Personal profile.",
      "type": "object",
      "properties": {
        "profileName": {
          "description": "The name given to the profile.",
          "type": "string"
        },
        "languageCode": {
          "description": "The primary language of the content of the profile.",
          "$ref": "#/definitions/LanguageCodeList"
        },
        "education": {
          "description": "The education history of the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EducationAttendanceType"
          }
        },
        "employment": {
          "description": "The employment history of the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployerHistoryType"
          }
        },
        "militaryService": {
          "description": "The military history of the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MilitaryServiceType"
          }
        },
        "licenses": {
          "description": "The licenses that the person holds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseType"
          }
        },
        "certifications": {
          "description": "The certifications that the person holds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationType"
          }
        },
        "patents": {
          "description": "The patents with which the person is involved.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PatentType"
          }
        },
        "publications": {
          "description": "The publications with which the person is involved.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicationType"
          }
        },
        "qualifications": {
          "description": "The competencies of the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonCompetencyType"
          }
        },
        "affiliations": {
          "description": "The organizations with which the person is affiliated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationAffiliationType"
          }
        },
        "securityCredentials": {
          "description": "The security credentials that the person holds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationType"
          }
        },
        "references": {
          "description": "The references of the person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RefereeType"
          }
        },
        "attachments": {
          "description": "Attachments or online references related to the person's profile.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        }
      }
    },
    "ResourceClassificationInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResourceClassificationInclusion",
      "description": "Holds customer specific properties of an entity.",
      "type": "object",
      "properties": {
        "managerName": {
          "type": "string"
        },
        "supervisorName": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/EntityType"
        },
        "location": {
          "$ref": "#/definitions/EntityType"
        },
        "costCenter": {
          "$ref": "#/definitions/EntityType"
        },
        "job": {
          "$ref": "#/definitions/EntityType"
        },
        "account": {
          "$ref": "#/definitions/EntityType"
        },
        "project": {
          "$ref": "#/definitions/EntityType"
        },
        "shift": {
          "$ref": "#/definitions/EntityType"
        },
        "externalOrderNumber": {
          "type": "string"
        },
        "externalReqNumber": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string"
        },
        "purchaseOrderNumber": {
          "type": "string"
        },
        "purchaseOrderLineItem": {
          "type": "string"
        },
        "costAllocation": {
          "$ref": "#/definitions/CostAllocationType"
        },
        "workAllocation": {
          "$ref": "#/definitions/WorkAllocationType"
        }
      }
    },
    "EmploymentPermitType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmploymentPermitType",
      "description": "A type that gives information on the permissions of a person to work.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CertificationType"
        }
      ],
      "properties": {
        "countryCode": {
          "$ref": "#/definitions/CountryCodeList"
        },
        "countrySubDivisions": {
          "description": "Qualifies the further divisions of the country. These may be districts, regions, states, provinces, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressComponentType"
          }
        }
      }
    },
    "ScheduleType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScheduleType",
      "description": "Periodic schedule of employee worktime.",
      "type": "object",
      "definitions": {
        "DayScheduleType": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EntityType"
            }
          ],
          "properties": {
            "weekday": {
              "$ref": "#/definitions/WeekdayCodeList"
            },
            "date": {
              "$ref": "#/definitions/TimeType"
            },
            "startTime": {
              "$ref": "#/definitions/TimeType"
            },
            "endTime": {
              "$ref": "#/definitions/TimeType"
            },
            "hours": {
              "$ref": "#/definitions/DurationType"
            },
            "shift": {
              "$ref": "#/definitions/EntityType"
            }
          },
          "minProperties": 1,
          "dependencies": {
            "startTime": [
              "endTime"
            ],
            "endTime": [
              "startTime"
            ],
            "weekday": {
              "not": {
                "required": [
                  "date"
                ]
              }
            },
            "date": {
              "not": {
                "required": [
                  "weekday"
                ]
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/EntityType"
        }
      ],
      "properties": {
        "period": {
          "$ref": "#/definitions/PeriodType"
        },
        "hours": {
          "$ref": "#/definitions/DurationType"
        },
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DayScheduleType"
          }
        }
      }
    },
    "WorkerType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "WorkerType",
      "description": "Worker is a Person Role and is defined as someone who performs labor for an organization. Worker is an abstraction for other more specific work-related roles, for example, Employee and Contractor. (ADP)",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "workerId": {
          "description": "Provides a unique identifier to a specific worker (an employer specific identifier).",
          "$ref": "#/definitions/IdentifierType"
        },
        "person": {
          "description": "Information about the person, e.g. name, birthdate, legal ids, marital status, etc.",
          "$ref": "#/definitions/PersonLegalType"
        },
        "establishmentIds": {
          "description": "Identifiers of the related establishments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "workAssignments": {
          "description": "The assignments for the worker. An assignment may override the position and/or job information.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkAssignmentType"
          }
        },
        "primaryWorkLocation": {
          "description": "The primary address where the work is performed.",
          "$ref": "#/definitions/AddressType"
        },
        "workerTypeCode": {
          "description": "The relationship of the worker to the organization. Options are Employee, Vendor Employee, Independent Contractor, Volunteer.",
          "$ref": "#/definitions/ResourceRelationshipCodeList"
        },
        "workRelationshipStatus": {
          "description": "The date and status of the worker in relation to the assignment.",
          "$ref": "#/definitions/WorkRelationshipStatusType"
        },
        "wageHourLawCoverageIndicator": {
          "description": "This determines if a person is covered by wage hour laws. In the US, a person would be considered non-exempt if the indicator is true (they are covered under the law).",
          "$ref": "#/definitions/IndicatorType"
        },
        "laborBargainingUnitIndicator": {
          "description": "Indicates if the person is part of a labor bargaining unit, such as a union.",
          "$ref": "#/definitions/IndicatorType"
        },
        "unemploymentCompensationCoverageIndicator": {
          "description": "An indicator of whether the employee is covered by some type of unemployment insurance.",
          "$ref": "#/definitions/IndicatorType"
        },
        "workerCompensationCoverageIndicator": {
          "description": "An indicator of whether the employee is covered by some type of worker compensation insurance.",
          "$ref": "#/definitions/IndicatorType"
        },
        "officerIndicator": {
          "description": "Indicates whether the worker is classified as an officer.",
          "$ref": "#/definitions/IndicatorType"
        },
        "stockOwnerIndicator": {
          "description": "Indicates whether the worker is a stock owner.",
          "$ref": "#/definitions/IndicatorType"
        },
        "stockOwnerPercentage": {
          "description": "The percentage of stock ownership.",
          "$ref": "#/definitions/PercentType"
        },
        "workerLifeCyle": {
          "description": "Contains a collection of information about a period of employment, including hire, leaves of absence, and termination.",
          "$ref": "#/definitions/WorkLifeCycleType"
        },
        "payCycleIntervalCode": {
          "description": "How often the pay cycle occurs or how often a person is paid, e.g., weekly, biweekly, etc.",
          "$ref": "#/definitions/PayCycleIntervalCodeList"
        }
      }
    },
    "PositionType_1": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionType",
      "description": "A type that defines a position type and related identifiers.",
      "definitions": {
        "PositionStatusCodeList": {
          "title": "PositionStatusCodeList",
          "description": "A value defining the status of the position.",
          "enum": [
            "Approved",
            "Active",
            "Filled",
            "Frozen",
            "Cancelled"
          ],
          "enumNames": [
            "Authorized to hire for the position",
            "Currently filling an open position",
            "The position is filled",
            "Vacant but not currently being filled",
            "Position is no longer valid"
          ]
        }
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "An identifier for a position.",
          "$ref": "#/definitions/IdentifierType"
        },
        "title": {
          "description": "The title of a position.",
          "type": "string"
        },
        "remunerationBasisCode": {
          "description": "A code classifying the primary method by which remuneration for a position is provided or calculated. Examples include Hourly, Salaried, Salaried plus Commission, Commission Only, Salaried plus Bonus, etc.",
          "$ref": "#/definitions/RemunerationBasisCodeList"
        },
        "positionScheduleType": {
          "description": "The type of position schedule. Values include FullTime, PartTime, SharedTime and FlexTime. ",
          "$ref": "#/definitions/PositionScheduleTypeCodeList"
        },
        "positionTypeCode": {
          "description": "Deprecated for the Employee Earnings specifications in 4.3 release. Use PositionTermType instead. Other domains will review in future releases. The code of the position type. Values include DirectHire, Temporary, Contract, Internship, Seasonal, etc.",
          "$ref": "#/definitions/PositionTypeCodeList"
        },
        "positionTermTypeCode": {
          "description": "The code of the term of the position. Values include Fixed, Permanent, Casual, Seasonal.",
          "$ref": "#/definitions/PositionTermTypeCodeList"
        },
        "permanentEligibleIndicator": {
          "description": "An arrangement where a worker is hired on a short-term contract on the condition that they may be hired for a permanent position.",
          "$ref": "#/definitions/IndicatorType"
        },
        "fillByContractorIndicator": {
          "description": "Indicates that this position should be filled by an independent or third party contractor.",
          "$ref": "#/definitions/IndicatorType"
        },
        "fillByStudentIndicator": {
          "description": "Indicates that this position should be filled by a student.",
          "$ref": "#/definitions/IndicatorType"
        },
        "fillByVolunteerIndicator": {
          "description": "Indicates that this position should be filled by a volunteer.",
          "$ref": "#/definitions/IndicatorType"
        },
        "positionStatusCode": {
          "description": "Defines the status of the position. Options may be Approved, Active,  Filled, Frozen, Cancelled.",
          "$ref": "#/definitions/PositionStatusCodeList"
        },
        "positionStatusDate": {
          "description": "The date of the status.",
          "$ref": "#/definitions/DateType"
        },
        "jobId": {
          "description": "Identifies the related job.",
          "$ref": "#/definitions/IdentifierType"
        },
        "careerLevelCode": {
          "description": "The code representing the career level.",
          "$ref": "#/definitions/CodeType"
        }
      }
    },
    "WorkRelationshipStatusType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkRelationshipStatusType",
      "description": "The status of the worker in relation to the assignment.",
      "definitions": {
        "WorkRelationshipStatusCodeList": {
          "title": "WorkRelationshipStatusCodeList",
          "enum": [
            "Pending",
            "Active",
            "Inactive",
            "Terminated"
          ]
        }
      },
      "type": "object",
      "properties": {
        "separatedIndicator": {
          "description": "Indicates the worker has been separated from the organization.",
          "$ref": "#/definitions/IndicatorType"
        },
        "declinedToProvideIndicator": {
          "description": "Indicates the employer has declined to provide a status.",
          "$ref": "#/definitions/IndicatorType"
        },
        "statusCode": {
          "description": "The status of the worker in relation to the assignment. Values are Pending, Active, Inactive, Terminated.",
          "$ref": "#/definitions/WorkRelationshipStatusCodeList"
        },
        "statusDate": {
          "description": "The date on which the worker's status changed.",
          "$ref": "#/definitions/DateType"
        },
        "description": {
          "description": "A description of the status.",
          "$ref": "#/definitions/TextType"
        },
        "reasonCode": {
          "description": "The employer's reason for the work relationship status. ",
          "$ref": "#/definitions/CodeType"
        }
      }
    },
    "WorkLifeCycleType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkLifeCycleType",
      "description": "Contains a collection of information about a period of employment, including hire, leaves of absence, and termination.",
      "type": "object",
      "definitions": {
        "ContractType": {
          "description": "Describes the relationship between the employer and worker.",
          "type": "object",
          "properties": {
            "contractNumber": {
              "description": "The identifier for the contract.",
              "$ref": "#/definitions/IdentifierType"
            },
            "contractStartDate": {
              "description": "The start date for the contract.",
              "$ref": "#/definitions/DateType"
            },
            "contractEndDate": {
              "description": "The end date for the contract.",
              "$ref": "#/definitions/DateType"
            },
            "addendum": {
              "description": "Date for each occurrence.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DateType"
              }
            },
            "workRelationshipType": {
              "description": "This property is deprecated starting with release 4.3. Use ResourceRelationshipCodeList instead.",
              "enum": [
                "volunteer",
                "employee",
                "contractor"
              ]
            }
          }
        },
        "HireType": {
          "description": "Provides hire date information.",
          "type": "object",
          "properties": {
            "typeCode": {
              "enum": [
                "NewHire",
                "Rehire",
                "Acquisition",
                "Transfer"
              ]
            },
            "date": {
              "description": "The first date the person is classed as a worker.",
              "$ref": "#/definitions/DateType"
            },
            "firstWorkDate": {
              "description": "The actual first date the person starts work.",
              "$ref": "#/definitions/DateType"
            },
            "expectedFirstWorkDate": {
              "description": "The first date is expected to start work.",
              "$ref": "#/definitions/DateType"
            },
            "originalDate": {
              "description": "Original date of hire.",
              "$ref": "#/definitions/DateType"
            },
            "adjustedDate": {
              "description": "Adjusted date of hire.",
              "$ref": "#/definitions/DateType"
            },
            "probationaryStartDate": {
              "description": "The first day of a worker's probationary status.",
              "$ref": "#/definitions/DateType"
            },
            "probationaryEndDate": {
              "description": "The last day of a worker's probationary status.",
              "$ref": "#/definitions/DateType"
            },
            "serviceStartDates": {
              "description": "Service start date(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DateType"
              }
            }
          }
        },
        "TerminationType": {
          "description": "Provides termination details.",
          "type": "object",
          "properties": {
            "reasonCode": {
              "description": "Retirement, Voluntary (subcategory), Involuntary (subcategory), Transfer, Business Sold. In EU - info must be sent to government but the codes are provided by the government. Will use IdentifierType. This allows us to define who owns the list and the list value.",
              "$ref": "#/definitions/IdentifierType"
            },
            "date": {
              "description": "Date the contract is complete or the worker is terminated.",
              "$ref": "#/definitions/DateType"
            },
            "lastWorkedDate": {
              "description": "May need for statutory purposes. For example, we will pay you through end of month but your last worked day was on the 15th. Access turned off, etc from an HR perspective.",
              "$ref": "#/definitions/DateType"
            },
            "lastPaidDate": {
              "description": "The date the worker was last paid. High level workers that have terminated but the salary may carry on for a few more months. Or Date the recurring payment is turned off.",
              "$ref": "#/definitions/DateType"
            },
            "intendedDate": {
              "description": "Last day the worker is intending to work.",
              "$ref": "#/definitions/DateType"
            }
          }
        },
        "LeaveType": {
          "type": "object",
          "properties": {
            "statusCode": {
              "enum": [
                "Active",
                "Inactive"
              ]
            },
            "remunerationCode": {
              "enum": [
                "Paid",
                "Unpaid"
              ]
            },
            "reasonCode": {
              "description": "The reason the person is on leave.",
              "$ref": "#/definitions/CodeType"
            },
            "startDate": {
              "description": "The starting date for leave.",
              "$ref": "#/definitions/DateType"
            },
            "lastWorkedDate": {
              "description": "The last day on which a worker worked for pay.",
              "$ref": "#/definitions/DateType"
            },
            "lastPaidDate": {
              "description": "The date the person was last paid before going on leave.",
              "$ref": "#/definitions/DateType"
            },
            "scheduledWorkReturnDate": {
              "description": "The date the person is scheduled to return to work.",
              "$ref": "#/definitions/DateType"
            },
            "workReturnDate": {
              "description": "The date the person returned to work.",
              "$ref": "#/definitions/DateType"
            },
            "incurServicesOnLeaveIndicator": {
              "description": "Determination if the person can continue to use their benefits for new expenses incurred while they are on leave.",
              "$ref": "#/definitions/IndicatorType"
            }
          }
        },
        "RecruitingAndStaffingType": {
          "description": "Provides recruiting and staffing key date information.",
          "type": "object",
          "properties": {
            "applicationDate": {
              "description": "The date of the application submission by the candidate.",
              "$ref": "#/definitions/DateType"
            },
            "interviewDates": {
              "description": "The date(s) of interview(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DateType"
              }
            },
            "rejectionDate": {
              "description": "The date of the application was rejected or withdrawn.",
              "$ref": "#/definitions/DateType"
            },
            "rejectionReasonCode": {
              "description": "The reason for the application rejection or withdrawal.",
              "$ref": "#/definitions/CodeType"
            },
            "offeredOnDate": {
              "description": "The date that the initial offer was made.",
              "$ref": "#/definitions/DateType"
            },
            "offerAcceptedDate": {
              "description": "The date that the final offer was accepted.",
              "$ref": "#/definitions/DateType"
            }
          }
        }
      },
      "properties": {
        "contract": {
          "$ref": "#/definitions/ContractType"
        },
        "hire": {
          "$ref": "#/definitions/HireType"
        },
        "termination": {
          "$ref": "#/definitions/TerminationType"
        },
        "leaveOfAbsence": {
          "$ref": "#/definitions/LeaveType"
        },
        "recruitingAndStaffing": {
          "$ref": "#/definitions/RecruitingAndStaffingType"
        }
      }
    },
    "JobType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "JobType",
      "description": "A job serves as a template for more specifically defined positions and assignments in a company, in part, to provide equitable opportunity for similar work done across disparate business units inside and outside the organization",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the job.",
          "$ref": "#/definitions/IdentifierType"
        },
        "title": {
          "description": "The title of a job.",
          "type": "string"
        },
        "categoryCode": {
          "description": "A code classifying the job category code. Examples include Officials And Managers, Professionals, Technicians, Sales, Official And Clerical, Craft Worker Skilled, Operative Semi-Skilled, Laborers Unskilled, Service Workers, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "jobFunction": {
          "description": "A code classifying the job function e.g., HR, Finance, Marketing, Sales, Product Development, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "planCode": {
          "description": "Identifies a specific salary structure or program used either throughout, or in specific segments of, an enterprise.",
          "$ref": "#/definitions/CodeType"
        },
        "gradeCode": {
          "description": "Defines the salary range or band that a job falls within, based on the formal structure. Formal pay structures are less common today than in the past, but remain common in certain sectors, such as in public-sector employment and in employment covered by collective bargaining agreements.",
          "$ref": "#/definitions/CodeType"
        },
        "stepCode": {
          "description": "Pinpoints a job's specific level or point within a salary range or band.",
          "$ref": "#/definitions/CodeType"
        },
        "managerIndicator": {
          "description": "Specifies if the job is at the management level.",
          "$ref": "#/definitions/IndicatorType"
        },
        "managerLevel": {
          "description": "If this is a manager level job, this describes the type of management level, ie. Supervisor, First Line, Senior Officer, CEO, etc.",
          "type": "string"
        },
        "wageHourLawCoverageIndicator": {
          "description": "This determines if a person is covered by wage hour laws. In the US, a person would be considered non-exempt if the indicator is true (they are covered under the law).",
          "$ref": "#/definitions/IndicatorType"
        },
        "standardHours": {
          "description": "The typical hours required for this job. For example, 40 hour per week or 2080 hours per year.",
          "$ref": "#/definitions/QuantityType"
        },
        "occupationId": {
          "description": "Classifies workers into occupational categories for the purpose of collecting, calculating, or disseminating data.",
          "$ref": "#/definitions/IdentifierType"
        },
        "jobResponsibilities": {
          "description": "Describes the tasks and responsibilities of a job.",
          "type": "string"
        },
        "requiredEducationAndExperience": {
          "description": "Describes the required education and experience of a job.",
          "type": "string"
        },
        "requiredCompetencyIds": {
          "description": "Identifiers for the essential knowledge, skills, and abilities required to perform the job at the organization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "description": {
          "description": "The description of a job.",
          "type": "string"
        }
      }
    },
    "AssignmentLifeCycleType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssignmentLifeCycleType",
      "description": "Contains a collection dates related to the assignment.",
      "type": "object",
      "properties": {
        "startDate": {
          "description": "The first date the person is classed as a worker.",
          "$ref": "#/definitions/DateType"
        },
        "expectedStartDate": {
          "description": "The date the worker is expected to start working.",
          "$ref": "#/definitions/DateType"
        },
        "endDate": {
          "description": "The date the contract is complete or the worker is terminated.",
          "$ref": "#/definitions/DateType"
        },
        "probationaryStartDate": {
          "description": "The first day of a worker's probationary status.",
          "$ref": "#/definitions/DateType"
        },
        "probationaryEndDate": {
          "description": "The last day of a worker's probationary status.",
          "$ref": "#/definitions/DateType"
        }
      }
    },
    "DeploymentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DeploymentType",
      "description": "Contains a collection of information about the work of a human resource within an employment or work context. Deployment details include information about a resource's job, position, work schedule, assignment entry reason, as well as information identifying the organization and/or organizational sub-units associated with the deployment.",
      "definitions": {
        "WorkerAssignmentSourceType": {
          "description": "Defines the source of the worker and related assignment. For example, the source might be expatriate with the home country in Germany but the person is working in Belgium.",
          "type": "object",
          "properties": {
            "sourceCode": {
              "description": "Describes the worker relationship to their native country; e.g. Domestic, Inpatriate, Expatriate, Local National, Third Country National",
              "$ref": "#/definitions/WorkerAssignmentSourceCodeList"
            },
            "homeCountry": {
              "description": "The native country of the person.",
              "$ref": "#/definitions/CountryCodeList"
            },
            "hostCountry": {
              "description": "The country where the person is working.",
              "$ref": "#/definitions/CountryCodeList"
            }
          }
        },
        "SpecialClassificationType": {
          "description": "A special classification of the Employee e.g. a VIP, Owner, Highly Compensated, Stock Owner, Executive, Officer, etc.",
          "type": "object",
          "properties": {
            "code": {
              "description": "A code indicating the special classification.",
              "$ref": "#/definitions/CodeType"
            },
            "indicator": {
              "description": "An indicator of the special classification.",
              "$ref": "#/definitions/IndicatorType"
            },
            "percentage": {
              "description": "The percentage of a person's allocation that is considered the special classification.",
              "$ref": "#/definitions/PercentType"
            }
          }
        },
        "EmployeeReportingCodeType": {
          "description": "Employee Reporting Code Type Information.",
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of Reporting Code Example, Division, Location, Class",
              "type": "string"
            },
            "value": {
              "description": "Reporting Code",
              "type": "string"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "deploymentId": {
          "description": "Provides a unique identifier to a specific deployment. This may be used when a person has multiple deployments within an organization. For example, a coach and math teacher at a school.",
          "$ref": "#/definitions/IdentifierType"
        },
        "workerAssignmentSource": {
          "description": "Defines the source of the worker and related assignment.",
          "$ref": "#/definitions/WorkerAssignmentSourceType"
        },
        "workLocation": {
          "description": "The location of the workers assignment.",
          "$ref": "#/definitions/WorkLocationType"
        },
        "communication": {
          "description": "Contact information, such as phone, address, etc. for the organization.",
          "$ref": "#/definitions/CommunicationType"
        },
        "resourceRelationshipCode": {
          "description": "Describes the relationship between the employer and worker, e.g. Employee, Vendor Employee.",
          "$ref": "#/definitions/ResourceRelationshipCodeList"
        },
        "organizationIds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "job": {
          "description": "Represents the specific job (position) at an organization and related identifiers and classifications.",
          "$ref": "#/definitions/JobType"
        },
        "position": {
          "description": "Defines a position and related identifiers.",
          "$ref": "#/definitions/PositionType_1"
        },
        "scheduledHours": {
          "description": "Do Not Use. This property will be removed in the next major release. Please use ScheduleHours property instead.",
          "$ref": "#/definitions/RateType"
        },
        "scheduleHours": {
          "description": "The hours a person is scheduled to work.",
          "$ref": "#/definitions/QuantityType"
        },
        "workSchedule": {
          "description": "The schedule a person is planned to work.",
          "$ref": "#/definitions/ScheduleType"
        },
        "assignmentReasonCode": {
          "description": "The reason a person is assigned to the position, e.g. Hire, Transfer, Promotion, etc.",
          "$ref": "#/definitions/AssignmentReasonCodeList"
        },
        "fullTimeEquivalentRatio": {
          "description": "The number of total hours worked divided by the maximum number of compensable hours in a full-time schedule as defined by law.",
          "$ref": "#/definitions/RatioType"
        },
        "effectivePeriod": {
          "description": "The period the deployment is effective.",
          "$ref": "#/definitions/EffectiveTimePeriodType"
        },
        "employeeReportingCode": {
          "description": "Deprecated. Do Not Use. Use the employeeReportingCodes array instead.",
          "$ref": "#/definitions/CodeType"
        },
        "employeeReportingCodes": {
          "description": "Allows further classification of the employee using employer or program-specific codes and controlled vocabularies. This information may be collected to use for return reporting back to the employer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeReportingCodeType"
          }
        },
        "securityTag": {
          "$ref": "#/definitions/IdentifierType"
        },
        "specialClassifications": {
          "description": "A special classification of the Employee.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpecialClassificationType"
          }
        },
        "specialProvisions": {
          "description": "Any special provisions for the Employee.",
          "type": "string"
        },
        "wageHourLawCoverageCountryCode": {
          "description": "The country the wage hour laws pertain to.",
          "$ref": "#/definitions/CountryCodeList"
        },
        "wageHourLawCoverageIndicator": {
          "description": "This determines if a person is covered by wage hour laws. In the US, a person would be considered non-exempt if the indicator is true (they are covered under the law).",
          "$ref": "#/definitions/IndicatorType"
        },
        "laborBargainingUnitIndicator": {
          "description": "Indicates if the person is part of a labor bargaining unit, such as a union.",
          "$ref": "#/definitions/IndicatorType"
        },
        "laborBargainingUnitCode": {
          "description": "Code of the labor bargaining unit; e.g. Unison.",
          "$ref": "#/definitions/CodeType"
        },
        "laborBargainingUnitMemberId": {
          "description": "The person's id within the labor bargaining unit.",
          "$ref": "#/definitions/IdentifierType"
        },
        "newHireProbationaryIndicator": {
          "description": "Indicates if the person is a new hire.",
          "$ref": "#/definitions/IndicatorType"
        },
        "newHireProbationaryDuration": {
          "description": "The length of the probation for the new hire; e.g. Hire is on probation for three months from start date.",
          "$ref": "#/definitions/DurationType"
        },
        "organization": {
          "description": "The organization the person is working for.",
          "$ref": "#/definitions/OrganizationType"
        },
        "license": {
          "description": "Deprecated. Do Not Use. Use the licenses array instead.",
          "$ref": "#/definitions/LicenseType"
        },
        "licenses": {
          "description": "Any licenses the person carries for the related position.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseType"
          }
        },
        "certification": {
          "description": "Deprecated. Do Not Use. Use the certifications array instead.",
          "$ref": "#/definitions/CertificationType"
        },
        "certifications": {
          "description": "Any certifications the person carries for the related position.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificationType"
          }
        },
        "statusCode": {
          "enum": [
            "Active",
            "Inactive"
          ]
        },
        "statusEffectiveDate": {
          "description": "The status effective date of this deployment.",
          "$ref": "#/definitions/DateType"
        },
        "intervalCode": {
          "description": "The frequency at which an earning is 'earned'. E.g. how often the worker is paid the associated earning.",
          "$ref": "#/definitions/PayRateIntervalCodeList"
        }
      }
    },
    "DisabilityType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DisabilityType",
      "description": "Describes a disability associated with a specified person. Want of ability to discharge a function. Incapacity in the eye of the law.",
      "definitions": {
        "DisabilityLevelCodeList": {
          "title": "DisabilityLevelCodeList",
          "description": "A value classifying the level of disability.",
          "enum": [
            "1",
            "2",
            "3",
            "4",
            "5"
          ],
          "enumNames": [
            "need for another person's assistance with daily life tasks",
            "inability to perform one or more sensory or physical functions",
            "experiencing difficulties in multiple sensory or physical functions",
            "experiencing difficulty in just one function",
            "no limitations in functioning"
          ]
        },
        "DisabilitySummaryType": {
          "title": "DisabilitySummaryType",
          "description": "Describes a disability associated with a specified person. Want of ability to discharge a function. Incapacity in the eye of the law.",
          "type": "object",
          "properties": {
            "disabilityId": {
              "description": "An identifier of the persons disability recognition, e.g. the number of the persons 'severely handicapped pass'.",
              "$ref": "#/definitions/IdentifierType"
            },
            "disabilityLevelCode": {
              "description": "A value classifying the level of disability.",
              "$ref": "#/definitions/DisabilityLevelCodeList"
            },
            "percentage": {
              "description": "The amount of disability as a percentage of impairment. This should be defined by a medical board based on standards.",
              "$ref": "#/definitions/PercentType"
            },
            "disabilityType": {
              "description": "A value from an external code list classifying the type of disability. Examples: 1. DisabilityConditionType as defined by PESC.org; 2. U.S. Office of Special Education Programs (OSEP) Primary and Secondary Disability Codes; 3. 'Total', 'Partial', and 'Residual' as broad classifications of disability in certain contexts (Acord.org).",
              "$ref": "#/definitions/EntityType"
            },
            "disabilityDate": {
              "description": "The date on which an injury occurred or which is otherwise associated as the start of a period of disability.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "disabilityCertifiedDate": {
              "description": "The date on which a person's disabled status is verified by a doctor or medical professional.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "recoveryDate": {
              "description": "The date on which a person is determined to have recovered from an injury or disability.",
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "accommodationTypeCode": {
              "description": "A code identifying a type of assistance or technology required to accommodate a disability. This is a value from an external code list.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "comment": {
              "description": "Additional comments on the disability.",
              "$ref": "#/definitions/CommentType"
            },
            "effectiveDate": {
              "description": "Effective date of the defined disability.",
              "$ref": "#/definitions/EffectiveTimePeriodType"
            },
            "attachments": {
              "description": "Attachments supporting the disability summary.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttachmentType"
              }
            },
            "attachmentReferences": {
              "description": "Attachment references supporting the disability summary.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AttachmentReferenceType"
              }
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "indicator": {
          "description": "An indicator of a disability associated with a specified person.",
          "$ref": "#/definitions/IndicatorType"
        },
        "summary": {
          "description": "A summary of a disability associated with a specified person.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisabilitySummaryType"
          }
        }
      }
    },
    "EmployeeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmployeeType",
      "description": "This entire schema has been deprecated. The data has been added to Common/Deployment.  The information about a person and their relationship as an employee.",
      "definitions": {
        "SpecialClassificationTypeArray": {
          "description": "A special classification of the Employee e.g. a VIP, Owner, Highly Compensated, Stock Owner, Executive, Officer, etc.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "code": {
                "description": "A code indicating the special classification.",
                "$ref": "#/definitions/CodeType"
              },
              "indicator": {
                "description": "An indicator of the special classification.",
                "$ref": "#/definitions/IndicatorType"
              },
              "percentage": {
                "description": "The percentage of a person's allocation that is considered the special classification.",
                "$ref": "#/definitions/PercentType"
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PersonBaseType"
        }
      ],
      "type": "object",
      "properties": {
        "securityTag": {
          "$ref": "#/definitions/IdentifierType"
        },
        "positionTypeCode": {
          "description": "Deprecated. Do Not Use. Use the PositionTypeCode in PositionType or Deployment/PositionType instead.",
          "$ref": "#/definitions/PositionTypeCodeList"
        },
        "laborBargainingUnitMemberIndicator": {
          "description": "Deprecated. Do Not Use. Use the LaborBargainingUnitIndicator in DeploymentType instead.",
          "$ref": "#/definitions/IndicatorType"
        },
        "specialClassifications": {
          "$ref": "#/definitions/SpecialClassificationTypeArray"
        },
        "specialProvisions": {
          "type": "string"
        },
        "reportingCode": {
          "description": "Deprecated. Do Not Use. Use the EmployeeReportingCode in DeploymentType instead.",
          "type": "string"
        }
      }
    },
    "WorkAssignmentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "WorkAssignmentType",
      "description": "WorkAssignment may associate a Job and/or Position with a Worker.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the assignment.",
          "$ref": "#/definitions/IdentifierType"
        },
        "description": {
          "description": "Describes the assignment.",
          "$ref": "#/definitions/TextType"
        },
        "assignmentTermTypeCode": {
          "description": "The code of the assignment term. Values include Fixed, Permanent, Casual, Seasonal.",
          "$ref": "#/definitions/PositionTermTypeCodeList"
        },
        "assignmentLifeCyle": {
          "description": "Contains a collection of dates related to the assignment.",
          "$ref": "#/definitions/AssignmentLifeCycleType"
        },
        "assignmentLocation": {
          "description": "The location of the assignment.",
          "$ref": "#/definitions/AddressType"
        },
        "jobId": {
          "description": "Indentifier of the specific job at an organization.",
          "$ref": "#/definitions/IdentifierType"
        },
        "positionId": {
          "description": "Indentifier of the specific position at an organization.",
          "$ref": "#/definitions/IdentifierType"
        },
        "payCycleCode": {
          "description": "Describes how often the payee is paid. Pay Frequency - The period of time covered by the employee's regular pay checks. (EER WG, HR-Open Data Element Requirements) (xmi_attribute)",
          "$ref": "#/definitions/PayCycleIntervalCodeList"
        }
      }
    },
    "StaffingReferenceIdsType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "StaffingReferenceIdsType",
      "description": "A collection of identifiers related to a staffing assignment of a resource.",
      "type": "object",
      "properties": {
        "assignmentId": {
          "description": "An identifier for a particular engagement or assignment of a staffing resource.",
          "$ref": "#/definitions/IdentifierType"
        },
        "orderId": {
          "description": "Uniquely distinguishes the order.",
          "$ref": "#/definitions/IdentifierType"
        },
        "requestForQuotationId": {
          "description": "Used to specify a reference to a StaffingRFQ document.",
          "$ref": "#/definitions/IdentifierType"
        },
        "resourceId": {
          "$ref": "#/definitions/IdentifierType"
        },
        "quoteId": {
          "description": "Used to specify a reference to a StaffingQuote document.",
          "$ref": "#/definitions/IdentifierType"
        },
        "actionId": {
          "description": "Used to specify a reference to a StaffingAction document.",
          "$ref": "#/definitions/IdentifierType"
        },
        "masterOrderId": {
          "description": "Reference to a master order or project. Used to associate multiple orders.",
          "$ref": "#/definitions/IdentifierType"
        }
      }
    },
    "ScoreTextType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScoreTextType",
      "description": "A non-numeric or textual representation of a Score.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "scoreTextCode": {
          "description": "Default: CourseGrade. A code used to textually classify the type scoring methodology or convention.",
          "type": "string"
        },
        "minimum": {
          "description": "Optional. Describes the minimum score.",
          "type": "string"
        },
        "maximum": {
          "description": "Optional. Describes the maximum score.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "BaseScoreType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BaseScoreType",
      "description": "Type object to contain either numeric or text scores.",
      "type": "object",
      "properties": {
        "scoresNumeric": {
          "description": "Numeric scores for a test.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScoreNumericType"
          }
        },
        "scoresText": {
          "description": "Text scores for a test.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScoreTextType"
          }
        }
      }
    },
    "ScoreNumericType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScoreNumericType",
      "description": "A numeric measurement of abilities or capacity to learn.",
      "type": "object",
      "properties": {
        "value": {
          "type": "number"
        },
        "scoreCode": {
          "$ref": "#/definitions/ScoreNumericCodeList"
        },
        "interval": {
          "description": "The stop points between minimum and maximum.",
          "type": "number"
        },
        "minimum": {
          "description": "Optional. Indicates lower value for a range.",
          "type": "number"
        },
        "maximum": {
          "description": "Optional. Indicates upper value for a range.",
          "type": "number"
        }
      },
      "required": [
        "value"
      ]
    },
    "ScoreType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScoreType",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseScoreType"
        },
        {
          "$ref": "#/definitions/EffectiveTimePeriodType"
        }
      ]
    },
    "LocationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LocationType",
      "description": "Identified address type.",
      "allOf": [
        {
          "$ref": "#/definitions/AddressType"
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/IdentifierType"
        }
      }
    },
    "AddressTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AddressTypeArray",
      "description": "Array of address information details.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/AddressType"
          },
          {
            "$ref": "#/definitions/CommunicationItemInclusion"
          }
        ]
      }
    },
    "SocialType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SocialType",
      "description": "The entity's unique social network URL which is a place where the person can be reached.",
      "type": "object",
      "properties": {
        "handle": {
          "description": "The handle or identifier of the entity on the social network.",
          "type": "string"
        },
        "url": {
          "description": "The fully qualified web address of the entity on the social network",
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "url"
      ]
    },
    "EmailType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmailType",
      "type": "object",
      "properties": {
        "address": {
          "description": "Actual email address",
          "type": "string",
          "format": "email"
        }
      },
      "required": [
        "address"
      ]
    },
    "AddressComponentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AddressComponentType",
      "description": "Holds address extension components.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Specify purpose of this extension (province, secondary line, house number, etc).",
          "type": "string"
        },
        "value": {
          "description": "Actual component value.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ]
    },
    "SocialTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "SocialTypeArray",
      "description": "Array of social network information details.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/SocialType"
          },
          {
            "$ref": "#/definitions/CommunicationItemInclusion"
          }
        ]
      }
    },
    "PhoneTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PhoneTypeArray",
      "description": "Array of phone information details.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/PhoneType"
          },
          {
            "$ref": "#/definitions/CommunicationItemInclusion"
          }
        ]
      }
    },
    "PhoneType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PhoneType",
      "type": "object",
      "properties": {
        "countryDialingCode": {
          "description": "The country dialing code for a communication number.",
          "$ref": "#/definitions/CodeType"
        },
        "areaDialingCode": {
          "description": "The area dialing code for a communication number.",
          "$ref": "#/definitions/CodeType"
        },
        "dialNumber": {
          "description": "The communication number, not including country dialing or area dialing codes.",
          "type": "string"
        },
        "phoneExtension": {
          "description": "The extension of the associated communication number.",
          "type": "string"
        },
        "access": {
          "description": "The text that permits access to the electronic network of the associated communication number such as telephone network, for example 9, *70.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "Specifies details of an actual formatted number.",
          "type": "string"
        }
      },
      "required": [
        "formattedNumber"
      ]
    },
    "CommunicationItemInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CommunicationItemInclusion",
      "description": "Common properties for communication items.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Provide description for particular communication item.",
          "type": "string"
        },
        "useCode": {
          "description": "Code identifying the usage of the contact point e.g. business, private, etc.",
          "$ref": "#/definitions/CodeType"
        },
        "preference": {
          "description": "Provide priority for given communication item.",
          "type": "integer"
        },
        "availablePeriod": {
          "$ref": "#/definitions/DateTimePeriodType"
        }
      }
    },
    "JurisdictionType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "JurisdictionType",
      "description": "Defines a geographical area and associated legal or cultural context.",
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "Two letter ISO Country code.",
          "$ref": "#/definitions/CountryCodeList"
        },
        "city": {
          "description": "City for the jurisdiction.",
          "type": "string"
        },
        "countrySubDivisions": {
          "description": "Subdivision for the jurisdiction, e.g. Province, State, County, Parish.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressComponentType"
          }
        }
      }
    },
    "CommunicationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CommunicationType",
      "description": "Allows capture of information about a variety of communication channels (telephone, email, fax, messaging, address, etc.).",
      "type": "object",
      "properties": {
        "address": {
          "description": "An array of the address, which is the physical or mailing address of the entity.",
          "$ref": "#/definitions/AddressTypeArray"
        },
        "phone": {
          "description": "An array of the phone numbers of the entity.",
          "$ref": "#/definitions/PhoneTypeArray"
        },
        "email": {
          "description": "An array of the email addresses of the entity.",
          "$ref": "#/definitions/EmailTypeArray"
        },
        "web": {
          "description": "An array of the web sites or web addresses of the entity.",
          "$ref": "#/definitions/WebTypeArray"
        },
        "social": {
          "description": "An array of the social media handles or identifiers of the entity.",
          "$ref": "#/definitions/SocialTypeArray"
        }
      },
      "minProperties": 1
    },
    "EmailTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EmailTypeArray",
      "description": "Array of email information details.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/EmailType"
          },
          {
            "$ref": "#/definitions/CommunicationItemInclusion"
          }
        ]
      }
    },
    "WebTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WebTypeArray",
      "description": "Array of web information details.",
      "type": "array",
      "items": {
        "allOf": [
          {
            "$ref": "#/definitions/WebType"
          },
          {
            "$ref": "#/definitions/CommunicationItemInclusion"
          }
        ]
      }
    },
    "AddressType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AddressType",
      "description": "The physical or mailing address of the entity. This may include the street and building number, city, region (state, province, etc), country and postal code.",
      "type": "object",
      "properties": {
        "line": {
          "description": "Street line address",
          "type": "string"
        },
        "extendedLines": {
          "description": "Extended address components (e.g. apartment or suite number).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressComponentType"
          }
        },
        "countryCode": {
          "$ref": "#/definitions/CountryCodeList"
        },
        "countrySubDivisions": {
          "description": "Qualifies the further divisions of the Country. These may be Districts, Regions, States, Provinces etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressComponentType"
          }
        },
        "city": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postOfficeBox": {
          "type": "string"
        },
        "geoLocation": {
          "$ref": "#/definitions/GeoType"
        },
        "formattedAddress": {
          "type": "string"
        }
      },
      "minProperties": 1
    },
    "WebType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WebType",
      "type": "object",
      "properties": {
        "url": {
          "description": "Actual web address.",
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "url"
      ]
    },
    "WorkLocationCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkLocationCodeList",
      "description": "A set of codes classifying the work location.",
      "enum": [
        "DistributionCenter",
        "HotelProperty",
        "Headquarters",
        "Plant",
        "RetailStore",
        "OffshoreOilRig",
        "Warehouse",
        "SharedServiceCenter",
        "CenterOfExcellence"
      ],
      "enumNames": [
        "Distribution Center",
        "Hotel Property",
        "Headquarters",
        "Plant",
        "Retail Store",
        "Offshore Oil Rig",
        "Warehouse",
        "Shared Service Center",
        "Center Of Excellence"
      ]
    },
    "PositionTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionTypeCodeList",
      "description": "Deprecated for the Employee Earnings specifications in 4.3 release. Use PositionTermType, or appropriate indicators in PositionType. Other domains will review in future releases. These are values that are descriptive in classifying a position or a position opportunity or \"offering\". They are not precise classes useful internally to drive pay, benefits, or HR compliance. Enumerated values are: DirectHire, Temporary, TemporaryToHire, ContractToHire, Contract, Internship, Externship, Apprenticeship, Seasonal, Student, and Volunteer. Consider that \"Temporary\" and \"DirectHire\" are not parallel concepts, but are still commonly used in classifying jobs within advertising.",
      "enum": [
        "DirectHire",
        "Temporary",
        "TemporaryToHire",
        "ContractToHire",
        "Contract",
        "Internship",
        "Externship",
        "Apprenticeship",
        "Seasonal",
        "Student",
        "Volunteer"
      ],
      "enumNames": [
        "Direct Hire",
        "Temporary",
        "Temporary To Hire",
        "Contract To Hire",
        "Contract",
        "Internship",
        "Externship",
        "Apprenticeship",
        "Seasonal",
        "Student",
        "Volunteer"
      ]
    },
    "ActionCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ActionCodeList",
      "description": "Action values code list.",
      "enum": [
        "Create",
        "Update",
        "Delete",
        "Replace",
        "Merge"
      ]
    },
    "GenderCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GenderCodeList",
      "description": "Gender code list.",
      "enum": [
        "Male",
        "Female",
        "X"
      ],
      "enumNames": [
        "The gender is male.",
        "The gender is female.",
        "The person does not identify explicity with male or female."
      ]
    },
    "AffiliatedOrganizationTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AffiliatedOrganizationTypeCodeList",
      "description": "Values used to describe the type of association or affiliated organization.",
      "enum": [
        "Professional",
        "Social",
        "Community",
        "Non-profit",
        "Religious",
        "Political"
      ],
      "enumNames": [
        "Professional",
        "Social",
        "Community",
        "Non-profit",
        "Religious",
        "Political"
      ]
    },
    "EducationDegreeGrantedStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EducationDegreeGrantedStatusCodeList",
      "description": "Values that classify the education degree granted status.",
      "enum": [
        "Granted",
        "InProgress",
        "Postponed",
        "NotGranted"
      ],
      "enumNames": [
        "Granted",
        "In Progress",
        "Postponed",
        "Not Granted"
      ]
    },
    "ObjectiveActionCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ObjectiveActionCodeList",
      "description": "A code classifying an action to be taken with respect to achieving an objective. This may be used in the definition or specification of an objective or objective plan.",
      "enum": [
        "Increase",
        "Decrease",
        "MaintainAt",
        "MaintainAbove",
        "Reach",
        "MaintainBelow"
      ],
      "enumNames": [
        "Increase",
        "Decrease",
        "Maintain At",
        "Maintain Above",
        "Reach",
        "Maintain Below"
      ]
    },
    "TimeOffTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.x",
      "title": "TimeOffTypeCodeList",
      "description": "Specifies type of absence from work. Includes compensatory time off (CTO) when used.",
      "enum": [
        "Administrative",
        "Bereavement",
        "Compensatory",
        "Consolidated",
        "Education",
        "Family",
        "PublicHoliday",
        "FloatingHoliday",
        "InLieuOfNotice",
        "JuryDuty",
        "MilitaryDuty",
        "Sick",
        "Vacation",
        "OtherPersonal"
      ]
    },
    "CountryCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CountryCodeList",
      "description": "Two letter country codes as defined by ISO 3166-1:2013. Content referenced from Wikipedia.",
      "enum": [
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CW",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HM",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NF",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PW",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "UM",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW"
      ],
      "enumNames": [
        "ANDORRA",
        "UNITED ARAB EMIRATES",
        "AFGHANISTAN",
        "ANTIGUA AND BARBUDA",
        "ANGUILLA",
        "ALBANIA",
        "ARMENIA",
        "ANGOLA",
        "ANTARCTICA",
        "ARGENTINA",
        "AMERICAN SAMOA",
        "AUSTRIA",
        "AUSTRALIA",
        "ARUBA",
        "ÅLAND ISLANDS",
        "AZERBAIJAN",
        "BOSNIA AND HERZEGOVINA",
        "BARBADOS",
        "BANGLADESH",
        "BELGIUM",
        "BURKINA FASO",
        "BULGARIA",
        "BAHRAIN",
        "BURUNDI",
        "BENIN",
        "SAINT BARTHELEMY",
        "BERMUDA",
        "BRUNEI DARUSSALAM",
        "BOLIVIA",
        "BRAZIL",
        "BAHAMAS",
        "BHUTAN",
        "BOUVET ISLAND",
        "BOTSWANA",
        "BELARUS",
        "BELIZE",
        "CANADA",
        "COCOS (KEELING) ISLANDS",
        "CONGO, THE DEMOCRATIC REPUBLIC OF THE",
        "CENTRAL AFRICAN REPUBLIC",
        "CONGO",
        "SWITZERLAND",
        "COTE D'IVOIRE",
        "COOK ISLANDS",
        "CHILE",
        "CAMEROON",
        "CHINA",
        "COLOMBIA",
        "COSTA RICA",
        "CUBA",
        "CAPE VERDE",
        "CURACAO",
        "CHRISTMAS ISLAND",
        "CYPRUS",
        "CZECH REPUBLIC",
        "GERMANY",
        "DJIBOUTI",
        "DENMARK",
        "DOMINICA",
        "DOMINICAN REPUBLIC",
        "ALGERIA",
        "ECUADOR",
        "ESTONIA",
        "EGYPT",
        "WESTERN SAHARA",
        "ERITREA",
        "SPAIN",
        "ETHIOPIA",
        "FINLAND",
        "FIJI",
        "FALKLAND ISLANDS (MALVINAS)",
        "MICRONESIA, FEDERATED STATES OF",
        "FAROE ISLANDS",
        "FRANCE",
        "GABON",
        "UNITED KINGDOM",
        "GRENADA",
        "GEORGIA",
        "FRENCH GUIANA",
        "GUERNSEY",
        "GHANA",
        "GIBRALTAR",
        "GREENLAND",
        "GAMBIA",
        "GUINEA",
        "GUADELOUPE",
        "EQUATORIAL GUINEA",
        "GREECE",
        "SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",
        "GUATEMALA",
        "GUAM",
        "GUINEA-BISSAU",
        "GUYANA",
        "HONG KONG",
        "HEARD ISLAND AND MCDONALD ISLANDS",
        "HONDURAS",
        "CROATIA",
        "HAITI",
        "HUNGARY",
        "INDONESIA",
        "IRELAND",
        "ISRAEL",
        "ISLE OF MAN",
        "INDIA",
        "BRITISH INDIAN OCEAN TERRITORY",
        "IRAQ",
        "IRAN, ISLAMIC REPUBLIC OF",
        "ICELAND",
        "ITALY",
        "JERSEY",
        "JAMAICA",
        "JORDAN",
        "JAPAN",
        "KENYA",
        "KYRGYZSTAN",
        "CAMBODIA",
        "KIRIBATI",
        "COMOROS",
        "SAINT KITTS AND NEVIS",
        "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF",
        "KOREA, REPUBLIC OF",
        "KUWAIT",
        "CAYMAN ISLANDS",
        "KAZAKHSTAN",
        "LAO PEOPLE'S DEMOCRATIC REPUBLIC",
        "LEBANON",
        "SAINT LUCIA",
        "LIECHTENSTEIN",
        "SRI LANKA",
        "LIBERIA",
        "LESOTHO",
        "LITHUANIA",
        "LUXEMBOURG",
        "LATVIA",
        "LIBYAN ARAB JAMAHIRIYA",
        "MOROCCO",
        "MONACO",
        "MOLDOVA, REPUBLIC OF",
        "MONTENEGRO",
        "SAINT MARTIN (FRENCH PART)",
        "MADAGASCAR",
        "MARSHALL ISLANDS",
        "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF",
        "MALI",
        "MYANMAR",
        "MONGOLIA",
        "MACAO",
        "NORTHERN MARIANA ISLANDS",
        "MARTINIQUE",
        "MAURITANIA",
        "MONTSERRAT",
        "MALTA",
        "MAURITIUS",
        "MALDIVES",
        "MALAWI",
        "MEXICO",
        "MALAYSIA",
        "MOZAMBIQUE",
        "NAMIBIA",
        "NEW CALEDONIA",
        "NIGER",
        "NORFOLK ISLAND",
        "NIGERIA",
        "NICARAGUA",
        "NETHERLANDS",
        "NORWAY",
        "NEPAL",
        "NAURU",
        "NIUE",
        "NEW ZEALAND",
        "OMAN",
        "PANAMA",
        "PERU",
        "FRENCH POLYNESIA",
        "PAPUA NEW GUINEA",
        "PHILIPPINES",
        "PAKISTAN",
        "POLAND",
        "SAINT PIERRE AND MIQUELON",
        "PITCAIRN",
        "PUERTO RICO",
        "PALESTINIAN TERRITORY, OCCUPIED",
        "PORTUGAL",
        "PALAU",
        "PARAGUAY",
        "QATAR",
        "REUNION",
        "ROMANIA",
        "SERBIA",
        "RUSSIAN FEDERATION",
        "RWANDA",
        "SAUDI ARABIA",
        "SOLOMON ISLANDS",
        "SEYCHELLES",
        "SUDAN",
        "SWEDEN",
        "SINGAPORE",
        "SAINT HELENA",
        "SLOVENIA",
        "SVALBARD AND JAN MAYEN",
        "SLOVAKIA",
        "SIERRA LEONE",
        "SAN MARINO",
        "SENEGAL",
        "SOMALIA",
        "SURINAME",
        "SOUTH SUDAN",
        "SAO TOME AND PRINCIPE",
        "EL SALVADOR",
        "SINT MAARTEN (DUTCH PART)",
        "SYRIAN ARAB REPUBLIC",
        "SWAZILAND",
        "TURKS AND CAICOS ISLANDS",
        "CHAD",
        "FRENCH SOUTHERN TERRITORIES",
        "TOGO",
        "THAILAND",
        "TAJIKISTAN",
        "TOKELAU",
        "TIMOR-LESTE",
        "TURKMENISTAN",
        "TUNISIA",
        "TONGA",
        "TURKEY",
        "TRINIDAD AND TOBAGO",
        "TUVALU",
        "TAIWAN, PROVINCE OF CHINA",
        "TANZANIA, UNITED REPUBLIC OF",
        "UKRAINE",
        "UGANDA",
        "UNITED STATES MINOR OUTLYING ISLANDS",
        "UNITED STATES",
        "URUGUAY",
        "UZBEKISTAN",
        "HOLY SEE (VATICAN CITY STATE)",
        "SAINT VINCENT AND THE GRENADINES",
        "VENEZUELA",
        "VIRGIN ISLANDS, BRITISH",
        "VIRGIN ISLANDS, U.S.",
        "VIET NAM",
        "VANUATU",
        "WALLIS AND FUTUNA",
        "SAMOA",
        "YEMEN",
        "MAYOTTE",
        "SOUTH AFRICA",
        "ZAMBIA",
        "ZIMBABWE"
      ],
      "links": [
        {
          "href": "https://en.wikipedia.org/wiki/ISO_3166-1"
        }
      ]
    },
    "WeekdayCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WeekdayCodeList",
      "description": "Values that classify the various days of week.",
      "enum": [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
      ]
    },
    "PayCycleIntervalCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayCycleIntervalCodeList",
      "description": "PayCycleInterval specifies how often the pay cycle occurs or, in other words, how often a person is paid, e.g., weekly, biweekly, etc. This is a different concept than an interval used in expressing a rate of pay.",
      "enum": [
        "Day",
        "Week",
        "TwoWeeks",
        "HalfMonth",
        "Month",
        "TwoMonths",
        "MonthWeek",
        "MonthWeek2",
        "MonthWeek3",
        "MonthWeek4",
        "MonthWeek5",
        "MonthWeekLast",
        "Quarter",
        "HalfYear",
        "Year"
      ],
      "enumNames": [
        "Day",
        "Week",
        "Two Weeks",
        "Half Month",
        "Month",
        "Two Months",
        "Month-Week",
        "Month-Week 2",
        "Month-Week 3",
        "Month-Week 4",
        "Month-Week 5",
        "Month-Week-Last",
        "Quarter",
        "Half Year",
        "Year"
      ]
    },
    "PublicationTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PublicationTypeCodeList",
      "description": "Publication type code list.",
      "enum": [
        "Book",
        "Paper",
        "Article",
        "Conference",
        "Thesis",
        "WhitePaper",
        "Report",
        "TechnicalDocumentation",
        "Study",
        "Manual",
        "ResearchPaper",
        "OtherPublication"
      ],
      "enumNames": [
        "Book",
        "Paper",
        "Article",
        "Conference",
        "Thesis",
        "White Paper",
        "Report",
        "Technical Documentation",
        "Study",
        "Manual",
        "Research Paper",
        "Other Publication"
      ]
    },
    "ScheduledHoursCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScheduledHoursCodeList",
      "description": "Values that classify the various scheduled hours types.",
      "enum": [
        "Week",
        "TwoWeeks",
        "FourWeeks",
        "HalfMonth",
        "Month",
        "TwoMonths",
        "Quarter",
        "SeasonalTerm",
        "HalfYear",
        "Year",
        "Shift"
      ],
      "enumNames": [
        "Week",
        "Two Weeks",
        "Four Weeks",
        "Half Month",
        "Month",
        "Two Months",
        "Quarter",
        "Seasonal Term",
        "Half Year",
        "Year",
        "Shift"
      ]
    },
    "PositionTermTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionTermTypeCodeList",
      "description": "The term of the work agreement or position. Options are Fixed, Permanent, Casual, Seasonal.",
      "enum": [
        "Fixed",
        "Permanent",
        "Temporary",
        "Seasonal"
      ],
      "enumNames": [
        "Ends on a specified date or when a particular event occurs.",
        "Has the full set of employment rights and responsibilities. This may be full or part time.",
        "Used for unpredictable workloads, project work, seasonal peaks, and other limited-term needs, such as a leave of absence.",
        "A type of fixed-term employment where the employment agreement says that the work will finish at the end of the season."
      ]
    },
    "TimeOffsetList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TimeOffsetList",
      "description": "Coordinated Universal Time (UTC), from the westernmost (−12:00) to the easternmost (+14:00).",
      "enum": [
        "UTC−12:00",
        "UTC−11:00",
        "UTC-10:00",
        "UTC-09:30",
        "UTC-09:00",
        "UTC-08:00",
        "UTC-07:00",
        "UTC-06:00",
        "UTC-05:00",
        "UTC-04:00",
        "UTC-03:30",
        "UTC-03:00",
        "UTC-01:00",
        "UTC-00:00",
        "UTC+01:00",
        "UTC+02:00",
        "UTC+03:00",
        "UTC+03:30",
        "UTC+04:00",
        "UTC+04:30",
        "UTC+05:00",
        "UTC+05:30",
        "UTC+05:45",
        "UTC+06:00",
        "UTC+06:30",
        "UTC+07:00",
        "UTC+08:00",
        "UTC+08:45",
        "UTC+09:00",
        "UTC+09:30",
        "UTC+10:00",
        "UTC+10:30",
        "UTC+11:00",
        "UTC+12:00",
        "UTC+12:45",
        "UTC+13:00",
        "UTC+14:00"
      ]
    },
    "AgencyRoleCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AgencyRoleCodeList",
      "description": "A code classifying the role of an entity or the role with which that entity is associated.",
      "enum": [
        "Customer",
        "Supplier",
        "Requester"
      ]
    },
    "WorkerAssignmentSourceCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WorkerAssignmentSourceCodeList",
      "description": "Values that classify the various worker assignment source codes.",
      "enum": [
        "Domestic",
        "Inpatriate",
        "Expatriate",
        "LocalNational",
        "ThirdCountryNational"
      ],
      "enumNames": [
        "Domestic",
        "Inpatriate",
        "Expatriate",
        "Local National",
        "Third-Country National"
      ]
    },
    "CurrencyCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CurrencyCodeList",
      "description": "ISO 4217 is the International Standard for currency codes. The most recent edition is ISO 4217:2015.",
      "enum": [
        "AED",
        "AFN",
        "ALL",
        "AMD",
        "ANG",
        "AOA",
        "ARS",
        "AUD",
        "AWG",
        "AZN",
        "BAM",
        "BBD",
        "BDT",
        "BGN",
        "BHD",
        "BIF",
        "BMD",
        "BND",
        "BOB",
        "BOV",
        "BRL",
        "BSD",
        "BTN",
        "BWP",
        "BYR",
        "BZD",
        "CAD",
        "CDF",
        "CHE",
        "CHF",
        "CHW",
        "CLF",
        "CLP",
        "CNY",
        "COP",
        "COU",
        "CRC",
        "CUC",
        "CUP",
        "CVE",
        "CZK",
        "DJF",
        "DKK",
        "DOP",
        "DZD",
        "EGP",
        "ERN",
        "ETB",
        "EUR",
        "FJD",
        "FKP",
        "GBP",
        "GEL",
        "GHS",
        "GIP",
        "GMD",
        "GNF",
        "GTQ",
        "GYD",
        "HKD",
        "HNL",
        "HRK",
        "HTG",
        "HUF",
        "IDR",
        "ILS",
        "INR",
        "IQD",
        "IRR",
        "ISK",
        "JMD",
        "JOD",
        "JPY",
        "KES",
        "KGS",
        "KHR",
        "KMF",
        "KPW",
        "KRW",
        "KWD",
        "KYD",
        "KZT",
        "LAK",
        "LBP",
        "LKR",
        "LRD",
        "LSL",
        "LYD",
        "MAD",
        "MDL",
        "MGA",
        "MKD",
        "MMK",
        "MNT",
        "MOP",
        "MRU",
        "MUR",
        "MVR",
        "MWK",
        "MXN",
        "MXV",
        "MYR",
        "MZN",
        "NAD",
        "NGN",
        "NIO",
        "NOK",
        "NPR",
        "NZD",
        "OMR",
        "PAB",
        "PEN",
        "PGK",
        "PHP",
        "PKR",
        "PLN",
        "PYG",
        "QAR",
        "RON",
        "RSD",
        "RUB",
        "RWF",
        "SAR",
        "SBD",
        "SCR",
        "SDG",
        "SEK",
        "SGD",
        "SHP",
        "SLL",
        "SOS",
        "SRD",
        "SSP",
        "STN",
        "SVC",
        "SYP",
        "SZL",
        "THB",
        "TJS",
        "TMT",
        "TND",
        "TOP",
        "TRY",
        "TTD",
        "TWD",
        "TZS",
        "UAH",
        "UGX",
        "USD",
        "USN",
        "UYI",
        "UYU",
        "UZS",
        "VEF",
        "VND",
        "VUV",
        "WST",
        "XAF",
        "XAG",
        "XAU",
        "XBA",
        "XBB",
        "XBC",
        "XBD",
        "XCD",
        "XDR",
        "XOF",
        "XPD",
        "XPF",
        "XPT",
        "XSU",
        "XTS",
        "XUA",
        "XXX",
        "YER",
        "ZAR",
        "ZMW",
        "ZWL"
      ],
      "enumNames": [
        "UAE Dirham",
        "Afghani",
        "Lek",
        "Armenian Dram",
        "Netherlands Antillean Guilder",
        "Kwanza",
        "Argentine Peso",
        "Australian Dollar",
        "Aruban Florin",
        "Azerbaijanian Manat",
        "Convertible Mark",
        "Barbados Dollar",
        "Taka",
        "Bulgarian Lev",
        "Bahraini Dinar",
        "Burundi Franc",
        "Bermudian Dollar",
        "Brunei Dollar",
        "Boliviano",
        "Mvdol",
        "Brazilian Real",
        "Bahamian Dollar",
        "Ngultrum",
        "Pula",
        "Belarussian Ruble",
        "Belize Dollar",
        "Canadian Dollar",
        "Congolese Franc",
        "WIR Euro",
        "Swiss Franc",
        "WIR Franc",
        "Unidades de fomento",
        "Chilean Peso",
        "Yuan Renminbi",
        "Colombian Peso",
        "Unidad de Valor Real",
        "Costa Rican Colon",
        "Peso Convertible",
        "Cuban Peso",
        "Cape Verde Escudo",
        "Czech Koruna",
        "Djibouti Franc",
        "Danish Krone",
        "Dominican Peso",
        "Algerian Dinar",
        "Egyptian Pound",
        "Nakfa",
        "Ethiopian Birr",
        "Euro",
        "Fiji Dollar",
        "Falkland Islands Pound",
        "Pound Sterling",
        "Lari",
        "Ghana Cedi",
        "Gibraltar Pound",
        "Dalasi",
        "Guinea Franc",
        "Quetzal",
        "Guyana Dollar",
        "Hong Kong Dollar",
        "Lempira",
        "Croatian Kuna",
        "Gourde",
        "Forint",
        "Rupiah",
        "New Israeli Sheqel",
        "Indian Rupee",
        "Iraqi Dinar",
        "Iranian Rial",
        "Iceland Krona",
        "Jamaican Dollar",
        "Jordanian Dinar",
        "Yen",
        "Kenyan Shilling",
        "Som",
        "Riel",
        "Comoro Franc",
        "North Korean Won",
        "Won",
        "Kuwaiti Dinar",
        "Cayman Islands Dollar",
        "Tenge",
        "Kip",
        "Lebanese Pound",
        "Sri Lanka Rupee",
        "Liberian Dollar",
        "Loti",
        "Libyan Dinar",
        "Moroccan Dirham",
        "Moldovan Leu",
        "Malagasy Ariary",
        "Denar",
        "Kyat",
        "Tugrik",
        "Pataca",
        "Ouguiya",
        "Mauritius Rupee",
        "Rufiyaa",
        "Kwacha",
        "Mexican Peso",
        "Mexican Unidad de Inversion (UDI)",
        "Malaysian Ringgit",
        "Mozambique Metical",
        "Namibia Dollar",
        "Naira",
        "Cordoba Oro",
        "Norwegian Krone",
        "Nepalese Rupee",
        "New Zealand Dollar",
        "Rial Omani",
        "Balboa",
        "Nuevo Sol",
        "Kina",
        "Philippine Peso",
        "Pakistan Rupee",
        "Zloty",
        "Guarani",
        "Qatari Rial",
        "New Romanian Leu",
        "Serbian Dinar",
        "Russian Ruble",
        "Rwanda Franc",
        "Saudi Riyal",
        "Solomon Islands Dollar",
        "Seychelles Rupee",
        "Sudanese Pound",
        "Swedish Krona",
        "Singapore Dollar",
        "Saint Helena Pound",
        "Leone",
        "Somali Shilling",
        "Surinam Dollar",
        "South Sudanese Pound",
        "Dobra",
        "El Salvador Colon",
        "Syrian Pound",
        "Lilangeni",
        "Baht",
        "Somoni",
        "Turkmenistan New Manat",
        "Tunisian Dinar",
        "Pa’anga",
        "Turkish Lira",
        "Trinidad and Tobago Dollar",
        "New Taiwan Dollar",
        "Tanzanian Shilling",
        "Hryvnia",
        "Uganda Shilling",
        "US Dollar",
        "US Dollar (Next day)",
        "Uruguay Peso en Unidades Indexadas (URUIURUI)",
        "Peso Uruguayo",
        "Uzbekistan Sum",
        "Bolivar",
        "Dong",
        "Vatu",
        "Tala",
        "CFA Franc BEAC",
        "Silver",
        "Gold",
        "Bond Markets Unit European Composite Unit (EURCO)",
        "Bond Markets Unit European Monetary Unit (E.M.U.-6)",
        "Bond Markets Unit European Unit of Account 9 (E.U.A.-9)",
        "Bond Markets Unit European Unit of Account 17 (E.U.A.-17)",
        "East Caribbean Dollar",
        "SDR (Special Drawing Right)",
        "CFA Franc BCEAO",
        "Palladium",
        "CFP Franc",
        "Platinum",
        "Sucre",
        "Codes specifically reserved for testing purposes",
        "ADB Unit of Account",
        "The codes assigned for transactions where no currency is involved",
        "Yemeni Rial",
        "Rand",
        "Zambian Kwacha",
        "Zimbabwe Dollar"
      ],
      "links": [
        {
          "href": "https://www.iso.org/iso-4217-currency-codes.html"
        }
      ]
    },
    "UnitCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "UnitCodeList",
      "description": "A partial list of UN/CEFACT Unit Codes for Trade (2014, Annex II & Annex III).",
      "enum": [
        "ACR",
        "ARE",
        "CMT",
        "DAY",
        "EA",
        "FOT",
        "GRM",
        "HAR",
        "HUR",
        "INH",
        "KGM",
        "KMT",
        "LTR",
        "MTR",
        "SMI",
        "MGM",
        "MLT",
        "MMT",
        "C26",
        "MIN",
        "MON",
        "C62",
        "ONZ",
        "PTI",
        "PT",
        "LBR",
        "QTI",
        "QT",
        "SEC",
        "STI",
        "WEE",
        "YRD",
        "ANN"
      ],
      "enumNames": [
        "acre",
        "are",
        "centimeter",
        "day",
        "each",
        "foot",
        "gram",
        "hectare",
        "hour",
        "inch",
        "kilogram",
        "kilometre",
        "litre",
        "metre",
        "mile",
        "milligram",
        "millilitre",
        "millimetre",
        "millisecond",
        "minute",
        "month",
        "one [piece]",
        "ounce",
        "pint [UK]",
        "pint [US]",
        "pound",
        "quart [UK]",
        "quart [US]",
        "second",
        "stone",
        "week",
        "yard",
        "year"
      ],
      "links": [
        {
          "href": "https://www.unece.org/cefact/codesfortrade/codes_index.html"
        }
      ]
    },
    "RelationshipTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RelationshipTypeCodeList",
      "description": "Values used to describe the type of relationship of a reference.",
      "enum": [
        "Personal",
        "Professional"
      ]
    },
    "RemunerationBasisCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RemunerationBasisCodeList",
      "description": "A code classifying the primary method of payment for the associated position or employment. This classifies the method by which remuneration for a position is provided or calculated.",
      "enum": [
        "Hourly",
        "Salaried",
        "SalariedPlusBonus",
        "SalariedPlusCommission",
        "CommissionOnly"
      ],
      "enumNames": [
        "Hourly",
        "Salaried",
        "Salaried Plus Bonus",
        "Salaried Plus Commission",
        "Commission Only"
      ]
    },
    "AssignmentReasonCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssignmentReasonCodeList",
      "description": "Assignment reason code list.",
      "enum": [
        "Acquisition",
        "Demotion",
        "Hire",
        "Lateral",
        "Promotion",
        "Transfer",
        "Re-hire",
        "Retirement",
        "Leave",
        "Termination"
      ]
    },
    "ResourceRelationshipCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ResourceRelationshipCodeList",
      "description": "Resource relationship code list.",
      "enum": [
        "Employee",
        "VendorEmployee",
        "IndependentContractor",
        "Volunteer",
        "Internship",
        "Externship",
        "Apprenticeship"
      ],
      "enumNames": [
        "A paid position with all related benefits.",
        "A worker hired by a third party such as a consulting agency.",
        "A worker with a contract signed directly by the employer.",
        "An unpaid position.",
        "A paid or voluntary position with an organization for someone who is learning a profession and industry.",
        "An unpaid shadowing of a respected industry professional during which the extern will observe daily duties.",
        "A kind of job training that involves following and studying a master of the trade on the job instead of in school."
      ]
    },
    "PositionScheduleTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PositionScheduleTypeCodeList",
      "description": "Values that classify the working schedule of a position offered or a position sought. Essentially, whether a position offered or sought is full-time or part-time or has provision for flexible scheduling. Shared Time is meant to indicate a single position that is shared amongst more than one person. Intended to classify schedule position preferences of a candidate or conversely employer preferences or requirements related to candidates with respect to an advertised position. Used in the context of matching candidates to positions.",
      "enum": [
        "FullTime",
        "PartTime",
        "FlexTime",
        "SharedTime"
      ],
      "enumNames": [
        "Full-Time",
        "Part-Time",
        "Flex Time",
        "Shared Time"
      ]
    },
    "PayRateIntervalCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayRateIntervalCodeList",
      "description": "An interval of time or other basis used to express a rate of pay, remuneration, or deduction. OED: Interval, n.  2. a. The space of time intervening between two points of time; any intervening time. TwoWeek24 applies when there are 24 deductions within the year and TwoWeek26 applies when there are 26 deductions within the year.",
      "enum": [
        "Hour",
        "Day",
        "Week",
        "TwoWeek24",
        "TwoWeek26",
        "TwoWeeks",
        "FourWeeks",
        "HalfMonth",
        "Month",
        "TwoMonths",
        "Quarter",
        "SeasonalTerm",
        "HalfYear",
        "Year",
        "QuarterToDate",
        "YearToDate",
        "Once"
      ],
      "enumNames": [
        "Hour",
        "Day",
        "Week",
        "Two Week 24",
        "Two Week 26",
        "Two Weeks",
        "Four Weeks",
        "Half Month",
        "Month",
        "Two Months",
        "Quarter",
        "Seasonal Term",
        "Half Year",
        "Year",
        "Quarter To Date",
        "Year To Date",
        "Once"
      ]
    },
    "CareerLevelCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CareerLevelCodeList",
      "description": "A code classifying the level of a candidate based on career experience. Student, Entry Level, Recent Graduate, Mid-Career, Manager, Experienced Non-Manager, Senior Executive",
      "enum": [
        "Student",
        "EntryLevel",
        "RecentGraduate",
        "MidCareer",
        "Manager",
        "ExperiencedNonManager",
        "SeniorExecutive"
      ],
      "enumNames": [
        "Student",
        "Entry Level",
        "Recent Graduate",
        "Mid Career",
        "Manager",
        "Experienced Non-Manager",
        "Senior Executive"
      ]
    },
    "PayTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PayTypeCodeList",
      "description": "Values that classify the various pay types.",
      "enum": [
        "BasePay",
        "Commission",
        "Bonus",
        "ShortTermIncentive",
        "ShiftPay",
        "OnCall",
        "Hazard",
        "VariablePay",
        "Allowance",
        "Overtime",
        "Regular",
        "OtherPremium",
        "CallBack",
        "Holiday",
        "BackPay",
        "Performance",
        "Residual",
        "Severance",
        "Tip",
        "OtherCompensation"
      ],
      "enumNames": [
        "Base Pay",
        "Commission",
        "Bonus",
        "Short-Term Incentive",
        "Shift Pay",
        "On Call",
        "Hazard",
        "Variable Pay",
        "Allowance",
        "Overtime",
        "Regular",
        "Other Premium",
        "Call Back",
        "Holiday",
        "BackPay",
        "Performance",
        "Residual",
        "Severance",
        "Tip",
        "Other Compensation"
      ]
    },
    "CompensationCareerLevelCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CompensationCareerLevelCodeList",
      "description": "A set of codes classifying the compensation career level codes.",
      "enum": [
        "EntryLevel",
        "SomeRelevantExperience",
        "Experienced",
        "SeniorLevel",
        "MasteryLevel",
        "IndustryExpert"
      ],
      "enumNames": [
        "Entry Level",
        "Some Relevant Experience",
        "Experienced",
        "Senior Level",
        "Mastery Level",
        "Industry Expert"
      ]
    },
    "IscedCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "IscedCodeList",
      "description": "The International Standard Classification of Education (ISCED) is a scheme developed by the UN to provide a normalized, international set of values for classifying the level of a school or institution. Version from year 2011.",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ],
      "enumNames": [
        "Early childhood education",
        "Primary education",
        "Lower secondary education",
        "Upper secondary education",
        "Post-secondary non-tertiary education",
        "Short-cycle tertiary education",
        "Bachelor or equivalent",
        "Master or equivalent",
        "Doctoral or equivalent"
      ],
      "links": [
        {
          "href": "http://www.uis.unesco.org/Education/Documents/isced-2011-operational-manual.pdf",
          "rel": "full",
          "mediaType": "application/pdf"
        }
      ]
    },
    "ScoreNumericCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ScoreNumericCodeList",
      "description": "A set of enumerations describing the numeric type of scoring scheme.",
      "enum": [
        "Percentile",
        "RawScore",
        "Stanine",
        "Sten",
        "T-score",
        "Z-score",
        "IntelligenceQuotient",
        "Scaled",
        "NormalCurve",
        "GPA"
      ],
      "enumNames": [
        "Percentile",
        "RawScore",
        "Stanine",
        "Sten",
        "T-score",
        "Z-score",
        "IntelligenceQuotient",
        "Scaled",
        "NormalCurve",
        "GPA"
      ]
    },
    "LanguageCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LanguageCodeList",
      "description": "This list is based on Internet Engineering Task Force (IETF) RFC 4646 and RFC 4647 for language tags. This tag system is extensible to region, dialect, and private designations. The IANA Language Subtag Registry is a source of the tag values. See http://www.iana.org/assignments/language-subtag-registry",
      "enum": [
        "aa",
        "ab",
        "ae",
        "af",
        "af-ZA",
        "ak",
        "am",
        "am-ET",
        "an",
        "ar",
        "ar-AE",
        "ar-BH",
        "ar-DZ",
        "ar-EG",
        "ar-IQ",
        "ar-JO",
        "ar-KW",
        "ar-LB",
        "ar-LY",
        "ar-MA",
        "ar-OM",
        "ar-QA",
        "ar-SA",
        "ar-SY",
        "ar-TN",
        "ar-YE",
        "arn",
        "arn-CL",
        "as",
        "as-IN",
        "av",
        "ay",
        "az",
        "az-Cyrl",
        "az-Cyrl-AZ",
        "az-Latn",
        "az-Latn-AZ",
        "ba",
        "ba-RU",
        "be",
        "be-BY",
        "bg",
        "bg-BG",
        "bh",
        "bi",
        "bm",
        "bn",
        "bn-BD",
        "bn-IN",
        "bo",
        "bo-CN",
        "br",
        "br-FR",
        "bs",
        "bs, hr, or sr",
        "bs-Cyrl",
        "bs-Cyrl-BA",
        "bs-Latn",
        "bs-Latn-BA",
        "ca",
        "ca-ES",
        "ca-ES-valencia",
        "ce",
        "ch",
        "chr",
        "chr-Cher",
        "chr-Cher-US",
        "co",
        "co-FR",
        "cr",
        "cs",
        "cs-CZ",
        "cu",
        "cv",
        "cy",
        "cy-GB",
        "da",
        "da-DK",
        "de",
        "de-AT",
        "de-CH",
        "de-DE",
        "de-LI",
        "de-LU",
        "dsb or hsb",
        "dsb",
        "dsb-DE",
        "dv",
        "dv-MV",
        "dz",
        "ee",
        "el",
        "el-GR",
        "en",
        "en-029",
        "en-AU",
        "en-BZ",
        "en-CA",
        "en-GB",
        "en-HK",
        "en-IE",
        "en-IN",
        "en-JM",
        "en-MY",
        "en-NZ",
        "en-PH",
        "en-SG",
        "en-TT",
        "en-US",
        "en-ZA",
        "en-ZW",
        "eo",
        "es",
        "es-419",
        "es-AR",
        "es-BO",
        "es-CL",
        "es-CO",
        "es-CR",
        "es-DO",
        "es-EC",
        "es-ES",
        "es-ES_tradnl",
        "es-GT",
        "es-HN",
        "es-MX",
        "es-NI",
        "es-PA",
        "es-PE",
        "es-PR",
        "es-PY",
        "es-SV",
        "es-US",
        "es-UY",
        "es-VE",
        "et",
        "et-EE",
        "eu",
        "eu-ES",
        "fa",
        "fa-IR",
        "ff",
        "ff-Latn",
        "ff-Latn-SN",
        "fi",
        "fi-FI",
        "fil",
        "fil-PH",
        "fj",
        "fo",
        "fo-FO",
        "fr",
        "fr-BE",
        "fr-CA",
        "fr-CD",
        "fr-CH",
        "fr-CI",
        "fr-CM",
        "fr-FR",
        "fr-HT",
        "fr-LU",
        "fr-MA",
        "fr-MC",
        "fr-ML",
        "fr-RE",
        "fr-SN",
        "fy",
        "fy-NL",
        "ga",
        "ga-IE",
        "gd",
        "gd-GB",
        "gl",
        "gl-ES",
        "gn",
        "gn-PY",
        "gsw",
        "gsw-FR",
        "gu",
        "gu-IN",
        "gv",
        "ha",
        "ha-Latn",
        "ha-Latn-NG",
        "haw",
        "haw-US",
        "he",
        "he-IL",
        "hi",
        "hi-IN",
        "ho",
        "hr",
        "hr-BA",
        "hr-HR",
        "hsb-DE",
        "ht",
        "hu",
        "hu-HU",
        "hy",
        "hy-AM",
        "hz",
        "ia",
        "id",
        "id-ID",
        "ie",
        "ig",
        "ig-NG",
        "ii",
        "ii-CN",
        "ik",
        "io",
        "is",
        "is-IS",
        "it",
        "it-CH",
        "it-IT",
        "iu",
        "iu-Cans",
        "iu-Cans-CA",
        "iu-Latn",
        "iu-Latn-CA",
        "ja",
        "ja-JP",
        "jv",
        "jv-Latn",
        "jv-Latn-ID",
        "ka",
        "ka-GE",
        "kg",
        "ki",
        "kj",
        "kk",
        "kk-KZ",
        "kl",
        "kl-GL",
        "km",
        "km-KH",
        "kn",
        "kn-IN",
        "ko",
        "kok",
        "kok-IN",
        "ko-KR",
        "kr",
        "ks",
        "ku",
        "ku-Arab",
        "ku-Arab-IQ",
        "kv",
        "kw",
        "ky",
        "ky-KG",
        "la",
        "lb",
        "lb-LU",
        "lg",
        "li",
        "ln",
        "lo",
        "lo-LA",
        "lt",
        "lt-LT",
        "lu",
        "lv",
        "lv-LV",
        "mg",
        "mg-MG",
        "mh",
        "mi",
        "mi-NZ",
        "mk",
        "mk-MK",
        "ml",
        "ml-IN",
        "mn",
        "mn-Cyrl",
        "mn-MN",
        "mn-Mong",
        "mn-Mong-CN",
        "mo",
        "moh",
        "moh-CA",
        "mr",
        "mr-IN",
        "ms",
        "ms-BN",
        "ms-MY",
        "mt",
        "mt-MT",
        "my",
        "my-MM",
        "na",
        "nb",
        "nb-NO",
        "nd",
        "ne",
        "ne-IN",
        "ne-NP",
        "ng",
        "nl",
        "nl-BE",
        "nl-NL",
        "nn",
        "nn-NO",
        "no",
        "nqo",
        "nqo-GN",
        "nr",
        "nso",
        "nso-ZA",
        "nv",
        "ny",
        "oc",
        "oc-FR",
        "oj",
        "om",
        "om-ET",
        "or",
        "or-IN",
        "os",
        "pa",
        "pa-Arab",
        "pa-Arab-PK",
        "pa-IN",
        "pi",
        "pl",
        "pl-PL",
        "prs",
        "prs-AF",
        "ps",
        "ps-AF",
        "pt",
        "pt-AO",
        "pt-BR",
        "pt-PT",
        "qu",
        "qut",
        "qut-GT",
        "quz",
        "quz-BO",
        "quz-EC",
        "quz-PE",
        "rm",
        "rm-CH",
        "rn",
        "ro",
        "ro-MD",
        "ro-RO",
        "ru",
        "ru-RU",
        "rw",
        "rw-RW",
        "sa",
        "sah",
        "sah-RU",
        "sa-IN",
        "sc",
        "sd",
        "sd-Arab",
        "sd-Arab-PK",
        "se",
        "se-FI",
        "se-NO",
        "se-SE",
        "sg",
        "si",
        "si-LK",
        "sk",
        "sk-SK",
        "sl",
        "sl-SI",
        "sm",
        "sma",
        "sma-NO",
        "sma-SE",
        "smj",
        "smj-NO",
        "smj-SE",
        "smn",
        "smn-FI",
        "sms",
        "sms-FI",
        "sn",
        "sn-Latn",
        "sn-Latn-ZW",
        "so",
        "so-SO",
        "sq",
        "sq-AL",
        "sr",
        "sr-Cyrl",
        "sr-Cyrl-BA",
        "sr-Cyrl-CS",
        "sr-Cyrl-ME",
        "sr-Cyrl-RS",
        "sr-Latn",
        "sr-Latn-BA",
        "sr-Latn-CS",
        "sr-Latn-ME",
        "sr-Latn-RS",
        "ss",
        "st",
        "st-ZA",
        "su",
        "sv",
        "sv-FI",
        "sv-SE",
        "sw",
        "sw-KE",
        "syr",
        "syr-SY",
        "ta",
        "ta-IN",
        "ta-LK",
        "te",
        "te-IN",
        "tg",
        "tg-Cyrl",
        "tg-Cyrl-TJ",
        "th",
        "th-TH",
        "ti",
        "ti-ER",
        "ti-ET",
        "tk",
        "tk-TM",
        "tl",
        "tn",
        "tn-BW",
        "tn-ZA",
        "to",
        "tr",
        "tr-TR",
        "ts",
        "ts-ZA",
        "tt",
        "tt-RU",
        "tw",
        "ty",
        "tzm",
        "tzm-Latn",
        "tzm-Latn-DZ",
        "ug",
        "ug-CN",
        "uk",
        "uk-UA",
        "ur",
        "ur-IN",
        "ur-PK",
        "uz",
        "uz-Cyrl",
        "uz-Cyrl-UZ",
        "uz-Latn",
        "uz-Latn-UZ",
        "ve",
        "vi",
        "vi-VN",
        "vo",
        "wa",
        "wo",
        "wo-SN",
        "xh",
        "xh-ZA",
        "yi",
        "yo",
        "yo-NG",
        "za",
        "zgh",
        "zgh-Tfng",
        "zgh-Tfng-MA",
        "zh",
        "zh-CN",
        "zh-Hans",
        "zh-Hant",
        "zh-HK",
        "zh-MO",
        "zh-SG",
        "zh-TW",
        "zu",
        "zu-ZA"
      ],
      "enumNames": [
        "Afar",
        "Abkhazian",
        "Avestan",
        "Afrikaans",
        "Afrikaans, South Africa",
        "Akan",
        "Amharic",
        "Amharic, Ethiopia",
        "Aragonese",
        "Arabic",
        "Arabic, U.A.E.",
        "Arabic, Bahrain",
        "Arabic, Algeria",
        "Arabic, Egypt",
        "Arabic, Iraq",
        "Arabic, Jordan",
        "Arabic, Kuwait",
        "Arabic, Lebanon",
        "Arabic, Libya",
        "Arabic, Morocco",
        "Arabic, Oman",
        "Arabic, Qatar",
        "Arabic, Saudi Arabia",
        "Arabic, Syria",
        "Arabic, Tunisia",
        "Arabic, Yemen",
        "Mapudungun",
        "Mapudungun, Chile",
        "Assamese",
        "Assamese, India",
        "Avaric",
        "Aymara",
        "Azerbaijani (Latin)",
        "Azerbaijani (Cyrillic)",
        "Azerbaijani (Cyrillic), Azerbaijan",
        "Azerbaijani (Latin)",
        "Azerbaijani (Latin), Azerbaijan",
        "Bashkir",
        "Bashkir, Russia",
        "Belarusian",
        "Belarusian, Belarus",
        "Bulgarian",
        "Bulgarian, Bulgaria",
        "Bihari languages",
        "Bislama",
        "Bambara",
        "Bangla",
        "Bangla, Bangladesh",
        "Bangla, India",
        "Tibetan",
        "Tibetan, People's Republic of China",
        "Breton",
        "Breton, France",
        "Bosnian (Latin)",
        "Croatian",
        "Bosnian (Cyrillic)",
        "Bosnian (Cyrillic), Bosnia and Herzegovina",
        "Bosnian (Latin)",
        "Bosnian (Latin), Bosnia and Herzegovina",
        "Catalan",
        "Catalan, Spain",
        "Valencian, Spain",
        "Chechen",
        "Chamorro",
        "Cherokee",
        "Cherokee",
        "Cherokee, United States",
        "Corsican",
        "Corsican, France",
        "Cree",
        "Czech",
        "Czech, Czech Republic",
        "Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic",
        "Chuvash",
        "Welsh",
        "Welsh, United Kingdom",
        "Danish",
        "Danish, Denmark",
        "German",
        "German, Austria",
        "German, Switzerland",
        "German, Germany",
        "German, Liechtenstein",
        "German, Luxembourg",
        "Upper Sorbian",
        "Lower Sorbian",
        "Lower Sorbian, Germany",
        "Divehi",
        "Divehi, Maldives",
        "Dzongkha",
        "Ewe",
        "Greek",
        "Greek, Greece",
        "English",
        "English, Caribbean",
        "English, Australia",
        "English, Belize",
        "English, Canada",
        "English, United Kingdom",
        "English, Hong Kong",
        "English, Ireland",
        "English, India",
        "English, Jamaica",
        "English, Malaysia",
        "English, New Zealand",
        "English, Republic of the Philippines",
        "English, Singapore",
        "English, Trinidad and Tobago",
        "English, United States",
        "English, South Africa",
        "English, Zimbabwe",
        "Esperanto",
        "Spanish",
        "Spanish, Latin America",
        "Spanish, Argentina",
        "Spanish, Bolivia",
        "Spanish, Chile",
        "Spanish, Colombia",
        "Spanish, Costa Rica",
        "Spanish, Dominican Republic",
        "Spanish, Ecuador",
        "Spanish, Spain",
        "Spanish, Spain",
        "Spanish, Guatemala",
        "Spanish, Honduras",
        "Spanish, Mexico",
        "Spanish, Nicaragua",
        "Spanish, Panama",
        "Spanish, Peru",
        "Spanish, Puerto Rico",
        "Spanish, Paraguay",
        "Spanish, El Salvador",
        "Spanish, United States",
        "Spanish, Uruguay",
        "Spanish, Bolivarian Republic of Venezuela",
        "Estonian",
        "Estonian, Estonia",
        "Basque",
        "Basque, Spain",
        "Persian",
        "Persian, Iran",
        "Fulah",
        "Fulah",
        "Fulah, Senegal",
        "Finnish",
        "Finnish, Finland",
        "Filipino",
        "Filipino, Philippines",
        "Fijian",
        "Faroese",
        "Faroese, Faroe Islands",
        "French",
        "French, Belgium",
        "French, Canada",
        "French, Congo, DRC",
        "French, Switzerland",
        "French, Côte d’Ivoire",
        "French, Cameroon",
        "French, France",
        "French, Haiti",
        "French, Luxembourg",
        "French, Morocco",
        "French, Principality of Monaco",
        "French, Mali",
        "French, Reunion",
        "French, Senegal",
        "Frisian",
        "Frisian, Netherlands",
        "Irish",
        "Irish, Ireland",
        "Scottish Gaelic",
        "Scottish Gaelic, United Kingdom",
        "Galician",
        "Galician, Spain",
        "Guarani",
        "Guarani, Paraguay",
        "Alsatian",
        "Alsatian, France",
        "Gujarati",
        "Gujarati, India",
        "Manx",
        "Hausa (Latin)",
        "Hausa (Latin)",
        "Hausa (Latin), Nigeria",
        "Hawaiian",
        "Hawaiian, United States",
        "Hebrew",
        "Hebrew, Israel",
        "Hindi",
        "Hindi, India",
        "Hiri Motu",
        "Croatian",
        "Croatian (Latin), Bosnia and Herzegovina",
        "Croatian, Croatia",
        "Upper Sorbian, Germany",
        "Haitian; Haitian Creole",
        "Hungarian",
        "Hungarian, Hungary",
        "Armenian",
        "Armenian, Armenia",
        "Herero",
        "Interlingua (International Auxiliary Language Association)",
        "Indonesian",
        "Indonesian, Indonesia",
        "Interlingue; Occidental",
        "Igbo",
        "Igbo, Nigeria",
        "Yi",
        "Yi, People's Republic of China",
        "Inupiaq",
        "Ido",
        "Icelandic",
        "Icelandic, Iceland",
        "Italian",
        "Italian, Switzerland",
        "Italian, Italy",
        "Inuktitut (Latin)",
        "Inuktitut (Syllabics)",
        "Inuktitut (Syllabics), Canada",
        "Inuktitut (Latin)",
        "Inuktitut (Latin), Canada",
        "Japanese",
        "Japanese, Japan",
        "Javanese",
        "Javanese, Latin",
        "Javanese, Latin, Indonesia",
        "Georgian",
        "Georgian, Georgia",
        "Kongo",
        "Kikuyu; Gikuyu",
        "Kuanyama; Kwanyama",
        "Kazakh",
        "Kazakh, Kazakhstan",
        "Greenlandic",
        "Greenlandic, Greenland",
        "Khmer",
        "Khmer, Cambodia",
        "Kannada",
        "Kannada, India",
        "Korean",
        "Konkani",
        "Konkani, India",
        "Korean, Korea",
        "Kanuri",
        "Kashmiri",
        "Central Kurdish",
        "Central Kurdish",
        "Central Kurdish, Iraq",
        "Komi",
        "Cornish",
        "Kyrgyz",
        "Kyrgyz, Kyrgyzstan",
        "Latin",
        "Luxembourgish",
        "Luxembourgish, Luxembourg",
        "Ganda",
        "Limburgan; Limburger; Limburgish",
        "Lingala",
        "Lao",
        "Lao, Lao P.D.R.",
        "Lithuanian",
        "Lithuanian, Lithuania",
        "Luba-Katanga",
        "Latvian",
        "Latvian, Latvia",
        "Malagasy",
        "Malagasy, Madagascar",
        "Marshallese",
        "Maori",
        "Maori, New Zealand",
        "Macedonian",
        "Macedonian, Macedonia (Former Yugoslav Republic of Macedonia)",
        "Malayalam",
        "Malayalam, India",
        "Mongolian (Cyrillic)",
        "Mongolian (Cyrillic)",
        "Mongolian (Cyrillic), Mongolia",
        "Mongolian (Traditional Mongolian)",
        "Mongolian (Traditional Mongolian), People's Republic of China",
        "Moldavian; Moldovan",
        "Mohawk",
        "Mohawk, Canada",
        "Marathi",
        "Marathi, India",
        "Malay",
        "Malay, Brunei Darussalam",
        "Malay, Malaysia",
        "Maltese",
        "Maltese, Malta",
        "Burmese",
        "Burmese, Myanmar",
        "Nauru",
        "Norwegian (Bokmal)",
        "Norwegian (Bokmal), Norway",
        "Ndebele; North; North Ndebele",
        "Nepali",
        "Nepali, India",
        "Nepali, Nepal",
        "Ndonga",
        "Dutch",
        "Dutch, Belgium",
        "Dutch, Netherlands",
        "Norwegian (Nynorsk)",
        "Norwegian (Nynorsk), Norway",
        "Norwegian (Bokmal)",
        "N’ko",
        "N’ko, Guinea",
        "Ndebele; South; South Ndebele",
        "Sesotho sa Leboa",
        "Sesotho sa Leboa, South Africa",
        "Navajo; Navaho",
        "Chichewa; Chewa; Nyanja",
        "Occitan",
        "Occitan, France",
        "Ojibwa",
        "Oromo",
        "Oromo, Ethiopia",
        "Odia",
        "Odia, India",
        "Ossetian; Ossetic",
        "Punjabi",
        "Punjabi",
        "Punjabi, Islamic Republic of Pakistan",
        "Punjabi, India",
        "Pali",
        "Polish",
        "Polish, Poland",
        "Dari",
        "Dari, Afghanistan",
        "Pashto",
        "Pashto, Afghanistan",
        "Portuguese",
        "Portuguese, Angola",
        "Portuguese, Brazil",
        "Portuguese, Portugal",
        "Quechua",
        "K'iche",
        "K'iche, Guatemala",
        "Quechua",
        "Quechua, Bolivia",
        "Quechua, Ecuador",
        "Quechua, Peru",
        "Romansh",
        "Romansh, Switzerland",
        "Rundi",
        "Romanian",
        "Romanian, Moldova",
        "Romanian, Romania",
        "Russian",
        "Russian, Russia",
        "Kinyarwanda",
        "Kinyarwanda, Rwanda",
        "Sanskrit",
        "Sakha",
        "Sakha, Russia",
        "Sanskrit, India",
        "Sardinian",
        "Sindhi",
        "Sindhi",
        "Sindhi, Islamic Republic of Pakistan",
        "Sami (Northern)",
        "Sami (Northern), Finland",
        "Sami (Northern), Norway",
        "Sami (Northern), Sweden",
        "Sango",
        "Sinhala",
        "Sinhala, Sri Lanka",
        "Slovak",
        "Slovak, Slovakia",
        "Slovenian",
        "Slovenian, Slovenia",
        "Samoan",
        "Sami (Southern)",
        "Sami (Southern), Norway",
        "Sami (Southern), Sweden",
        "Sami (Lule)",
        "Sami (Lule), Norway",
        "Sami (Lule), Sweden",
        "Sami (Inari)",
        "Sami (Inari), Finland",
        "Sami (Skolt)",
        "Sami (Skolt), Finland",
        "Shona",
        "Shona, Latin",
        "Shona, Zimbabwe",
        "Somali",
        "Somali, Somalia",
        "Albanian",
        "Albanian, Albania",
        "Serbian (Latin)",
        "Serbian (Cyrillic)",
        "Serbian (Cyrillic), Bosnia and Herzegovina",
        "Serbian (Cyrillic), Serbia and Montenegro (Former)",
        "Serbian (Cyrillic), Montenegro",
        "Serbian (Cyrillic), Serbia",
        "Serbian (Latin)",
        "Serbian (Latin), Bosnia and Herzegovina",
        "Serbian (Latin), Serbia and Montenegro (Former)",
        "Serbian (Latin), Montenegro",
        "Serbian (Latin), Serbia",
        "Swati",
        "Sotho",
        "Sotho, South Africa",
        "Sundanese",
        "Swedish",
        "Swedish, Finland",
        "Swedish, Sweden",
        "Kiswahili",
        "Kiswahili, Kenya",
        "Syriac",
        "Syriac, Syria",
        "Tamil",
        "Tamil, India",
        "Tamil, Sri Lanka",
        "Telugu",
        "Telugu, India",
        "Tajik (Cyrillic)",
        "Tajik (Cyrillic)",
        "Tajik (Cyrillic), Tajikistan",
        "Thai",
        "Thai, Thailand",
        "Tigrinya",
        "Tigrinya, Eritrea",
        "Tigrinya, Ethiopia",
        "Turkmen",
        "Turkmen, Turkmenistan",
        "Tagalog",
        "Setswana",
        "Setswana, Botswana",
        "Setswana, South Africa",
        "Tonga (Tonga Islands)",
        "Turkish",
        "Turkish, Turkey",
        "Tsonga",
        "Tsonga, South Africa",
        "Tatar",
        "Tatar, Russia",
        "Twi",
        "Tahitian",
        "Tamazight (Latin)",
        "Tamazight (Latin)",
        "Tamazight (Latin), Algeria",
        "Uyghur",
        "Uyghur, People's Republic of China",
        "Ukrainian",
        "Ukrainian, Ukraine",
        "Urdu",
        "Urdu, India",
        "Urdu, Islamic Republic of Pakistan",
        "Uzbek (Latin)",
        "Uzbek (Cyrillic)",
        "Uzbek (Cyrillic), Uzbekistan",
        "Uzbek (Latin)",
        "Uzbek (Latin), Uzbekistan",
        "Venda",
        "Vietnamese",
        "Vietnamese, Vietnam",
        "Volapük",
        "Walloon",
        "Wolof",
        "Wolof, Senegal",
        "isiXhosa",
        "isiXhosa, South Africa",
        "Yiddish",
        "Yoruba",
        "Yoruba, Nigeria",
        "Zhuang; Chuang",
        "Standard Moroccan Tamazight",
        "Standard Moroccan Tamazight, Tifinagh",
        "Standard Moroccan Tamazight, Morocco",
        "Chinese (Simplified)",
        "Chinese (Simplified), People's Republic of China",
        "Chinese (Simplified)",
        "Chinese (Traditional)",
        "Chinese (Traditional), Hong Kong S.A.R.",
        "Chinese (Traditional), Macao S.A.R.",
        "Chinese (Simplified), Singapore",
        "Chinese (Traditional), Taiwan",
        "isiZulu",
        "isiZulu, South Africa"
      ],
      "links": [
        {
          "href": "http://www.unece.org/uncefact/codelist/standard/ISO_ISO2AlphaLanguageCode_2006-10-27.xsd",
          "rel": "partial",
          "mediaType": "application/xml"
        },
        {
          "href": "https://msdn.microsoft.com/en-us/library/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c#id1",
          "rel": "partial",
          "mediaType": "text/html"
        }
      ]
    },
    "PatentStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PatentStatusCodeList",
      "description": "Patent status codelist.",
      "enum": [
        "Filed",
        "Issued",
        "Pending"
      ]
    },
    "TextType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TextType",
      "description": "Text is a character string, such as a finite set of characters, generally in the form of words of a language.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The text.",
          "type": "string"
        },
        "languageCode": {
          "description": "The language of the text.",
          "$ref": "#/definitions/LanguageCodeList"
        }
      }
    },
    "AttachmentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AttachmentType",
      "description": "Embedded attachment data or URL to actual attachment.",
      "definitions": {
        "AttachmentContent": {
          "title": "AttachmentContent",
          "description": "Content of an attachment in the JSON message, which can be embedded or an external reference.",
          "type": "object",
          "properties": {
            "content": {
              "description": "Embedded attachment represented as a binary object.",
              "$ref": "#/definitions/BinaryObjectType"
            },
            "url": {
              "description": "A URL to an external document.",
              "type": "string",
              "format": "uri"
            }
          },
          "minProperties": 1
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AttachmentContent"
        }
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "An identifier of the attachment.",
          "$ref": "#/definitions/IdentifierType"
        },
        "descriptions": {
          "description": "Descriptions of the attachment.",
          "$ref": "#/definitions/StringTypeArray"
        }
      }
    },
    "LocalizationInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "LocalizationInclusion",
      "description": "Can be used for any entity to specify localization language code.",
      "type": "object",
      "properties": {
        "language": {
          "$ref": "#/definitions/LanguageCodeList"
        }
      }
    },
    "YearMonthOpenEndPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearMonthOpenEndPeriodType",
      "description": "Single period between year/months. The end year/month is optional and should be used in cases where the end of the period is unknown or uncertain.",
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/YearMonthType"
        },
        "end": {
          "$ref": "#/definitions/YearMonthType"
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "CommentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CommentType",
      "description": "A comment to provide additional information concerning the related entity.",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationInclusion"
        }
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "A label describing the type of comment.",
          "type": "string"
        },
        "author": {
          "description": "The name of an author of a comment.",
          "type": "string"
        },
        "datetime": {
          "description": "The date and time that the comment was made.",
          "$ref": "#/definitions/DateTimeType"
        },
        "status": {
          "description": "The status of a comment.",
          "type": "string"
        },
        "note": {
          "description": "The comment.",
          "type": "string"
        }
      },
      "required": [
        "note"
      ]
    },
    "MeasureType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "MeasureType",
      "description": "A measure is a numeric value determined by measuring an object along with the specified unit of measure.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The numeric value of the measure.",
          "type": "number"
        },
        "unitCode": {
          "description": "The unit of measure.",
          "$ref": "#/definitions/UnitCodeList"
        }
      },
      "required": [
        "value"
      ]
    },
    "YearMonthType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearMonthType",
      "description": "A single year and month, in the format YYYY-MM",
      "type": "string",
      "hropenFormat": "yearMonth",
      "pattern": "^([12]\\d{3}-(0[1-9]|1[0-2]))$"
    },
    "MonthType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "MonthType",
      "description": "A single month, in the format MM from 01-12",
      "type": "string",
      "hropenFormat": "month",
      "pattern": "^(1[012]|0?[1-9])$"
    },
    "YearPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearPeriodType",
      "description": "Single period between years. Both start and end are required.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/YearOpenEndPeriodType"
        }
      ],
      "required": [
        "end"
      ]
    },
    "TimeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TimeType",
      "description": "Time point according ISO 8601 standard.",
      "type": "string",
      "hropenFormat": "time",
      "pattern": "^((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\5[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?$"
    },
    "PercentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PercentType",
      "description": "A percent is a value representing a fraction of one hundred, expressed as a quotient.",
      "type": "number"
    },
    "DateOpenEndPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DateOpenEndPeriodType",
      "description": "Single period between dates. The end date is optional and should be used in cases where the end of the period is unknown or uncertain.",
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/DateType"
        },
        "end": {
          "$ref": "#/definitions/DateType"
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "DateTimePeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DateTimePeriodType",
      "description": "Single period between date/times. Both start and end are required.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DateTimeOpenEndPeriodType"
        }
      ],
      "required": [
        "end"
      ]
    },
    "NameType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NameType",
      "description": "A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "languageCode": {
          "$ref": "#/definitions/LanguageCodeList"
        }
      }
    },
    "DateType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DateType",
      "description": "Date representation according ISO 8601 standard.",
      "type": "string",
      "hropenFormat": "date",
      "pattern": "^([\\+-]?\\d{4}(?!\\d{2}\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))?)?$"
    },
    "OpenEndPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OpenEndPeriodType",
      "description": "Single date/timespan/month/year or period between two dates/months/years. The end date is optional and should be used in cases where the end of the period is unknown or uncertain.",
      "anyOf": [
        {
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        {
          "$ref": "#/definitions/DateTimeOpenEndPeriodType"
        },
        {
          "$ref": "#/definitions/DateOpenEndPeriodType"
        },
        {
          "$ref": "#/definitions/YearMonthOpenEndPeriodType"
        },
        {
          "$ref": "#/definitions/YearOpenEndPeriodType"
        }
      ]
    },
    "AmountType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AmountType",
      "description": "An amount is a number of monetary units specified in a currency.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the amount.",
          "type": "number"
        },
        "currency": {
          "description": "The currency of the amount.",
          "$ref": "#/definitions/CurrencyCodeList"
        }
      },
      "required": [
        "value"
      ]
    },
    "GeoType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "GeoType",
      "description": "A geographical coordinate.",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude of the geographical location.",
          "type": "number",
          "minimum": -90,
          "maximum": 90
        },
        "longitude": {
          "description": "The longitude of the geographical location.",
          "type": "number",
          "minimum": -180,
          "maximum": 180
        },
        "altitude": {
          "description": "The altitude of the geographical location. Defaults to meters above sea level in case no unitCode provided.",
          "$ref": "#/definitions/MeasureType"
        },
        "name": {
          "description": "The label of the geo coordinates.",
          "type": "string"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ]
    },
    "IndicatorType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "IndicatorType",
      "description": "An indicator is a list of two mutually exclusive boolean values that express the only possible states of a property.",
      "type": "boolean"
    },
    "RateType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RateType",
      "description": "Used to represent the numerical quotient resulting from a comparison of two independent things such as a quantity measured with respect to another measured quantity.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the rate.",
          "type": "number"
        },
        "multiplier": {
          "description": "The multiplier of the value.",
          "type": "number"
        },
        "unitCode": {
          "description": "The unit code of the value.",
          "$ref": "#/definitions/UnitCodeList"
        },
        "currencyCode": {
          "description": "The currency code of the value.",
          "$ref": "#/definitions/CurrencyCodeList"
        },
        "baseMultiplier": {
          "description": "The base multiplier of the value.",
          "type": "number"
        },
        "baseUnitCode": {
          "description": "The base unit code of the value.",
          "$ref": "#/definitions/UnitCodeList"
        },
        "baseCurrencyCode": {
          "description": "The base currency code of the value.",
          "$ref": "#/definitions/CurrencyCodeList"
        }
      },
      "required": [
        "value"
      ]
    },
    "CodeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CodeType",
      "description": "A code is a character string of letters, numbers, special characters (except escape sequences), and symbols. It represents a definitive value, a method, or a property description in an abbreviated or language-independent form that is part of a finite list of allowed values. Use this schema when there is a defined list of values but the owner is unknown or private, the values may not be referenced, or there is no validation possible.",
      "type": "string"
    },
    "YearOpenEndPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearOpenEndPeriodType",
      "description": "Single period between years. The end year is optional and should be used in cases where the end of the period is unknown or uncertain.",
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/YearType"
        },
        "end": {
          "$ref": "#/definitions/YearType"
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "DateTimeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DateTimeType",
      "description": "DateTime representation according ISO 8601 standard.",
      "type": "string",
      "format": "date-time"
    },
    "EntityType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EntityType",
      "description": "A description of an entity with id, name and code.",
      "type": "object",
      "properties": {
        "id": {
          "description": "A unique identifier which cannot be expressed as enumeration.",
          "$ref": "#/definitions/IdentifierType"
        },
        "name": {
          "description": "Free text description for that entity.",
          "type": "string"
        },
        "code": {
          "description": "A code which can be expressed as enumeration.",
          "$ref": "#/definitions/CodeType"
        }
      },
      "minProperties": 1
    },
    "StatusType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "StatusType",
      "description": "Provide a status for an entity.",
      "type": "object",
      "properties": {
        "statusCode": {
          "description": "The status of the entity.",
          "$ref": "#/definitions/CodeType"
        },
        "statusDate": {
          "description": "The date on which the status changed.",
          "$ref": "#/definitions/DateType"
        },
        "description": {
          "description": "A description of the status.",
          "$ref": "#/definitions/TextType"
        },
        "reasonCode": {
          "description": "The reason for the status. ",
          "$ref": "#/definitions/CodeType"
        }
      }
    },
    "DatePeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DatePeriodType",
      "description": "Single period between dates. Both start and end are required.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DateOpenEndPeriodType"
        }
      ],
      "required": [
        "end"
      ]
    },
    "DataProtectionPolicyInclusion": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DataProtectionPolicyInclusion",
      "description": "Data protection policy according General Data Protection Regulation (GDPR) (Regulation (EU) 2016/679).",
      "definitions": {
        "SecurityPermissionType": {
          "enum": [
            "Read",
            "Modify",
            "Store",
            "Full Control"
          ]
        }
      },
      "type": "object",
      "properties": {
        "dataProtectionPolicy": {
          "type": "object",
          "properties": {
            "retentionDate": {
              "description": "Date until allowed to keep privacy data. In case 'retentionDays' is also present, earlier one is taken as retention limit. In case of no retention property present, data can be kept indefinitely.",
              "$ref": "#/definitions/DateType"
            },
            "retentionDays": {
              "description": "Number of days allowed to keep privacy data. In case 'retentionDate' is also present, earlier one is taken as retention limit. In case of no retention property present, data can be kept indefinitely.",
              "type": "integer"
            },
            "geoRestrictions": {
              "description": "Data can be processed only in countries from this list. In case not present, there is no country restriction associated with data.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "country": {
                    "description": "The Country (represented by an ISO 3166 2 letter code) under which the data protection policy applies. If the policy applies to the world, the country is optional.",
                    "$ref": "#/definitions/CountryCodeList"
                  },
                  "countrySubDivisions": {
                    "description": "An optional further restriction or application of the data protection policy based on a region within the associated country. It should contain an ISO 3166-2 code for the country. Example would be 'US-CA' for California for further restrictions based on the CCPA regulation.",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AddressComponentType"
                    }
                  },
                  "policy": {
                    "description": "The description of the data protection policy (optionally associated with the country and optional region).",
                    "$ref": "#/definitions/SecurityPermissionType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "NounType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NounType",
      "description": "A common type that should be included at the top level of schemas.",
      "allOf": [
        {
          "$ref": "#/definitions/LocalizationInclusion"
        },
        {
          "$ref": "#/definitions/DataProtectionPolicyInclusion"
        }
      ],
      "type": "object",
      "properties": {
        "documentId": {
          "description": "Provides the Identifier(s) of the document being communicated. Uniquely identifies a Document within an organization.",
          "$ref": "#/definitions/IdentifierType"
        },
        "alternateIds": {
          "description": "Alternative document IDs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        }
      }
    },
    "YearMonthPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearMonthPeriodType",
      "description": "Single period between year/months. Both start and end are required.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/YearMonthOpenEndPeriodType"
        }
      ],
      "required": [
        "end"
      ]
    },
    "IdentifierType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "IdentifierType",
      "description": "An identifier is a character string used to uniquely identify one instance of an object within an identification scheme that is managed by an agency. Use this type when the list or values are controlled by an external entity, the list or values are public and could be referenced or validated.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The identifier.",
          "type": "string"
        },
        "schemeId": {
          "description": "The identification of the identifier scheme.",
          "type": "string"
        },
        "schemeVersionId": {
          "description": "The identification of the version of the identifier scheme.",
          "type": "string"
        },
        "schemeAgencyId": {
          "description": "The identification of the agency that manages the identifier scheme.",
          "type": "string"
        },
        "description": {
          "description": "The description of the identifier.",
          "type": "string"
        },
        "schemeLink": {
          "description": "The URI that identifies where the identification scheme data is located.",
          "type": "string",
          "format": "uri"
        },
        "agencyUri": {
          "description": "The URI that identifies where the identification scheme is located.",
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "value"
      ]
    },
    "EffectiveTimePeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "EffectiveTimePeriodType",
      "description": "A time period in which an associated object is effective.",
      "type": "object",
      "properties": {
        "validFrom": {
          "$ref": "#/definitions/DateTimeType"
        },
        "validTo": {
          "$ref": "#/definitions/DateTimeType"
        }
      }
    },
    "DayOfMonthType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DayOfMonthType",
      "description": "A day within the month, in the format DD (01-31)",
      "type": "string",
      "hropenFormat": "day",
      "pattern": "^(0[1-9]|[12][0-9]|3[01])$"
    },
    "YearType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "YearType",
      "description": "A single 4 digit year.",
      "type": "string",
      "hropenFormat": "year",
      "pattern": "^([12]\\d{3})$"
    },
    "AttachmentReferenceType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AttachmentReferenceType",
      "description": "A reference to an attachment that is within the current context of the document, or an external reference.",
      "type": "object",
      "properties": {
        "reference": {
          "description": "An identifier or reference to a document.",
          "$ref": "#/definitions/IdentifierType"
        },
        "uri": {
          "description": "An internal reference (typically a JSON pointer reference).",
          "type": "string"
        },
        "descriptions": {
          "description": "Descriptions of the attachment reference.",
          "$ref": "#/definitions/StringTypeArray"
        }
      },
      "required": [
        "uri"
      ]
    },
    "RatioType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RatioType",
      "description": "Relation between two independent quantities, using the same unit.",
      "type": "number"
    },
    "StringTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "StringTypeArray",
      "description": "Array of string data.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "PeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "PeriodType",
      "description": "Single date/timespan/month/year or period between two dates/months/years.",
      "anyOf": [
        {
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        {
          "$ref": "#/definitions/DateTimePeriodType"
        },
        {
          "$ref": "#/definitions/DatePeriodType"
        },
        {
          "$ref": "#/definitions/YearMonthPeriodType"
        },
        {
          "$ref": "#/definitions/YearPeriodType"
        }
      ]
    },
    "IdGroupType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "IdGroupType",
      "description": "A set of identifiers for an object, with a primary identifier and an array of alternate identifiers.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The unique and/or primary identifier.",
          "$ref": "#/definitions/IdentifierType"
        },
        "alternateIds": {
          "description": "Associated alternative identifiers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        }
      }
    },
    "BinaryObjectType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "BinaryObjectType",
      "description": "A binary object is a sequence of binary digits (bits) to represent a file. It is recommended to use base64 encoding.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "encoding": {
          "enum": [
            "7bit",
            "8bit",
            "binary",
            "quoted-printable",
            "base64",
            "ietf-token",
            "x-token"
          ]
        },
        "mimeType": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "DateTimeOpenEndPeriodType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DateTimeOpenEndPeriodType",
      "description": "Single period between date/times. The end date/time is optional and should be used in cases where the end of the period is unknown or uncertain.",
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/DateTimeType"
        },
        "end": {
          "$ref": "#/definitions/DateTimeType"
        }
      },
      "required": [
        "start"
      ],
      "additionalProperties": false
    },
    "TextTypeArray": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TextTypeArray",
      "description": "Array of TextType data - for providing a multilingual textual representation.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TextType"
      }
    },
    "DurationType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "DurationType",
      "description": "A duration is the specification of a length of time without a fixed start or end time.",
      "oneOf": [
        {
          "description": "Decimal value in seconds.",
          "type": "number"
        },
        {
          "description": "ISO 8601 time duration format.",
          "type": "string",
          "hropenFormat": "duration",
          "pattern": "^(-|)P(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?Y)?(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?M)?(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?W)?(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?D)?(?:T(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?H)?(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?M)?(?:\\d+(?:(\\.(?!.*[a-zA-Z][0-9].*))\\d+)?S)?)?$"
        }
      ]
    },
    "NumberType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "NumberType",
      "description": "A mathematical number that is assigned or is determined by calculation.",
      "type": "number"
    },
    "QuantityType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "QuantityType",
      "description": "A quantity is a counted number of non-monetary units, possibly including fractions.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The number of quantity.",
          "type": "number"
        },
        "unitCode": {
          "description": "The unit of quantity.",
          "$ref": "#/definitions/UnitCodeList"
        }
      },
      "required": [
        "value"
      ]
    },
    "FormattedDateTimeType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "FormattedDateTimeType",
      "description": "This is formatted representation of a date, which may be specified as a date, date/time, year, or year/month.",
      "anyOf": [
        {
          "$ref": "#/definitions/DateType"
        },
        {
          "$ref": "#/definitions/DateTimeType"
        },
        {
          "$ref": "#/definitions/YearType"
        },
        {
          "$ref": "#/definitions/YearMonthType"
        }
      ]
    },
    "OrdinalType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrdinalType",
      "description": "An ordinal number is an assigned mathematical number that represents order or sequence.",
      "type": "integer"
    },
    "ProcessHistoryItemType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ProcessHistoryItemType",
      "description": "Describes a single workflow process history step or item.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier for the history item.",
          "$ref": "#/definitions/IdentifierType"
        },
        "actionDate": {
          "description": "The date and time that the action was executed or the event occurred or the step was completed.",
          "$ref": "#/definitions/FormattedDateTimeType"
        },
        "action": {
          "description": "The executed action that occurred on the step or item by the primary parties. This action may or may not involve a status change of the underlying process. E.g. reviewed application, sent for approval, approved (which might then change status as well).",
          "$ref": "#/definitions/ProcessActionType"
        },
        "status": {
          "description": "The current status of the underlying entity/process. For example, if it is an application process, the status would represent the current state of the candidate to the position opening. E.g. applied, interviewed, offered, hired.",
          "$ref": "#/definitions/ProcessStatusType"
        },
        "previousStatus": {
          "description": "The previous status of the underlying entity/process - relevant in a status change process. Use status only if the whole history is maintained - previousStatus may not be needed.",
          "$ref": "#/definitions/ProcessStatusType"
        },
        "primaryParties": {
          "description": "The parties executing the action. For example, the company, the hiring manager, the HR manager, etc.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessPartyType"
          }
        },
        "associatedParties": {
          "description": "The parties additionally involved in the executed action. For example, the recruiting team or a set of people involved in an interview step. They are not the ones making the decision, but may be influencers or need to be informed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessPartyType"
          }
        },
        "attachments": {
          "description": "Attachments related to the history item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttachmentType"
          }
        },
        "descriptions": {
          "description": "Additional details or descriptions about the history item.",
          "$ref": "#/definitions/StringTypeArray"
        }
      },
      "definitions": {
        "ProcessActionType": {
          "title": "ProcessActionType",
          "description": "The type of action, process, or step that was executed.",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the executed action, process, or step.",
              "type": "string"
            },
            "code": {
              "description": "The code of the executed action, process, or step.",
              "$ref": "#/definitions/CodeType"
            },
            "description": {
              "description": "Description of the executed action, process, or step.",
              "type": "string"
            }
          }
        },
        "ProcessStatusType": {
          "title": "ProcessStatusType",
          "description": "A type defining the status of the underlying item.",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the status of the underlying item.",
              "type": "string"
            },
            "code": {
              "description": "The code of the status of the underlying item.",
              "$ref": "#/definitions/CodeType"
            },
            "description": {
              "description": "Description of the status of the underlying item.",
              "type": "string"
            }
          }
        },
        "ProcessPartyType": {
          "title": "ProcessPartyType",
          "description": "A type defining the party, which may be a person or organization or both.",
          "type": "object",
          "properties": {
            "person": {
              "description": "Contains information to identify a person associated with the interaction or entity.",
              "$ref": "#/definitions/SpecifiedPersonType"
            },
            "organization": {
              "description": "Basic information to reference a specific organization.",
              "$ref": "#/definitions/OrganizationReferenceType"
            }
          }
        }
      }
    },
    "ProcessHistoryType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ProcessHistoryType",
      "description": "Describes a workflow process history, which can be used for modelling recruiting dispositions, onboarding workflow, etc.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ProcessHistoryItemType"
      }
    },
    "TimecardType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "TimecardType",
      "description": "A record of time worked; associated expenses to be reimbursed; and/or allowances associated with the engagement.",
      "definitions": {
        "TimeWorkedRoundingType": {
          "title": "TimeWorkedRoundingType",
          "type": "object",
          "properties": {
            "cycleCode": {
              "$ref": "#/definitions/PayCycleIntervalCodeList"
            },
            "ruleCode": {
              "type": "string"
            },
            "unitCode": {
              "type": "string"
            }
          }
        },
        "StateCodeType": {
          "title": "StateCodeType",
          "description": "A set of codes classifying the state of a TimeCard.",
          "enum": [
            "Raw",
            "Processed",
            "Submitted",
            "Rejected",
            "Approved",
            "Final",
            "Open",
            "Adjusted"
          ]
        },
        "ItemTypeCodeType": {
          "title": "ItemTypeCodeType",
          "description": "Identifies common types of time/work classification",
          "enum": [
            "Regular",
            "Illness",
            "Vacation",
            "SpecialLeave",
            "Holiday",
            "Break",
            "ClockAction",
            "Training",
            "Unscheduled",
            "Compensation",
            "Overtime",
            "Travel",
            "Pickup"
          ]
        },
        "ItemBase": {
          "title": "ItemBase",
          "description": "Common properties used on TimeCardItem and PieceOfWork/Allowance/Expense/Balance",
          "allOf": [
            {
              "$ref": "#/definitions/EntityType"
            },
            {
              "$ref": "#/definitions/ResponsibleInclusion"
            }
          ],
          "type": "object",
          "properties": {
            "statusCode": {
              "$ref": "#/definitions/ActionCodeList"
            },
            "billable": {
              "type": "boolean"
            },
            "payable": {
              "type": "boolean"
            },
            "comment": {
              "$ref": "#/definitions/CommentType"
            }
          }
        },
        "QuantityAmount": {
          "title": "QuantityAmount",
          "anyOf": [
            {
              "title": "quantity",
              "type": "object",
              "properties": {
                "quantity": {
                  "$ref": "#/definitions/QuantityType"
                }
              },
              "required": [
                "quantity"
              ]
            },
            {
              "title": "amount",
              "type": "object",
              "properties": {
                "amount": {
                  "$ref": "#/definitions/AmountType"
                }
              },
              "required": [
                "amount"
              ]
            }
          ]
        },
        "PieceWorkType": {
          "title": "PieceWorkType",
          "description": "Contains information relating to renumeration based on count of items produced or serviced.",
          "allOf": [
            {
              "$ref": "#/definitions/ItemBase"
            }
          ],
          "type": "object",
          "properties": {
            "quantity": {
              "$ref": "#/definitions/QuantityType"
            },
            "payRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayRateType"
              }
            }
          },
          "required": [
            "quantity"
          ]
        },
        "ExpenseType": {
          "title": "ExpenseType",
          "description": "This allows for the reporting of expenses for reimbursement or payment. TimeCard is not designed as an all-purpose expense-reporting format, but rather is designed to accommodate the type of expenses that are reported and reimbursed in the context of staffing assignments.",
          "allOf": [
            {
              "$ref": "#/definitions/ItemBase"
            }
          ],
          "type": "object",
          "properties": {
            "amount": {
              "$ref": "#/definitions/AmountType"
            }
          },
          "required": [
            "amount"
          ]
        },
        "AllowanceType": {
          "title": "AllowanceType",
          "description": "Allows for the reporting of allowances that may be associated with the particular time worked. For example, some workers may be due per diems to cover expenses incurred during an assignment or may receive allowances to cover the cost of items such as uniforms.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/ItemBase"
            },
            {
              "$ref": "#/definitions/QuantityAmount"
            }
          ],
          "properties": {
            "payRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayRateType"
              }
            }
          },
          "dependencies": {
            "payRates": [
              "quantity"
            ]
          }
        },
        "BalanceType": {
          "title": "BalanceType",
          "description": "Allows for the reporting of direct balance values.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/ItemBase"
            },
            {
              "$ref": "#/definitions/QuantityAmount"
            }
          ]
        },
        "TimeCardItemType": {
          "title": "TimeCardItemType",
          "description": "Contains data on a period of work, time event, expense, or allowance that is being reported within a time card.",
          "allOf": [
            {
              "$ref": "#/definitions/ItemBase"
            },
            {
              "$ref": "#/definitions/ResourceClassificationInclusion"
            }
          ],
          "type": "object",
          "properties": {
            "typeCode": {
              "$ref": "#/definitions/ItemTypeCodeType"
            },
            "period": {
              "$ref": "#/definitions/PeriodType"
            },
            "timeTotal": {
              "$ref": "#/definitions/DurationType"
            },
            "expenseDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "entryDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "entryChangeDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "payRates": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayRateType"
              }
            },
            "assignmentIds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "pieceWork": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PieceWorkType"
              }
            },
            "allowances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllowanceType"
              }
            },
            "expenses": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpenseType"
              }
            },
            "balances": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BalanceType"
              }
            },
            "geo": {
              "$ref": "#/definitions/GeoType"
            },
            "attachment": {
              "$ref": "#/definitions/BinaryObjectType"
            }
          },
          "required": [
            "period"
          ],
          "dependencies": {
            "expenseDate": [
              "expense"
            ]
          }
        }
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        },
        {
          "$ref": "#/definitions/ResponsibleInclusion"
        },
        {
          "$ref": "#/definitions/PartyInclusion"
        },
        {
          "$ref": "#/definitions/ResourceClassificationInclusion"
        }
      ],
      "properties": {
        "person": {
          "$ref": "#/definitions/SpecifiedPersonType"
        },
        "period": {
          "$ref": "#/definitions/PeriodType"
        },
        "payRates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayRateType"
          }
        },
        "stateCode": {
          "$ref": "#/definitions/StateCodeType"
        },
        "staffingIds": {
          "$ref": "#/definitions/StaffingReferenceIdsType"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeCardItemType"
          }
        },
        "geo": {
          "$ref": "#/definitions/GeoType"
        }
      }
    },
    "WellnessType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "WellnessType",
      "description": "A set of recorded activity information related to an individual. The main purpose is to allow employees to set and reach employee wellness goals within their employment organization.",
      "definitions": {
        "WellnessRequestSummaryType": {
          "title": "WellnessRequestSummaryType",
          "description": "A summary of a wellness report related to the request.",
          "type": "object",
          "properties": {
            "cycleCode": {
              "description": "The cycle to which the wellness is related. e.g. Day, Week, Month, Year",
              "$ref": "#/definitions/PayCycleIntervalCodeList"
            },
            "episodeCode": {
              "description": "The period under which the activity is measured. e.g. daily, weekly, monthly.",
              "$ref": "#/definitions/CodeType"
            },
            "unitCode": {
              "description": "The unit of wellness being measured. e.g. steps, strokes, cycles.",
              "$ref": "#/definitions/WellnessMeasureCodeList"
            },
            "categoryCode": {
              "description": "A wellness category being measured. e.g. walking, swimming, running, biking.",
              "$ref": "#/definitions/WellnessActivityCategoryCodeList"
            }
          }
        },
        "WellnessActivityCategoryCodeList": {
          "title": "WellnessActivityCategoryCodeList",
          "description": "A set of codes classifying activities related to wellness.",
          "enum": [
            "Walking",
            "Swimming",
            "Running",
            "Biking"
          ]
        },
        "WellnessMeasureCodeList": {
          "title": "WellnessMeasureCodeList",
          "description": "Units for wellness activity measures",
          "enum": [
            "Steps",
            "Strokes",
            "Cycles"
          ]
        },
        "WellnessSummaryActivityType": {
          "title": "WellnessSummaryActivityType",
          "description": "The summary of activity related to wellness",
          "type": "object",
          "properties": {
            "categoryCode": {
              "description": "The wellness code being evaluated. e.g. walking, swimming, running, biking.",
              "$ref": "#/definitions/WellnessActivityCategoryCodeList"
            },
            "totalRoutine": {
              "description": "The total measure of routine/normal activity.",
              "type": "integer"
            },
            "totalModerate": {
              "description": "The total measure of moderate activity.",
              "type": "integer"
            },
            "totalIntense": {
              "description": "The total measure of intense activity.",
              "type": "integer"
            },
            "units": {
              "description": "The unit of wellness being measured. e.g. steps, strokes, cycles.",
              "$ref": "#/definitions/WellnessMeasureCodeList"
            },
            "period": {
              "description": "The period of the recorded activity.",
              "$ref": "#/definitions/DateTimePeriodType"
            }
          }
        },
        "DeviceType": {
          "title": "DeviceType",
          "description": "A type to identify the device being used in a wellness program.",
          "type": "object",
          "properties": {
            "vendor": {
              "description": "The vendor of the device.",
              "type": "string"
            },
            "device": {
              "description": "The specific device (identifier or serial number).",
              "type": "string"
            },
            "name": {
              "description": "The name of the device.",
              "type": "string"
            }
          }
        },
        "WellnessActivityType": {
          "title": "WellnessActivityType",
          "description": "The record of an activity related to wellness.",
          "type": "object",
          "properties": {
            "periodType": {
              "enum": [
                "Daily",
                "Weekly",
                "Monthly"
              ]
            },
            "id": {
              "description": "Identifier for the wellness activity.",
              "$ref": "#/definitions/IdentifierType"
            },
            "lastAcquisitionTime": {
              "description": "The date/time of the last aquisition of data for the wellness activity.",
              "$ref": "#/definitions/DateTimeType"
            },
            "period": {
              "description": "The period to which the measured activity was recorded.",
              "$ref": "#/definitions/DateTimePeriodType"
            },
            "utcOffset": {
              "description": "The number of hours offset of the recorded activity to UTC.",
              "type": "integer"
            },
            "categoryCode": {
              "description": "A wellness category being measured. e.g. walking, swimming, running, biking.",
              "$ref": "#/definitions/WellnessActivityCategoryCodeList"
            },
            "units": {
              "description": "The unit of wellness being measured. e.g. steps, strokes, cycles.",
              "$ref": "#/definitions/WellnessMeasureCodeList"
            },
            "intensity": {
              "enum": [
                "Low",
                "Medium",
                "High"
              ]
            },
            "value": {
              "description": "The value of wellness being measured.",
              "type": "integer"
            },
            "source": {
              "description": "The device from which the measured value was recorded.",
              "$ref": "#/definitions/DeviceType"
            }
          }
        }
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        }
      ],
      "properties": {
        "requestSummary": {
          "description": "A summary of a wellness report related to the request.",
          "$ref": "#/definitions/WellnessRequestSummaryType"
        },
        "activitySummaries": {
          "description": "An array of wellness activity summaries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WellnessSummaryActivityType"
          }
        },
        "activities": {
          "description": "An array of wellness activities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WellnessActivityType"
          }
        }
      }
    },
    "ReportType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ReportType",
      "description": "Represents an Assessments Report for HR Open Standards.",
      "definitions": {
        "AssessmentResultType": {
          "description": "Contains various scoring details and related metadata to interpret the scores.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EffectiveTimePeriodType"
            }
          ],
          "properties": {
            "id": {
              "$ref": "#/definitions/IdentifierType"
            },
            "packageId": {
              "description": "This is a reference to the Package ID that was ordered.",
              "$ref": "#/definitions/IdentifierType"
            },
            "name": {
              "description": "This is a place to put any formal name or identifier for the result. This might be a pass-through value tied to the specific test instrument.",
              "type": "string"
            },
            "assessmentProfileId": {
              "$ref": "#/definitions/IdentifierType"
            },
            "overallResult": {
              "description": "A high-level or summary result for an assessment or appraisal. Can indicate whether or not there was a satisfactory result (PassedIndicator) as well as include some type of overall score or a `rolled up` average or weighted average of component scores.",
              "$ref": "#/definitions/AssessmentScoreType"
            },
            "detailedResults": {
              "description": "Assessment scores.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssessmentScoreType"
              }
            },
            "testInstance": {
              "description": "TestInstance is a set of information about the test instance actually taken by the assessment subject.",
              "$ref": "#/definitions/TestInstanceType"
            },
            "assessmentStatus": {
              "description": "Code indicating the status of an assessment.",
              "$ref": "#/definitions/AssessmentStatusCodeList"
            },
            "attachment": {
              "$ref": "#/definitions/AttachmentType"
            },
            "languageCode": {
              "$ref": "#/definitions/LanguageCodeList"
            },
            "accessPoint": {
              "$ref": "#/definitions/WebType"
            }
          }
        },
        "AssessmentScoreType": {
          "title": "AssessmentScoreType",
          "description": "This is the test score type structure.",
          "type": "object",
          "properties": {
            "id": {
              "description": "This is an identifier for the assessment score.",
              "$ref": "#/definitions/IdentifierType"
            },
            "passedIndicator": {
              "description": "Pass or fail indicator.",
              "$ref": "#/definitions/IndicatorType"
            },
            "bandId": {
              "description": "An identifier of a band, a place on a distribution of scores.",
              "$ref": "#/definitions/IdentifierType"
            },
            "comments": {
              "description": "Comments from the assessment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentType"
              }
            },
            "descriptions": {
              "description": "Result descriptions.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "assessedCompetency": {
              "$ref": "#/definitions/SpecifiedCompetencyType"
            },
            "score": {
              "$ref": "#/definitions/ScoreType"
            }
          }
        },
        "TestInstanceType": {
          "title": "TestInstanceType",
          "description": "TestInstance is a set of information about the test instance actually taken by the assessment subject.",
          "type": "object",
          "properties": {
            "testInstanceId": {
              "$ref": "#/definitions/IdentifierType"
            },
            "versionId": {
              "$ref": "#/definitions/IdentifierType"
            },
            "assessmentLanguageCode": {
              "$ref": "#/definitions/LanguageCodeList"
            },
            "testDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "testScoreIssuedDate": {
              "$ref": "#/definitions/FormattedDateTimeType"
            },
            "locationId": {
              "$ref": "#/definitions/IdentifierType"
            }
          }
        }
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        },
        {
          "$ref": "#/definitions/PartyInclusion"
        }
      ],
      "properties": {
        "documentSequence": {
          "description": "The DocumentSequence serves as an identifier on the different instances of a noun in a message instance; the sequence numbers are specific to the message instance",
          "type": "number"
        },
        "orderId": {
          "description": "AssessmentOrderId. Used to indicate the order line number on which the rate is specified.",
          "$ref": "#/definitions/IdentifierType"
        },
        "results": {
          "description": "Array of results for the assessment ordered.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentResultType"
          }
        },
        "subject": {
          "$ref": "#/definitions/AssessmentSubjectType"
        },
        "assessmentResultsURL": {
          "description": "Specifies the URL to retrieve assessment results.",
          "$ref": "#/definitions/RedirectUrlType"
        }
      }
    },
    "OrderType_1": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "OrderType",
      "description": "Represents an Assessments Order for HR Open Standards.",
      "definitions": {
        "AssessmentAccessType": {
          "title": "AssessmentAccessType",
          "description": "This is a set of information used to provide the assessment subject access to a test that has been ordered.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/EffectiveTimePeriodType"
            }
          ],
          "properties": {
            "id": {
              "description": "Identifier for an assessment access type.",
              "$ref": "#/definitions/IdentifierType"
            },
            "assessmentCommunication": {
              "description": "Communication types to communicate with an assessment subject for a test or to schedule an assessment time and place to take the test.",
              "$ref": "#/definitions/CommunicationType"
            },
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "AssessmentPackagesType": {
          "title": "AssessmentPackagesType",
          "description": "Array of packages used in staged assessments.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/NounType"
            },
            {
              "$ref": "#/definitions/PartyInclusion"
            }
          ],
          "properties": {
            "packageId": {
              "description": "Identifier to associate with the assessment.",
              "$ref": "#/definitions/IdentifierType"
            },
            "conditions": {
              "description": "Specifies conditions for progressing through multiple assessment orders",
              "$ref": "#/definitions/Conditions"
            },
            "sendAssessmentResultsToURL": {
              "description": "Specifies the URL to direct the candidate to after the assessment is complete.",
              "$ref": "#/definitions/RedirectUrlType"
            },
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            }
          }
        },
        "Conditions": {
          "title": "Conditions",
          "description": "Conditions used in progression of an object/event/person",
          "type": "array",
          "properties": {
            "type": {
              "description": "The time the condition should be processed in relation to each item in the array.",
              "enum": [
                "pre",
                "post"
              ],
              "enumNames": [
                "Pre Event",
                "Post Event"
              ]
            },
            "key": {
              "description": "JSONPath of the property to which the condition applies.",
              "type": "string"
            },
            "operator": {
              "description": "The operator value to initiate a comparison of the key value (JSONPath) to the supplied value",
              "type": "string",
              "oneOf": [
                {
                  "$ref": "#/definitions/TermsQueryType"
                },
                {
                  "$ref": "#/definitions/RangeNumberQueryType"
                }
              ]
            },
            "value": {
              "description": "The value to compare with using the operator against the value in the key",
              "type": "string"
            }
          }
        }
      },
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        },
        {
          "$ref": "#/definitions/PartyInclusion"
        }
      ],
      "properties": {
        "documentSequence": {
          "type": "integer"
        },
        "packageId": {
          "description": "Identifier to associate with the assessment.",
          "$ref": "#/definitions/IdentifierType"
        },
        "comparisonGroupIds": {
          "description": "Indicates the applicable group for comparing assessment or appraisal results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierType"
          }
        },
        "assessmentRequesterName": {
          "description": "The individual that makes the request.",
          "type": "string"
        },
        "subject": {
          "description": "The person who will be the subject of the assessment.",
          "$ref": "#/definitions/AssessmentSubjectType"
        },
        "assessmentLanguageCodes": {
          "description": "The language in which the assessment is required.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageCodeList"
          }
        },
        "assessmentResultLanguageCodes": {
          "description": "The language in which the assessment results are required.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageCodeList"
          }
        },
        "assessmentAccess": {
          "description": "This is a set of information used to provide the assessment subject access to a test that has been ordered.",
          "$ref": "#/definitions/AssessmentAccessType"
        },
        "testLocationId": {
          "description": "An identifier for the location of a testing site or test center where a test was taken. If a test center does not have an identifier, then the name will be used as the identifier in the value property.",
          "$ref": "#/definitions/IdentifierType"
        },
        "assessmentAccessURL": {
          "description": "The URL that the Requestor will re-direct the candidate to in order to complete the assessment.",
          "$ref": "#/definitions/RedirectUrlType"
        },
        "onCompletionURL": {
          "description": "Specifies the URL to direct the candidate to after the assessment is complete.",
          "$ref": "#/definitions/RedirectUrlType"
        },
        "sendAssessmentResultsToURL": {
          "description": "Specifies the URL to direct the candidate to after the assessment is complete.",
          "$ref": "#/definitions/RedirectUrlType"
        },
        "invitationByPartyCode": {
          "description": "Specifies who will send the invitation to the candidate.  Options are the Customer or the Supplier.",
          "$ref": "#/definitions/InvitationPartyCodeList"
        },
        "code": {
          "description": "Specifies an optional field to be used by parties for communication of an additional piece of data such as accounting code, billing identifier, department identifier, or location information.",
          "$ref": "#/definitions/CodeType"
        },
        "assessmentStatus": {
          "description": "Code indicating the status of an assessment.",
          "$ref": "#/definitions/AssessmentStatusCodeList"
        },
        "packages": {
          "description": "Array of packages used in staged assessments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentPackagesType"
          }
        }
      }
    },
    "AssessmentSubjectType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssessmentSubjectType",
      "description": "Person to be assessed.",
      "allOf": [
        {
          "$ref": "#/definitions/PersonLegalType"
        },
        {
          "$ref": "#/definitions/PersonPhysicalInclusion"
        }
      ],
      "type": "object",
      "properties": {
        "subjectId": {
          "description": "Primary identifier for the person to be assessed.The test taker or person who takes the assessment or is assessed.",
          "$ref": "#/definitions/IdentifierType"
        },
        "internalCandidateIndicator": {
          "description": "Indicates whether a subject is a candidate for a position with the customer party.",
          "$ref": "#/definitions/IndicatorType"
        },
        "accomodationTypeCodes": {
          "description": "A code identifying a type of assistance or technology required to accomodate a disability.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeType"
          }
        }
      }
    },
    "AssessmentType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssessmentType",
      "description": "Represents the Assessments Specification.",
      "type": "object",
      "properties": {
        "catalog": {
          "$ref": "#/definitions/CatalogType"
        },
        "order": {
          "$ref": "#/definitions/OrderType_1"
        },
        "report": {
          "$ref": "#/definitions/ReportType"
        }
      }
    },
    "CatalogType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "CatalogType",
      "description": "Represents an Assessments Catalog for HR Open Standards.",
      "definitions": {
        "AdditionalAmountType": {
          "title": "AdditionalAmountType",
          "description": "Part of assessment package costs.",
          "allOf": [
            {
              "$ref": "#/definitions/AmountType"
            }
          ],
          "type": "object",
          "properties": {
            "typeCode": {
              "description": "Type code for an additional amount.",
              "$ref": "#/definitions/AmountType"
            }
          }
        },
        "AdditionalItemType": {
          "title": "AdditionalItemType",
          "description": "Structure to define additional items between trading partners.",
          "type": "object",
          "properties": {
            "id": {
              "$ref": "#/definitions/IdentifierType"
            },
            "sequence": {
              "description": "Order for the additional item to be displayed",
              "type": "number"
            },
            "name": {
              "description": "Name of the additional item.",
              "type": "string"
            },
            "typeCode": {
              "$ref": "#/definitions/CodeType"
            },
            "content": {
              "description": "Description of the additional item.",
              "type": "string"
            }
          }
        },
        "AssessmentAdministrationType": {
          "description": "Provides details for the administration of an assessment.",
          "type": "object",
          "properties": {
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            },
            "proctoredAssessmentIndicator": {
              "type": "boolean"
            },
            "timeEnforcedIndicator": {
              "type": "boolean"
            },
            "testDuration": {
              "$ref": "#/definitions/DurationType"
            },
            "schedulingRequiredIndicator": {
              "type": "boolean"
            }
          }
        },
        "AssessmentApplicabilityType": {
          "description": "Provides details for the applicability of an assessment test.",
          "type": "object",
          "properties": {
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            },
            "applicableRegions": {
              "description": "A set of information broadly describing the region(s) where the assessment is applicable or available.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/JurisdictionType"
              }
            },
            "assessmentTypeCodes": {
              "description": "An array of assessment type codes for the test package.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssessmentTypeCodeList"
              }
            },
            "assessedCompetencies": {
              "description": "An array of assessment competencies for the test package.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpecifiedCompetencyType"
              }
            },
            "jobCategoryCodes": {
              "description": "An array of job category codes for the test package.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            },
            "careerLevelCode": {
              "$ref": "#/definitions/CareerLevelCodeList"
            }
          }
        },
        "AssessmentFulfillmentType": {
          "description": "A set of information describing options and characteristics relating to the way an assessment result is provided. For example, the language or available languages of the assessment report; the period for which the result is recognized as valid or reliable, the name or identity of the scoring profile used in calculating the result; etc.",
          "type": "object",
          "properties": {
            "descriptions": {
              "$ref": "#/definitions/StringTypeArray"
            },
            "effectivePeriod": {
              "description": "The period for which the result is recognized as valid or reliable.",
              "$ref": "#/definitions/EffectiveTimePeriodType"
            },
            "scoreProfileNames": {
              "description": "Name or identity of the scoring profile used in calculating the result.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "reportLanguageCodes": {
              "description": "Available languages for the assessment report.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/LanguageCodeList"
              }
            }
          }
        },
        "IdSetType": {
          "title": "IdSetType",
          "description": "Identification Set",
          "allOf": [
            {
              "$ref": "#/definitions/EffectiveTimePeriodType"
            }
          ],
          "properties": {
            "id": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "agencyRole": {
              "$ref": "#/definitions/AgencyRoleCodeList"
            },
            "identifierAttributeGroup": {
              "type": "string"
            }
          }
        },
        "AssessmentPackageType": {
          "title": "AssessmentPackageType",
          "definition": "Describes a set of component services that are marketed and can be ordered as a unit.",
          "type": "object",
          "properties": {
            "packageId": {
              "description": "This is the 'Package ID' used to order a set of assessment services.",
              "$ref": "#/definitions/IdentifierType"
            },
            "ids": {
              "description": "This is the 'Package ID' that would be used to order a set of assessment services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "name": {
              "description": "The name or terse descriptive label by which the package is referred.",
              "type": "string"
            },
            "descriptions": {
              "description": "An array of descriptions for the package.",
              "$ref": "#/definitions/StringTypeArray"
            },
            "parentGroupIds": {
              "description": "A reference from a child package to one or more associated parent entity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdentifierType"
              }
            },
            "packageTypeCodes": {
              "description": "Associated type codes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeType"
              }
            },
            "partyReportingIds": {
              "description": "A repeating ID set used to pass along identifiers that are used for reporting, filtering, accounting, cost center identification, and similar purposes",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IdSetType"
              }
            },
            "serviceAvailabilityCode": {
              "description": "Indicates availability of the package.",
              "$ref": "#/definitions/ServiceAvailabilityCodeList"
            },
            "packageCost": {
              "description": "Contains availible costs associated with the package.",
              "type": "object",
              "properties": {
                "baseAmount": {
                  "$ref": "#/definitions/AmountType"
                },
                "additionalAmounts": {
                  "description": "Additional item costs",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdditionalAmountType"
                  }
                },
                "additionalItems": {
                  "description": "Additional items that are part of the package cost.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdditionalItemType"
                  }
                },
                "totalAmount": {
                  "description": "Includes baseAmount and additionalAmounts.",
                  "$ref": "#/definitions/AmountType"
                }
              }
            },
            "administration": {
              "$ref": "#/definitions/AssessmentAdministrationType"
            },
            "applicability": {
              "$ref": "#/definitions/AssessmentApplicabilityType"
            },
            "fulfillment": {
              "$ref": "#/definitions/AssessmentFulfillmentType"
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/NounType"
        },
        {
          "$ref": "#/definitions/PartyInclusion"
        }
      ],
      "properties": {
        "documentSequence": {
          "type": "integer"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssessmentPackageType"
          }
        }
      }
    },
    "RedirectUrlType": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "RedirectUrlType",
      "description": "Structure for a link to an action in an assessment order and report.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EffectiveTimePeriodType"
        }
      ],
      "properties": {
        "uri": {
          "description": "URI or URL for the redirect.",
          "type": "string",
          "format": "uri"
        },
        "statusCode": {
          "description": "HTTP Status Code.",
          "type": "string"
        },
        "message": {
          "description": "Text message to be displayed.",
          "type": "string"
        },
        "timeOut": {
          "description": "Countdown for the URL to be displayed.",
          "type": "integer"
        }
      },
      "required": [
        "uri"
      ]
    },
    "ServiceAvailabilityCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "ServiceAvailabilityCodeList",
      "description": "A set of codes classifying the availability of an assessment package.",
      "enum": [
        "Available",
        "Unavailable",
        "TemporarilyUnavailable"
      ]
    },
    "InvitationPartyCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "InvitationPartyCodeList",
      "description": "Specifies who will send the invitation to the assessment subject.  Options are the Customer or the Supplier.",
      "enum": [
        "Customer",
        "Supplier"
      ]
    },
    "AssessmentStatusCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssessmentStatusCodeList",
      "description": "A set of codes indicating the status of an assessment The name of the assessment status.",
      "enum": [
        "OrderAcknowledged",
        "TestPendingScheduling",
        "TestScheduled",
        "CompletedTestPendingScoring",
        "ScoredTestPendingReview",
        "SubjectDeclinedTest",
        "OrderComplete",
        "OrderInProgress",
        "OrderCancelled",
        "OrderExpired",
        "OrderReviewRequired",
        "Deferred",
        "Error"
      ]
    },
    "AssessmentTypeCodeList": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "version": "4.3.0",
      "title": "AssessmentTypeCodeList",
      "description": "A set of codes broadly classifying the type of assessment or the principal target of what is assessed.",
      "enum": [
        "Knowledge",
        "Skill",
        "Ability",
        "Psychometric",
        "CertificationOrLicense"
      ]
    }
  },
  "properties": {
    "hrData": {
      "type": "object",
      "description": "Root object for HR data",
      "properties": {
        "positiontype": {
          "$ref": "#/definitions/PositionType"
        },
        "positionprofiletype": {
          "$ref": "#/definitions/PositionProfileType"
        },
        "positionopeningtype": {
          "$ref": "#/definitions/PositionOpeningType"
        },
        "candidatetype": {
          "$ref": "#/definitions/CandidateType"
        },
        "jdxorganizationtype": {
          "$ref": "#/definitions/JDXOrganizationType"
        },
        "verifyingorganizationtype": {
          "$ref": "#/definitions/VerifyingOrganizationType"
        },
        "resumepersonbasetype": {
          "$ref": "#/definitions/ResumePersonBaseType"
        },
        "positionpreferencetype": {
          "$ref": "#/definitions/PositionPreferenceType"
        },
        "candidaterelationshipcodelist": {
          "$ref": "#/definitions/CandidateRelationshipCodeList"
        },
        "positionquestionstype": {
          "$ref": "#/definitions/PositionQuestionsType"
        }
      }
    }
  }
}